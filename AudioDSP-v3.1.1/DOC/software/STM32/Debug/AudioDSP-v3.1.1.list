
AudioDSP-v3.1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000732c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080074c4  080074c4  000174c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074e8  080074e8  000270fc  2**0
                  CONTENTS
  4 .ARM          00000008  080074e8  080074e8  000174e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074f0  080074f0  000270fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074f0  080074f0  000174f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074f4  080074f4  000174f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000070fc  20000000  080074f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  200070fc  0800e5f4  000270fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200075b8  0800e5f4  000275b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000270fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002712c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d6f5  00000000  00000000  0002716f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001de1  00000000  00000000  00034864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00036648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aed  00000000  00000000  00037428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e35c  00000000  00000000  00037f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f07  00000000  00000000  00066271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013d40a  00000000  00000000  00077178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fd4  00000000  00000000  001b4584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  001b8558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200070fc 	.word	0x200070fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080074ac 	.word	0x080074ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20007100 	.word	0x20007100
 80001d4:	080074ac 	.word	0x080074ac

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b970 	b.w	8000de8 <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9e08      	ldr	r6, [sp, #32]
 8000b26:	460d      	mov	r5, r1
 8000b28:	4604      	mov	r4, r0
 8000b2a:	460f      	mov	r7, r1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d14a      	bne.n	8000bc6 <__udivmoddi4+0xa6>
 8000b30:	428a      	cmp	r2, r1
 8000b32:	4694      	mov	ip, r2
 8000b34:	d965      	bls.n	8000c02 <__udivmoddi4+0xe2>
 8000b36:	fab2 f382 	clz	r3, r2
 8000b3a:	b143      	cbz	r3, 8000b4e <__udivmoddi4+0x2e>
 8000b3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b40:	f1c3 0220 	rsb	r2, r3, #32
 8000b44:	409f      	lsls	r7, r3
 8000b46:	fa20 f202 	lsr.w	r2, r0, r2
 8000b4a:	4317      	orrs	r7, r2
 8000b4c:	409c      	lsls	r4, r3
 8000b4e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b52:	fa1f f58c 	uxth.w	r5, ip
 8000b56:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b5a:	0c22      	lsrs	r2, r4, #16
 8000b5c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b60:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b64:	fb01 f005 	mul.w	r0, r1, r5
 8000b68:	4290      	cmp	r0, r2
 8000b6a:	d90a      	bls.n	8000b82 <__udivmoddi4+0x62>
 8000b6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b70:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b74:	f080 811c 	bcs.w	8000db0 <__udivmoddi4+0x290>
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	f240 8119 	bls.w	8000db0 <__udivmoddi4+0x290>
 8000b7e:	3902      	subs	r1, #2
 8000b80:	4462      	add	r2, ip
 8000b82:	1a12      	subs	r2, r2, r0
 8000b84:	b2a4      	uxth	r4, r4
 8000b86:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b8a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b92:	fb00 f505 	mul.w	r5, r0, r5
 8000b96:	42a5      	cmp	r5, r4
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x90>
 8000b9a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ba2:	f080 8107 	bcs.w	8000db4 <__udivmoddi4+0x294>
 8000ba6:	42a5      	cmp	r5, r4
 8000ba8:	f240 8104 	bls.w	8000db4 <__udivmoddi4+0x294>
 8000bac:	4464      	add	r4, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb4:	1b64      	subs	r4, r4, r5
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11e      	cbz	r6, 8000bc2 <__udivmoddi4+0xa2>
 8000bba:	40dc      	lsrs	r4, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e9c6 4300 	strd	r4, r3, [r6]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d908      	bls.n	8000bdc <__udivmoddi4+0xbc>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	f000 80ed 	beq.w	8000daa <__udivmoddi4+0x28a>
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bdc:	fab3 f183 	clz	r1, r3
 8000be0:	2900      	cmp	r1, #0
 8000be2:	d149      	bne.n	8000c78 <__udivmoddi4+0x158>
 8000be4:	42ab      	cmp	r3, r5
 8000be6:	d302      	bcc.n	8000bee <__udivmoddi4+0xce>
 8000be8:	4282      	cmp	r2, r0
 8000bea:	f200 80f8 	bhi.w	8000dde <__udivmoddi4+0x2be>
 8000bee:	1a84      	subs	r4, r0, r2
 8000bf0:	eb65 0203 	sbc.w	r2, r5, r3
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	4617      	mov	r7, r2
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d0e2      	beq.n	8000bc2 <__udivmoddi4+0xa2>
 8000bfc:	e9c6 4700 	strd	r4, r7, [r6]
 8000c00:	e7df      	b.n	8000bc2 <__udivmoddi4+0xa2>
 8000c02:	b902      	cbnz	r2, 8000c06 <__udivmoddi4+0xe6>
 8000c04:	deff      	udf	#255	; 0xff
 8000c06:	fab2 f382 	clz	r3, r2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f040 8090 	bne.w	8000d30 <__udivmoddi4+0x210>
 8000c10:	1a8a      	subs	r2, r1, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c20:	fb07 2015 	mls	r0, r7, r5, r2
 8000c24:	0c22      	lsrs	r2, r4, #16
 8000c26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c2a:	fb0e f005 	mul.w	r0, lr, r5
 8000c2e:	4290      	cmp	r0, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x124>
 8000c32:	eb1c 0202 	adds.w	r2, ip, r2
 8000c36:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x122>
 8000c3c:	4290      	cmp	r0, r2
 8000c3e:	f200 80cb 	bhi.w	8000dd8 <__udivmoddi4+0x2b8>
 8000c42:	4645      	mov	r5, r8
 8000c44:	1a12      	subs	r2, r2, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c4c:	fb07 2210 	mls	r2, r7, r0, r2
 8000c50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c54:	fb0e fe00 	mul.w	lr, lr, r0
 8000c58:	45a6      	cmp	lr, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x14e>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0x14c>
 8000c66:	45a6      	cmp	lr, r4
 8000c68:	f200 80bb 	bhi.w	8000de2 <__udivmoddi4+0x2c2>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c76:	e79f      	b.n	8000bb8 <__udivmoddi4+0x98>
 8000c78:	f1c1 0720 	rsb	r7, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c86:	fa05 f401 	lsl.w	r4, r5, r1
 8000c8a:	fa20 f307 	lsr.w	r3, r0, r7
 8000c8e:	40fd      	lsrs	r5, r7
 8000c90:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	fb09 5518 	mls	r5, r9, r8, r5
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cac:	42a5      	cmp	r5, r4
 8000cae:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb2:	fa00 f001 	lsl.w	r0, r0, r1
 8000cb6:	d90b      	bls.n	8000cd0 <__udivmoddi4+0x1b0>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc0:	f080 8088 	bcs.w	8000dd4 <__udivmoddi4+0x2b4>
 8000cc4:	42a5      	cmp	r5, r4
 8000cc6:	f240 8085 	bls.w	8000dd4 <__udivmoddi4+0x2b4>
 8000cca:	f1a8 0802 	sub.w	r8, r8, #2
 8000cce:	4464      	add	r4, ip
 8000cd0:	1b64      	subs	r4, r4, r5
 8000cd2:	b29d      	uxth	r5, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ce0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1da>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cf0:	d26c      	bcs.n	8000dcc <__udivmoddi4+0x2ac>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	d96a      	bls.n	8000dcc <__udivmoddi4+0x2ac>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fba3 9502 	umull	r9, r5, r3, r2
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	42ac      	cmp	r4, r5
 8000d08:	46c8      	mov	r8, r9
 8000d0a:	46ae      	mov	lr, r5
 8000d0c:	d356      	bcc.n	8000dbc <__udivmoddi4+0x29c>
 8000d0e:	d053      	beq.n	8000db8 <__udivmoddi4+0x298>
 8000d10:	b156      	cbz	r6, 8000d28 <__udivmoddi4+0x208>
 8000d12:	ebb0 0208 	subs.w	r2, r0, r8
 8000d16:	eb64 040e 	sbc.w	r4, r4, lr
 8000d1a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d1e:	40ca      	lsrs	r2, r1
 8000d20:	40cc      	lsrs	r4, r1
 8000d22:	4317      	orrs	r7, r2
 8000d24:	e9c6 7400 	strd	r7, r4, [r6]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d30:	f1c3 0120 	rsb	r1, r3, #32
 8000d34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d38:	fa20 f201 	lsr.w	r2, r0, r1
 8000d3c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d40:	409d      	lsls	r5, r3
 8000d42:	432a      	orrs	r2, r5
 8000d44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d50:	fb07 1510 	mls	r5, r7, r0, r1
 8000d54:	0c11      	lsrs	r1, r2, #16
 8000d56:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d5a:	fb00 f50e 	mul.w	r5, r0, lr
 8000d5e:	428d      	cmp	r5, r1
 8000d60:	fa04 f403 	lsl.w	r4, r4, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x258>
 8000d66:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6e:	d22f      	bcs.n	8000dd0 <__udivmoddi4+0x2b0>
 8000d70:	428d      	cmp	r5, r1
 8000d72:	d92d      	bls.n	8000dd0 <__udivmoddi4+0x2b0>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1b49      	subs	r1, r1, r5
 8000d7a:	b292      	uxth	r2, r2
 8000d7c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d80:	fb07 1115 	mls	r1, r7, r5, r1
 8000d84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d88:	fb05 f10e 	mul.w	r1, r5, lr
 8000d8c:	4291      	cmp	r1, r2
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x282>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d98:	d216      	bcs.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d9a:	4291      	cmp	r1, r2
 8000d9c:	d914      	bls.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d9e:	3d02      	subs	r5, #2
 8000da0:	4462      	add	r2, ip
 8000da2:	1a52      	subs	r2, r2, r1
 8000da4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000da8:	e738      	b.n	8000c1c <__udivmoddi4+0xfc>
 8000daa:	4631      	mov	r1, r6
 8000dac:	4630      	mov	r0, r6
 8000dae:	e708      	b.n	8000bc2 <__udivmoddi4+0xa2>
 8000db0:	4639      	mov	r1, r7
 8000db2:	e6e6      	b.n	8000b82 <__udivmoddi4+0x62>
 8000db4:	4610      	mov	r0, r2
 8000db6:	e6fb      	b.n	8000bb0 <__udivmoddi4+0x90>
 8000db8:	4548      	cmp	r0, r9
 8000dba:	d2a9      	bcs.n	8000d10 <__udivmoddi4+0x1f0>
 8000dbc:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	e7a3      	b.n	8000d10 <__udivmoddi4+0x1f0>
 8000dc8:	4645      	mov	r5, r8
 8000dca:	e7ea      	b.n	8000da2 <__udivmoddi4+0x282>
 8000dcc:	462b      	mov	r3, r5
 8000dce:	e794      	b.n	8000cfa <__udivmoddi4+0x1da>
 8000dd0:	4640      	mov	r0, r8
 8000dd2:	e7d1      	b.n	8000d78 <__udivmoddi4+0x258>
 8000dd4:	46d0      	mov	r8, sl
 8000dd6:	e77b      	b.n	8000cd0 <__udivmoddi4+0x1b0>
 8000dd8:	3d02      	subs	r5, #2
 8000dda:	4462      	add	r2, ip
 8000ddc:	e732      	b.n	8000c44 <__udivmoddi4+0x124>
 8000dde:	4608      	mov	r0, r1
 8000de0:	e70a      	b.n	8000bf8 <__udivmoddi4+0xd8>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	e742      	b.n	8000c6e <__udivmoddi4+0x14e>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <default_download_IC_1>:
/*
 * Default Download
 */
#define DEFAULT_DOWNLOAD_SIZE_IC_1 75

void default_download_IC_1(uint16_t devAddress) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	80fb      	strh	r3, [r7, #6]
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOFT_RESET_IC_1_ADDR, REG_SOFT_RESET_IC_1_BYTE, R0_SOFT_RESET_IC_1_Default );
 8000df6:	88f8      	ldrh	r0, [r7, #6]
 8000df8:	4bc5      	ldr	r3, [pc, #788]	; (8001110 <default_download_IC_1+0x324>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	f64f 0190 	movw	r1, #63632	; 0xf890
 8000e00:	f002 fab2 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOFT_RESET_IC_1_ADDR, REG_SOFT_RESET_IC_1_BYTE, R1_SOFT_RESET_IC_1_Default );
 8000e04:	88f8      	ldrh	r0, [r7, #6]
 8000e06:	4bc3      	ldr	r3, [pc, #780]	; (8001114 <default_download_IC_1+0x328>)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	f64f 0190 	movw	r1, #63632	; 0xf890
 8000e0e:	f002 faab 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( devAddress, R2_RESET_DELAY_IC_1_SIZE, R2_RESET_DELAY_IC_1_Default );
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	4ac0      	ldr	r2, [pc, #768]	; (8001118 <default_download_IC_1+0x32c>)
 8000e16:	2102      	movs	r1, #2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 fac9 	bl	80033b0 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R3_HIBERNATE_IC_1_Default );
 8000e1e:	88f8      	ldrh	r0, [r7, #6]
 8000e20:	4bbe      	ldr	r3, [pc, #760]	; (800111c <default_download_IC_1+0x330>)
 8000e22:	2202      	movs	r2, #2
 8000e24:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8000e28:	f002 fa9e 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R4_HIBERNATE_IC_1_Default );
 8000e2c:	88f8      	ldrh	r0, [r7, #6]
 8000e2e:	4bbc      	ldr	r3, [pc, #752]	; (8001120 <default_download_IC_1+0x334>)
 8000e30:	2202      	movs	r2, #2
 8000e32:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8000e36:	f002 fa97 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( devAddress, R5_HIBERNATE_DELAY_IC_1_SIZE, R5_HIBERNATE_DELAY_IC_1_Default );
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	4ab9      	ldr	r2, [pc, #740]	; (8001124 <default_download_IC_1+0x338>)
 8000e3e:	2102      	movs	r1, #2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 fab5 	bl	80033b0 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R6_KILL_CORE_IC_1_Default );
 8000e46:	88f8      	ldrh	r0, [r7, #6]
 8000e48:	4bb7      	ldr	r3, [pc, #732]	; (8001128 <default_download_IC_1+0x33c>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	f24f 4103 	movw	r1, #62467	; 0xf403
 8000e50:	f002 fa8a 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R7_KILL_CORE_IC_1_Default );
 8000e54:	88f8      	ldrh	r0, [r7, #6]
 8000e56:	4bb5      	ldr	r3, [pc, #724]	; (800112c <default_download_IC_1+0x340>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	f24f 4103 	movw	r1, #62467	; 0xf403
 8000e5e:	f002 fa83 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_PLL_ENABLE_IC_1_ADDR, REG_PLL_ENABLE_IC_1_BYTE, R8_PLL_ENABLE_IC_1_Default );
 8000e62:	88f8      	ldrh	r0, [r7, #6]
 8000e64:	4bb2      	ldr	r3, [pc, #712]	; (8001130 <default_download_IC_1+0x344>)
 8000e66:	2202      	movs	r2, #2
 8000e68:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000e6c:	f002 fa7c 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_PLL_CTRL1_IC_1_ADDR, REG_PLL_CTRL1_IC_1_BYTE, R9_PLL_CTRL1_IC_1_Default );
 8000e70:	88f8      	ldrh	r0, [r7, #6]
 8000e72:	4bb0      	ldr	r3, [pc, #704]	; (8001134 <default_download_IC_1+0x348>)
 8000e74:	2202      	movs	r2, #2
 8000e76:	f24f 0101 	movw	r1, #61441	; 0xf001
 8000e7a:	f002 fa75 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_PLL_CLK_SRC_IC_1_ADDR, REG_PLL_CLK_SRC_IC_1_BYTE, R10_PLL_CLK_SRC_IC_1_Default );
 8000e7e:	88f8      	ldrh	r0, [r7, #6]
 8000e80:	4bad      	ldr	r3, [pc, #692]	; (8001138 <default_download_IC_1+0x34c>)
 8000e82:	2202      	movs	r2, #2
 8000e84:	f24f 0102 	movw	r1, #61442	; 0xf002
 8000e88:	f002 fa6e 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MCLK_OUT_IC_1_ADDR, REG_MCLK_OUT_IC_1_BYTE, R11_MCLK_OUT_IC_1_Default );
 8000e8c:	88f8      	ldrh	r0, [r7, #6]
 8000e8e:	4bab      	ldr	r3, [pc, #684]	; (800113c <default_download_IC_1+0x350>)
 8000e90:	2202      	movs	r2, #2
 8000e92:	f24f 0105 	movw	r1, #61445	; 0xf005
 8000e96:	f002 fa67 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_PLL_ENABLE_IC_1_ADDR, REG_PLL_ENABLE_IC_1_BYTE, R12_PLL_ENABLE_IC_1_Default );
 8000e9a:	88f8      	ldrh	r0, [r7, #6]
 8000e9c:	4ba8      	ldr	r3, [pc, #672]	; (8001140 <default_download_IC_1+0x354>)
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000ea4:	f002 fa60 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( devAddress, R13_PLL_LOCK_DELAY_IC_1_SIZE, R13_PLL_LOCK_DELAY_IC_1_Default );
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	4aa6      	ldr	r2, [pc, #664]	; (8001144 <default_download_IC_1+0x358>)
 8000eac:	2102      	movs	r1, #2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 fa7e 	bl	80033b0 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_POWER_ENABLE0_IC_1_ADDR, REG_POWER_ENABLE0_IC_1_BYTE, R14_POWER_ENABLE0_IC_1_Default );
 8000eb4:	88f8      	ldrh	r0, [r7, #6]
 8000eb6:	4ba4      	ldr	r3, [pc, #656]	; (8001148 <default_download_IC_1+0x35c>)
 8000eb8:	2202      	movs	r2, #2
 8000eba:	f24f 0150 	movw	r1, #61520	; 0xf050
 8000ebe:	f002 fa53 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_POWER_ENABLE1_IC_1_ADDR, REG_POWER_ENABLE1_IC_1_BYTE, R15_POWER_ENABLE1_IC_1_Default );
 8000ec2:	88f8      	ldrh	r0, [r7, #6]
 8000ec4:	4ba1      	ldr	r3, [pc, #644]	; (800114c <default_download_IC_1+0x360>)
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	f24f 0151 	movw	r1, #61521	; 0xf051
 8000ecc:	f002 fa4c 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_CLK_GEN1_M_IC_1_ADDR, REG_CLK_GEN1_M_IC_1_BYTE, R16_CLK_GEN1_M_IC_1_Default );
 8000ed0:	88f8      	ldrh	r0, [r7, #6]
 8000ed2:	4b9f      	ldr	r3, [pc, #636]	; (8001150 <default_download_IC_1+0x364>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	f24f 0120 	movw	r1, #61472	; 0xf020
 8000eda:	f002 fa45 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_CLK_GEN1_N_IC_1_ADDR, REG_CLK_GEN1_N_IC_1_BYTE, R17_CLK_GEN1_N_IC_1_Default );
 8000ede:	88f8      	ldrh	r0, [r7, #6]
 8000ee0:	4b9c      	ldr	r3, [pc, #624]	; (8001154 <default_download_IC_1+0x368>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	f24f 0121 	movw	r1, #61473	; 0xf021
 8000ee8:	f002 fa3e 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_CLK_GEN2_M_IC_1_ADDR, REG_CLK_GEN2_M_IC_1_BYTE, R18_CLK_GEN2_M_IC_1_Default );
 8000eec:	88f8      	ldrh	r0, [r7, #6]
 8000eee:	4b9a      	ldr	r3, [pc, #616]	; (8001158 <default_download_IC_1+0x36c>)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	f24f 0122 	movw	r1, #61474	; 0xf022
 8000ef6:	f002 fa37 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_CLK_GEN2_N_IC_1_ADDR, REG_CLK_GEN2_N_IC_1_BYTE, R19_CLK_GEN2_N_IC_1_Default );
 8000efa:	88f8      	ldrh	r0, [r7, #6]
 8000efc:	4b97      	ldr	r3, [pc, #604]	; (800115c <default_download_IC_1+0x370>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	f24f 0123 	movw	r1, #61475	; 0xf023
 8000f04:	f002 fa30 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_CLK_GEN3_M_IC_1_ADDR, REG_CLK_GEN3_M_IC_1_BYTE, R20_CLK_GEN3_M_IC_1_Default );
 8000f08:	88f8      	ldrh	r0, [r7, #6]
 8000f0a:	4b95      	ldr	r3, [pc, #596]	; (8001160 <default_download_IC_1+0x374>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	f24f 0124 	movw	r1, #61476	; 0xf024
 8000f12:	f002 fa29 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_CLK_GEN3_N_IC_1_ADDR, REG_CLK_GEN3_N_IC_1_BYTE, R21_CLK_GEN3_N_IC_1_Default );
 8000f16:	88f8      	ldrh	r0, [r7, #6]
 8000f18:	4b92      	ldr	r3, [pc, #584]	; (8001164 <default_download_IC_1+0x378>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	f24f 0125 	movw	r1, #61477	; 0xf025
 8000f20:	f002 fa22 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP0_MODE_IC_1_ADDR, REG_MP0_MODE_IC_1_BYTE, R22_MP0_MODE_IC_1_Default );
 8000f24:	88f8      	ldrh	r0, [r7, #6]
 8000f26:	4b90      	ldr	r3, [pc, #576]	; (8001168 <default_download_IC_1+0x37c>)
 8000f28:	2202      	movs	r2, #2
 8000f2a:	f24f 5110 	movw	r1, #62736	; 0xf510
 8000f2e:	f002 fa1b 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP1_MODE_IC_1_ADDR, REG_MP1_MODE_IC_1_BYTE, R23_MP1_MODE_IC_1_Default );
 8000f32:	88f8      	ldrh	r0, [r7, #6]
 8000f34:	4b8d      	ldr	r3, [pc, #564]	; (800116c <default_download_IC_1+0x380>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	f24f 5111 	movw	r1, #62737	; 0xf511
 8000f3c:	f002 fa14 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP2_MODE_IC_1_ADDR, REG_MP2_MODE_IC_1_BYTE, R24_MP2_MODE_IC_1_Default );
 8000f40:	88f8      	ldrh	r0, [r7, #6]
 8000f42:	4b8b      	ldr	r3, [pc, #556]	; (8001170 <default_download_IC_1+0x384>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	f24f 5112 	movw	r1, #62738	; 0xf512
 8000f4a:	f002 fa0d 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP3_MODE_IC_1_ADDR, REG_MP3_MODE_IC_1_BYTE, R25_MP3_MODE_IC_1_Default );
 8000f4e:	88f8      	ldrh	r0, [r7, #6]
 8000f50:	4b88      	ldr	r3, [pc, #544]	; (8001174 <default_download_IC_1+0x388>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	f24f 5113 	movw	r1, #62739	; 0xf513
 8000f58:	f002 fa06 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP6_MODE_IC_1_ADDR, REG_MP6_MODE_IC_1_BYTE, R26_MP6_MODE_IC_1_Default );
 8000f5c:	88f8      	ldrh	r0, [r7, #6]
 8000f5e:	4b86      	ldr	r3, [pc, #536]	; (8001178 <default_download_IC_1+0x38c>)
 8000f60:	2202      	movs	r2, #2
 8000f62:	f24f 5116 	movw	r1, #62742	; 0xf516
 8000f66:	f002 f9ff 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP7_MODE_IC_1_ADDR, REG_MP7_MODE_IC_1_BYTE, R27_MP7_MODE_IC_1_Default );
 8000f6a:	88f8      	ldrh	r0, [r7, #6]
 8000f6c:	4b83      	ldr	r3, [pc, #524]	; (800117c <default_download_IC_1+0x390>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	f24f 5117 	movw	r1, #62743	; 0xf517
 8000f74:	f002 f9f8 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SCLK_SCL_PIN_IC_1_ADDR, REG_SCLK_SCL_PIN_IC_1_BYTE, R28_SCLK_SCL_PIN_IC_1_Default );
 8000f78:	88f8      	ldrh	r0, [r7, #6]
 8000f7a:	4b81      	ldr	r3, [pc, #516]	; (8001180 <default_download_IC_1+0x394>)
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	f24f 7199 	movw	r1, #63385	; 0xf799
 8000f82:	f002 f9f1 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MISO_SDA_PIN_IC_1_ADDR, REG_MISO_SDA_PIN_IC_1_BYTE, R29_MISO_SDA_PIN_IC_1_Default );
 8000f86:	88f8      	ldrh	r0, [r7, #6]
 8000f88:	4b7e      	ldr	r3, [pc, #504]	; (8001184 <default_download_IC_1+0x398>)
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	f24f 719a 	movw	r1, #63386	; 0xf79a
 8000f90:	f002 f9ea 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SS_PIN_IC_1_ADDR, REG_SS_PIN_IC_1_BYTE, R30_SS_PIN_IC_1_Default );
 8000f94:	88f8      	ldrh	r0, [r7, #6]
 8000f96:	4b7c      	ldr	r3, [pc, #496]	; (8001188 <default_download_IC_1+0x39c>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	f24f 719b 	movw	r1, #63387	; 0xf79b
 8000f9e:	f002 f9e3 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MOSI_ADDR1_PIN_IC_1_ADDR, REG_MOSI_ADDR1_PIN_IC_1_BYTE, R31_MOSI_ADDR1_PIN_IC_1_Default );
 8000fa2:	88f8      	ldrh	r0, [r7, #6]
 8000fa4:	4b79      	ldr	r3, [pc, #484]	; (800118c <default_download_IC_1+0x3a0>)
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	f24f 719c 	movw	r1, #63388	; 0xf79c
 8000fac:	f002 f9dc 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE0_IC_1_ADDR, REG_SOUT_SOURCE0_IC_1_BYTE, R32_SOUT_SOURCE0_IC_1_Default );
 8000fb0:	88f8      	ldrh	r0, [r7, #6]
 8000fb2:	4b77      	ldr	r3, [pc, #476]	; (8001190 <default_download_IC_1+0x3a4>)
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f24f 1180 	movw	r1, #61824	; 0xf180
 8000fba:	f002 f9d5 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE1_IC_1_ADDR, REG_SOUT_SOURCE1_IC_1_BYTE, R33_SOUT_SOURCE1_IC_1_Default );
 8000fbe:	88f8      	ldrh	r0, [r7, #6]
 8000fc0:	4b74      	ldr	r3, [pc, #464]	; (8001194 <default_download_IC_1+0x3a8>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	f24f 1181 	movw	r1, #61825	; 0xf181
 8000fc8:	f002 f9ce 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE2_IC_1_ADDR, REG_SOUT_SOURCE2_IC_1_BYTE, R34_SOUT_SOURCE2_IC_1_Default );
 8000fcc:	88f8      	ldrh	r0, [r7, #6]
 8000fce:	4b72      	ldr	r3, [pc, #456]	; (8001198 <default_download_IC_1+0x3ac>)
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	f24f 1182 	movw	r1, #61826	; 0xf182
 8000fd6:	f002 f9c7 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE3_IC_1_ADDR, REG_SOUT_SOURCE3_IC_1_BYTE, R35_SOUT_SOURCE3_IC_1_Default );
 8000fda:	88f8      	ldrh	r0, [r7, #6]
 8000fdc:	4b6f      	ldr	r3, [pc, #444]	; (800119c <default_download_IC_1+0x3b0>)
 8000fde:	2202      	movs	r2, #2
 8000fe0:	f24f 1183 	movw	r1, #61827	; 0xf183
 8000fe4:	f002 f9c0 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE4_IC_1_ADDR, REG_SOUT_SOURCE4_IC_1_BYTE, R36_SOUT_SOURCE4_IC_1_Default );
 8000fe8:	88f8      	ldrh	r0, [r7, #6]
 8000fea:	4b6d      	ldr	r3, [pc, #436]	; (80011a0 <default_download_IC_1+0x3b4>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	f24f 1184 	movw	r1, #61828	; 0xf184
 8000ff2:	f002 f9b9 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE5_IC_1_ADDR, REG_SOUT_SOURCE5_IC_1_BYTE, R37_SOUT_SOURCE5_IC_1_Default );
 8000ff6:	88f8      	ldrh	r0, [r7, #6]
 8000ff8:	4b6a      	ldr	r3, [pc, #424]	; (80011a4 <default_download_IC_1+0x3b8>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	f24f 1185 	movw	r1, #61829	; 0xf185
 8001000:	f002 f9b2 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE6_IC_1_ADDR, REG_SOUT_SOURCE6_IC_1_BYTE, R38_SOUT_SOURCE6_IC_1_Default );
 8001004:	88f8      	ldrh	r0, [r7, #6]
 8001006:	4b68      	ldr	r3, [pc, #416]	; (80011a8 <default_download_IC_1+0x3bc>)
 8001008:	2202      	movs	r2, #2
 800100a:	f24f 1186 	movw	r1, #61830	; 0xf186
 800100e:	f002 f9ab 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE7_IC_1_ADDR, REG_SOUT_SOURCE7_IC_1_BYTE, R39_SOUT_SOURCE7_IC_1_Default );
 8001012:	88f8      	ldrh	r0, [r7, #6]
 8001014:	4b65      	ldr	r3, [pc, #404]	; (80011ac <default_download_IC_1+0x3c0>)
 8001016:	2202      	movs	r2, #2
 8001018:	f24f 1187 	movw	r1, #61831	; 0xf187
 800101c:	f002 f9a4 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE8_IC_1_ADDR, REG_SOUT_SOURCE8_IC_1_BYTE, R40_SOUT_SOURCE8_IC_1_Default );
 8001020:	88f8      	ldrh	r0, [r7, #6]
 8001022:	4b63      	ldr	r3, [pc, #396]	; (80011b0 <default_download_IC_1+0x3c4>)
 8001024:	2202      	movs	r2, #2
 8001026:	f24f 1188 	movw	r1, #61832	; 0xf188
 800102a:	f002 f99d 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE9_IC_1_ADDR, REG_SOUT_SOURCE9_IC_1_BYTE, R41_SOUT_SOURCE9_IC_1_Default );
 800102e:	88f8      	ldrh	r0, [r7, #6]
 8001030:	4b60      	ldr	r3, [pc, #384]	; (80011b4 <default_download_IC_1+0x3c8>)
 8001032:	2202      	movs	r2, #2
 8001034:	f24f 1189 	movw	r1, #61833	; 0xf189
 8001038:	f002 f996 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE10_IC_1_ADDR, REG_SOUT_SOURCE10_IC_1_BYTE, R42_SOUT_SOURCE10_IC_1_Default );
 800103c:	88f8      	ldrh	r0, [r7, #6]
 800103e:	4b5e      	ldr	r3, [pc, #376]	; (80011b8 <default_download_IC_1+0x3cc>)
 8001040:	2202      	movs	r2, #2
 8001042:	f24f 118a 	movw	r1, #61834	; 0xf18a
 8001046:	f002 f98f 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE11_IC_1_ADDR, REG_SOUT_SOURCE11_IC_1_BYTE, R43_SOUT_SOURCE11_IC_1_Default );
 800104a:	88f8      	ldrh	r0, [r7, #6]
 800104c:	4b5b      	ldr	r3, [pc, #364]	; (80011bc <default_download_IC_1+0x3d0>)
 800104e:	2202      	movs	r2, #2
 8001050:	f24f 118b 	movw	r1, #61835	; 0xf18b
 8001054:	f002 f988 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE12_IC_1_ADDR, REG_SOUT_SOURCE12_IC_1_BYTE, R44_SOUT_SOURCE12_IC_1_Default );
 8001058:	88f8      	ldrh	r0, [r7, #6]
 800105a:	4b59      	ldr	r3, [pc, #356]	; (80011c0 <default_download_IC_1+0x3d4>)
 800105c:	2202      	movs	r2, #2
 800105e:	f24f 118c 	movw	r1, #61836	; 0xf18c
 8001062:	f002 f981 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE13_IC_1_ADDR, REG_SOUT_SOURCE13_IC_1_BYTE, R45_SOUT_SOURCE13_IC_1_Default );
 8001066:	88f8      	ldrh	r0, [r7, #6]
 8001068:	4b56      	ldr	r3, [pc, #344]	; (80011c4 <default_download_IC_1+0x3d8>)
 800106a:	2202      	movs	r2, #2
 800106c:	f24f 118d 	movw	r1, #61837	; 0xf18d
 8001070:	f002 f97a 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE14_IC_1_ADDR, REG_SOUT_SOURCE14_IC_1_BYTE, R46_SOUT_SOURCE14_IC_1_Default );
 8001074:	88f8      	ldrh	r0, [r7, #6]
 8001076:	4b54      	ldr	r3, [pc, #336]	; (80011c8 <default_download_IC_1+0x3dc>)
 8001078:	2202      	movs	r2, #2
 800107a:	f24f 118e 	movw	r1, #61838	; 0xf18e
 800107e:	f002 f973 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE15_IC_1_ADDR, REG_SOUT_SOURCE15_IC_1_BYTE, R47_SOUT_SOURCE15_IC_1_Default );
 8001082:	88f8      	ldrh	r0, [r7, #6]
 8001084:	4b51      	ldr	r3, [pc, #324]	; (80011cc <default_download_IC_1+0x3e0>)
 8001086:	2202      	movs	r2, #2
 8001088:	f24f 118f 	movw	r1, #61839	; 0xf18f
 800108c:	f002 f96c 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE16_IC_1_ADDR, REG_SOUT_SOURCE16_IC_1_BYTE, R48_SOUT_SOURCE16_IC_1_Default );
 8001090:	88f8      	ldrh	r0, [r7, #6]
 8001092:	4b4f      	ldr	r3, [pc, #316]	; (80011d0 <default_download_IC_1+0x3e4>)
 8001094:	2202      	movs	r2, #2
 8001096:	f24f 1190 	movw	r1, #61840	; 0xf190
 800109a:	f002 f965 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE17_IC_1_ADDR, REG_SOUT_SOURCE17_IC_1_BYTE, R49_SOUT_SOURCE17_IC_1_Default );
 800109e:	88f8      	ldrh	r0, [r7, #6]
 80010a0:	4b4c      	ldr	r3, [pc, #304]	; (80011d4 <default_download_IC_1+0x3e8>)
 80010a2:	2202      	movs	r2, #2
 80010a4:	f24f 1191 	movw	r1, #61841	; 0xf191
 80010a8:	f002 f95e 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE18_IC_1_ADDR, REG_SOUT_SOURCE18_IC_1_BYTE, R50_SOUT_SOURCE18_IC_1_Default );
 80010ac:	88f8      	ldrh	r0, [r7, #6]
 80010ae:	4b4a      	ldr	r3, [pc, #296]	; (80011d8 <default_download_IC_1+0x3ec>)
 80010b0:	2202      	movs	r2, #2
 80010b2:	f24f 1192 	movw	r1, #61842	; 0xf192
 80010b6:	f002 f957 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE19_IC_1_ADDR, REG_SOUT_SOURCE19_IC_1_BYTE, R51_SOUT_SOURCE19_IC_1_Default );
 80010ba:	88f8      	ldrh	r0, [r7, #6]
 80010bc:	4b47      	ldr	r3, [pc, #284]	; (80011dc <default_download_IC_1+0x3f0>)
 80010be:	2202      	movs	r2, #2
 80010c0:	f24f 1193 	movw	r1, #61843	; 0xf193
 80010c4:	f002 f950 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE20_IC_1_ADDR, REG_SOUT_SOURCE20_IC_1_BYTE, R52_SOUT_SOURCE20_IC_1_Default );
 80010c8:	88f8      	ldrh	r0, [r7, #6]
 80010ca:	4b45      	ldr	r3, [pc, #276]	; (80011e0 <default_download_IC_1+0x3f4>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	f24f 1194 	movw	r1, #61844	; 0xf194
 80010d2:	f002 f949 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE21_IC_1_ADDR, REG_SOUT_SOURCE21_IC_1_BYTE, R53_SOUT_SOURCE21_IC_1_Default );
 80010d6:	88f8      	ldrh	r0, [r7, #6]
 80010d8:	4b42      	ldr	r3, [pc, #264]	; (80011e4 <default_download_IC_1+0x3f8>)
 80010da:	2202      	movs	r2, #2
 80010dc:	f24f 1195 	movw	r1, #61845	; 0xf195
 80010e0:	f002 f942 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE22_IC_1_ADDR, REG_SOUT_SOURCE22_IC_1_BYTE, R54_SOUT_SOURCE22_IC_1_Default );
 80010e4:	88f8      	ldrh	r0, [r7, #6]
 80010e6:	4b40      	ldr	r3, [pc, #256]	; (80011e8 <default_download_IC_1+0x3fc>)
 80010e8:	2202      	movs	r2, #2
 80010ea:	f24f 1196 	movw	r1, #61846	; 0xf196
 80010ee:	f002 f93b 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE23_IC_1_ADDR, REG_SOUT_SOURCE23_IC_1_BYTE, R55_SOUT_SOURCE23_IC_1_Default );
 80010f2:	88f8      	ldrh	r0, [r7, #6]
 80010f4:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <default_download_IC_1+0x400>)
 80010f6:	2202      	movs	r2, #2
 80010f8:	f24f 1197 	movw	r1, #61847	; 0xf197
 80010fc:	f002 f934 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_0_0_IC_1_ADDR, REG_SERIAL_BYTE_0_0_IC_1_BYTE, R56_SERIAL_BYTE_0_0_IC_1_Default );
 8001100:	88f8      	ldrh	r0, [r7, #6]
 8001102:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <default_download_IC_1+0x404>)
 8001104:	2202      	movs	r2, #2
 8001106:	f44f 4172 	mov.w	r1, #61952	; 0xf200
 800110a:	f002 f92d 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
 800110e:	e071      	b.n	80011f4 <default_download_IC_1+0x408>
 8001110:	20007118 	.word	0x20007118
 8001114:	20006fa0 	.word	0x20006fa0
 8001118:	20006fa4 	.word	0x20006fa4
 800111c:	2000711c 	.word	0x2000711c
 8001120:	20006fa8 	.word	0x20006fa8
 8001124:	20006fac 	.word	0x20006fac
 8001128:	20007120 	.word	0x20007120
 800112c:	20006fb0 	.word	0x20006fb0
 8001130:	20007124 	.word	0x20007124
 8001134:	20006fb4 	.word	0x20006fb4
 8001138:	20006fb8 	.word	0x20006fb8
 800113c:	20006fbc 	.word	0x20006fbc
 8001140:	20006fc0 	.word	0x20006fc0
 8001144:	20006fc4 	.word	0x20006fc4
 8001148:	20006fc8 	.word	0x20006fc8
 800114c:	20006fcc 	.word	0x20006fcc
 8001150:	20006fd0 	.word	0x20006fd0
 8001154:	20006fd4 	.word	0x20006fd4
 8001158:	20006fd8 	.word	0x20006fd8
 800115c:	20006fdc 	.word	0x20006fdc
 8001160:	20006fe0 	.word	0x20006fe0
 8001164:	20006fe4 	.word	0x20006fe4
 8001168:	20006fe8 	.word	0x20006fe8
 800116c:	20006fec 	.word	0x20006fec
 8001170:	20006ff0 	.word	0x20006ff0
 8001174:	20006ff4 	.word	0x20006ff4
 8001178:	20006ff8 	.word	0x20006ff8
 800117c:	20006ffc 	.word	0x20006ffc
 8001180:	20007000 	.word	0x20007000
 8001184:	20007004 	.word	0x20007004
 8001188:	20007008 	.word	0x20007008
 800118c:	2000700c 	.word	0x2000700c
 8001190:	20007010 	.word	0x20007010
 8001194:	20007014 	.word	0x20007014
 8001198:	20007018 	.word	0x20007018
 800119c:	2000701c 	.word	0x2000701c
 80011a0:	20007020 	.word	0x20007020
 80011a4:	20007024 	.word	0x20007024
 80011a8:	20007028 	.word	0x20007028
 80011ac:	2000702c 	.word	0x2000702c
 80011b0:	20007030 	.word	0x20007030
 80011b4:	20007034 	.word	0x20007034
 80011b8:	20007038 	.word	0x20007038
 80011bc:	2000703c 	.word	0x2000703c
 80011c0:	20007040 	.word	0x20007040
 80011c4:	20007044 	.word	0x20007044
 80011c8:	20007048 	.word	0x20007048
 80011cc:	2000704c 	.word	0x2000704c
 80011d0:	20007050 	.word	0x20007050
 80011d4:	20007054 	.word	0x20007054
 80011d8:	20007058 	.word	0x20007058
 80011dc:	2000705c 	.word	0x2000705c
 80011e0:	20007060 	.word	0x20007060
 80011e4:	20007064 	.word	0x20007064
 80011e8:	20007068 	.word	0x20007068
 80011ec:	2000706c 	.word	0x2000706c
 80011f0:	20007070 	.word	0x20007070
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_1_0_IC_1_ADDR, REG_SERIAL_BYTE_1_0_IC_1_BYTE, R57_SERIAL_BYTE_1_0_IC_1_Default );
 80011f4:	88f8      	ldrh	r0, [r7, #6]
 80011f6:	4b41      	ldr	r3, [pc, #260]	; (80012fc <default_download_IC_1+0x510>)
 80011f8:	2202      	movs	r2, #2
 80011fa:	f24f 2104 	movw	r1, #61956	; 0xf204
 80011fe:	f002 f8b3 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_2_0_IC_1_ADDR, REG_SERIAL_BYTE_2_0_IC_1_BYTE, R58_SERIAL_BYTE_2_0_IC_1_Default );
 8001202:	88f8      	ldrh	r0, [r7, #6]
 8001204:	4b3e      	ldr	r3, [pc, #248]	; (8001300 <default_download_IC_1+0x514>)
 8001206:	2202      	movs	r2, #2
 8001208:	f24f 2108 	movw	r1, #61960	; 0xf208
 800120c:	f002 f8ac 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_3_0_IC_1_ADDR, REG_SERIAL_BYTE_3_0_IC_1_BYTE, R59_SERIAL_BYTE_3_0_IC_1_Default );
 8001210:	88f8      	ldrh	r0, [r7, #6]
 8001212:	4b3c      	ldr	r3, [pc, #240]	; (8001304 <default_download_IC_1+0x518>)
 8001214:	2202      	movs	r2, #2
 8001216:	f24f 210c 	movw	r1, #61964	; 0xf20c
 800121a:	f002 f8a5 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_4_0_IC_1_ADDR, REG_SERIAL_BYTE_4_0_IC_1_BYTE, R60_SERIAL_BYTE_4_0_IC_1_Default );
 800121e:	88f8      	ldrh	r0, [r7, #6]
 8001220:	4b39      	ldr	r3, [pc, #228]	; (8001308 <default_download_IC_1+0x51c>)
 8001222:	2202      	movs	r2, #2
 8001224:	f24f 2110 	movw	r1, #61968	; 0xf210
 8001228:	f002 f89e 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_5_0_IC_1_ADDR, REG_SERIAL_BYTE_5_0_IC_1_BYTE, R61_SERIAL_BYTE_5_0_IC_1_Default );
 800122c:	88f8      	ldrh	r0, [r7, #6]
 800122e:	4b37      	ldr	r3, [pc, #220]	; (800130c <default_download_IC_1+0x520>)
 8001230:	2202      	movs	r2, #2
 8001232:	f24f 2114 	movw	r1, #61972	; 0xf214
 8001236:	f002 f897 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_6_0_IC_1_ADDR, REG_SERIAL_BYTE_6_0_IC_1_BYTE, R62_SERIAL_BYTE_6_0_IC_1_Default );
 800123a:	88f8      	ldrh	r0, [r7, #6]
 800123c:	4b34      	ldr	r3, [pc, #208]	; (8001310 <default_download_IC_1+0x524>)
 800123e:	2202      	movs	r2, #2
 8001240:	f24f 2118 	movw	r1, #61976	; 0xf218
 8001244:	f002 f890 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_7_0_IC_1_ADDR, REG_SERIAL_BYTE_7_0_IC_1_BYTE, R63_SERIAL_BYTE_7_0_IC_1_Default );
 8001248:	88f8      	ldrh	r0, [r7, #6]
 800124a:	4b32      	ldr	r3, [pc, #200]	; (8001314 <default_download_IC_1+0x528>)
 800124c:	2202      	movs	r2, #2
 800124e:	f24f 211c 	movw	r1, #61980	; 0xf21c
 8001252:	f002 f889 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP7_MODE1_IC_1_ADDR, REG_MP7_MODE1_IC_1_BYTE, R64_MP7_MODE1_IC_1_Default );
 8001256:	88f8      	ldrh	r0, [r7, #6]
 8001258:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <default_download_IC_1+0x52c>)
 800125a:	2202      	movs	r2, #2
 800125c:	f24f 51c7 	movw	r1, #62919	; 0xf5c7
 8001260:	f002 f882 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
 8001264:	88f8      	ldrh	r0, [r7, #6]
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <default_download_IC_1+0x530>)
 8001268:	f243 6278 	movw	r2, #13944	; 0x3678
 800126c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001270:	f002 f87a 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, PARAM_ADDR_IC_1, PARAM_SIZE_IC_1, Param_Data_IC_1 );
 8001274:	88f8      	ldrh	r0, [r7, #6]
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <default_download_IC_1+0x534>)
 8001278:	f642 4238 	movw	r2, #11320	; 0x2c38
 800127c:	2100      	movs	r1, #0
 800127e:	f002 f873 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, DM1_DATA_ADDR_IC_1, DM1_DATA_SIZE_IC_1, DM1_DATA_Data_IC_1 );
 8001282:	88f8      	ldrh	r0, [r7, #6]
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <default_download_IC_1+0x538>)
 8001286:	f44f 624f 	mov.w	r2, #3312	; 0xcf0
 800128a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800128e:	f002 f86b 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R68_KILL_CORE_IC_1_Default );
 8001292:	88f8      	ldrh	r0, [r7, #6]
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <default_download_IC_1+0x53c>)
 8001296:	2202      	movs	r2, #2
 8001298:	f24f 4103 	movw	r1, #62467	; 0xf403
 800129c:	f002 f864 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_START_ADDRESS_IC_1_ADDR, REG_START_ADDRESS_IC_1_BYTE, R69_START_ADDRESS_IC_1_Default );
 80012a0:	88f8      	ldrh	r0, [r7, #6]
 80012a2:	4b22      	ldr	r3, [pc, #136]	; (800132c <default_download_IC_1+0x540>)
 80012a4:	2202      	movs	r2, #2
 80012a6:	f24f 4104 	movw	r1, #62468	; 0xf404
 80012aa:	f002 f85d 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_START_PULSE_IC_1_ADDR, REG_START_PULSE_IC_1_BYTE, R70_START_PULSE_IC_1_Default );
 80012ae:	88f8      	ldrh	r0, [r7, #6]
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <default_download_IC_1+0x544>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	f24f 4101 	movw	r1, #62465	; 0xf401
 80012b8:	f002 f856 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_START_CORE_IC_1_ADDR, REG_START_CORE_IC_1_BYTE, R71_START_CORE_IC_1_Default );
 80012bc:	88f8      	ldrh	r0, [r7, #6]
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <default_download_IC_1+0x548>)
 80012c0:	2202      	movs	r2, #2
 80012c2:	f24f 4102 	movw	r1, #62466	; 0xf402
 80012c6:	f002 f84f 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_START_CORE_IC_1_ADDR, REG_START_CORE_IC_1_BYTE, R72_START_CORE_IC_1_Default );
 80012ca:	88f8      	ldrh	r0, [r7, #6]
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <default_download_IC_1+0x54c>)
 80012ce:	2202      	movs	r2, #2
 80012d0:	f24f 4102 	movw	r1, #62466	; 0xf402
 80012d4:	f002 f848 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( devAddress, R73_START_DELAY_IC_1_SIZE, R73_START_DELAY_IC_1_Default );
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	4a18      	ldr	r2, [pc, #96]	; (800133c <default_download_IC_1+0x550>)
 80012dc:	2102      	movs	r1, #2
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 f866 	bl	80033b0 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R74_HIBERNATE_IC_1_Default );
 80012e4:	88f8      	ldrh	r0, [r7, #6]
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <default_download_IC_1+0x554>)
 80012e8:	2202      	movs	r2, #2
 80012ea:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 80012ee:	f002 f83b 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20007074 	.word	0x20007074
 8001300:	20007078 	.word	0x20007078
 8001304:	2000707c 	.word	0x2000707c
 8001308:	20007080 	.word	0x20007080
 800130c:	20007084 	.word	0x20007084
 8001310:	20007088 	.word	0x20007088
 8001314:	2000708c 	.word	0x2000708c
 8001318:	20007090 	.word	0x20007090
 800131c:	20000cf0 	.word	0x20000cf0
 8001320:	20004368 	.word	0x20004368
 8001324:	20000000 	.word	0x20000000
 8001328:	20007128 	.word	0x20007128
 800132c:	2000712c 	.word	0x2000712c
 8001330:	20007094 	.word	0x20007094
 8001334:	20007130 	.word	0x20007130
 8001338:	20007098 	.word	0x20007098
 800133c:	2000709c 	.word	0x2000709c
 8001340:	20007134 	.word	0x20007134

08001344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 800134a:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	  uint16_t k = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
	  uint16_t pote_aux = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
	  uint32_t loud_data[30]; // Fixed loudness values
	  uint32_t boost_data[30]; // Fixed boost loudness values
	  uint32_t comp_data[30]; // Fixed compensation values

	  // Band Address Assign
	  BandAddress[0] = MOD_BAND32_SEL_DCINPALG145X4VALUE_ADDR;
 8001358:	f640 0382 	movw	r3, #2178	; 0x882
 800135c:	f8a7 31e4 	strh.w	r3, [r7, #484]	; 0x1e4
	  BandAddress[1] = MOD_BAND64_SEL_DCINPALG145X5VALUE_ADDR;
 8001360:	f640 0383 	movw	r3, #2179	; 0x883
 8001364:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
	  BandAddress[2] = MOD_BAND128_SEL_DCINPALG145X6VALUE_ADDR;
 8001368:	f640 037a 	movw	r3, #2170	; 0x87a
 800136c:	f8a7 31e8 	strh.w	r3, [r7, #488]	; 0x1e8
	  BandAddress[3] = MOD_BAND256_SEL_DCINPALG145X7VALUE_ADDR;
 8001370:	f640 037b 	movw	r3, #2171	; 0x87b
 8001374:	f8a7 31ea 	strh.w	r3, [r7, #490]	; 0x1ea
	  BandAddress[4] = MOD_BAND512_SEL_DCINPALG145X8VALUE_ADDR;
 8001378:	f640 0372 	movw	r3, #2162	; 0x872
 800137c:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
	  BandAddress[5] = MOD_BAND1K_SEL_DCINPALG145X9VALUE_ADDR;
 8001380:	f640 0373 	movw	r3, #2163	; 0x873
 8001384:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	  BandAddress[6] = MOD_BAND2K_SEL_DCINPALG145X10VALUE_ADDR;
 8001388:	f640 036a 	movw	r3, #2154	; 0x86a
 800138c:	f8a7 31f0 	strh.w	r3, [r7, #496]	; 0x1f0
	  BandAddress[7] = MOD_BAND4K_SEL_DCINPALG145X11VALUE_ADDR;
 8001390:	f640 036b 	movw	r3, #2155	; 0x86b
 8001394:	f8a7 31f2 	strh.w	r3, [r7, #498]	; 0x1f2
	  BandAddress[8] = MOD_BAND8K_SEL_DCINPALG145X12VALUE_ADDR;
 8001398:	f240 73af 	movw	r3, #1967	; 0x7af
 800139c:	f8a7 31f4 	strh.w	r3, [r7, #500]	; 0x1f4
	  BandAddress[9] = MOD_BAND16K_SEL_DCINPALG145X13VALUE_ADDR;
 80013a0:	f640 035c 	movw	r3, #2140	; 0x85c
 80013a4:	f8a7 31f6 	strh.w	r3, [r7, #502]	; 0x1f6
	  //BandAddress[VOL_SUB] = MOD_VOLHP_GAINALGNS145X4GAIN_ADDR; // Subwoofer Volume
	  BandAddress[VOL_ARRAY] = MOD_VOL_GAINALGNS145X1GAIN_ADDR; // General Volume
 80013a8:	f640 0362 	movw	r3, #2146	; 0x862
 80013ac:	f8a7 31fa 	strh.w	r3, [r7, #506]	; 0x1fa
	  BandAddress[LOUD_LOW_ARRAY] = MOD_LOUD_ALG0_LEVEL0_ADDR;
 80013b0:	f240 13d1 	movw	r3, #465	; 0x1d1
 80013b4:	f8a7 31fc 	strh.w	r3, [r7, #508]	; 0x1fc
	  BandAddress[LOUD_HIGH_ARRAY] = MOD_LOUD_ALG0_LEVEL1_ADDR;
 80013b8:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
 80013bc:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
	  BandAddress[LOUD_GRL_ARRAY] = MOD_LOUD_SEL_DCINPALG145X15VALUE_ADDR;
 80013c0:	f640 035e 	movw	r3, #2142	; 0x85e
 80013c4:	f8a7 3200 	strh.w	r3, [r7, #512]	; 0x200

	  // 8.24 FixPoint Volume
	  vol_data[29] = 0x01000000; // 0dB
 80013c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	  vol_data[28] = 0x00CB5918; // -2dB
 80013d0:	4bc2      	ldr	r3, [pc, #776]	; (80016dc <main+0x398>)
 80013d2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	  vol_data[27] = 0x00A1866C; // -4dB
 80013d6:	4bc2      	ldr	r3, [pc, #776]	; (80016e0 <main+0x39c>)
 80013d8:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	  vol_data[26] = 0x00804DCE; // -6dB
 80013dc:	4bc1      	ldr	r3, [pc, #772]	; (80016e4 <main+0x3a0>)
 80013de:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	  vol_data[25] = 0x0065EA5A; // -8dB
 80013e2:	4bc1      	ldr	r3, [pc, #772]	; (80016e8 <main+0x3a4>)
 80013e4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	  vol_data[24] = 0x0050F44E; // -10dB
 80013e8:	4bc0      	ldr	r3, [pc, #768]	; (80016ec <main+0x3a8>)
 80013ea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	  vol_data[23] = 0x00404DE6; // -12dB
 80013ee:	4bc0      	ldr	r3, [pc, #768]	; (80016f0 <main+0x3ac>)
 80013f0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	  vol_data[22] = 0x00331427; // -14dB (-7.2dB)
 80013f4:	4bbf      	ldr	r3, [pc, #764]	; (80016f4 <main+0x3b0>)
 80013f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	  vol_data[21] = 0x002892C2; // -16dB
 80013fa:	4bbf      	ldr	r3, [pc, #764]	; (80016f8 <main+0x3b4>)
 80013fc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	  vol_data[20] = 0x00203A7E; // -18dB
 8001400:	4bbe      	ldr	r3, [pc, #760]	; (80016fc <main+0x3b8>)
 8001402:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	  vol_data[19] = 0x0019999A; // -20dB
 8001406:	4bbe      	ldr	r3, [pc, #760]	; (8001700 <main+0x3bc>)
 8001408:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	  vol_data[18] = 0x001455B6; // -22dB
 800140c:	4bbd      	ldr	r3, [pc, #756]	; (8001704 <main+0x3c0>)
 800140e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	  vol_data[17] = 0x0010270B; // -24dB
 8001412:	4bbd      	ldr	r3, [pc, #756]	; (8001708 <main+0x3c4>)
 8001414:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	  vol_data[16] = 0x000CD495; // -26dB
 8001418:	4bbc      	ldr	r3, [pc, #752]	; (800170c <main+0x3c8>)
 800141a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	  vol_data[15] = 0x000A3109; // -28dB
 800141e:	4bbc      	ldr	r3, [pc, #752]	; (8001710 <main+0x3cc>)
 8001420:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	  vol_data[14] = 0x0008186E; // -30dB
 8001424:	4bbb      	ldr	r3, [pc, #748]	; (8001714 <main+0x3d0>)
 8001426:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	  vol_data[13] = 0x00066E31; // -32dB
 800142a:	4bbb      	ldr	r3, [pc, #748]	; (8001718 <main+0x3d4>)
 800142c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	  vol_data[12] = 0x00051B9D; // -34dB
 8001430:	4bba      	ldr	r3, [pc, #744]	; (800171c <main+0x3d8>)
 8001432:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	  vol_data[11] = 0x00040EAD; // -36dB
 8001436:	4bba      	ldr	r3, [pc, #744]	; (8001720 <main+0x3dc>)
 8001438:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	  vol_data[10] = 0x0003390D; // -38dB
 800143c:	4bb9      	ldr	r3, [pc, #740]	; (8001724 <main+0x3e0>)
 800143e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	  vol_data[9] = 0x00028F5C; // -40dB
 8001442:	4bb9      	ldr	r3, [pc, #740]	; (8001728 <main+0x3e4>)
 8001444:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	  vol_data[8] = 0x00020892; // -42dB
 8001448:	4bb8      	ldr	r3, [pc, #736]	; (800172c <main+0x3e8>)
 800144a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	  vol_data[7] = 0x00019D81; // -44dB
 800144e:	4bb8      	ldr	r3, [pc, #736]	; (8001730 <main+0x3ec>)
 8001450:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  vol_data[6] = 0x00014875; // -46dB
 8001454:	4bb7      	ldr	r3, [pc, #732]	; (8001734 <main+0x3f0>)
 8001456:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	  vol_data[5] = 0x000104E7; // -48dB
 800145a:	4bb7      	ldr	r3, [pc, #732]	; (8001738 <main+0x3f4>)
 800145c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	  vol_data[4] = 0x0000CF3E; // -50dB
 8001460:	f64c 733e 	movw	r3, #53054	; 0xcf3e
 8001464:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	  vol_data[3] = 0x0000A49E; // -52dB
 8001468:	f24a 439e 	movw	r3, #42142	; 0xa49e
 800146c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	  vol_data[2] = 0x000082C3; // -54dB
 8001470:	f248 23c3 	movw	r3, #33475	; 0x82c3
 8001474:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	  vol_data[1] = 0x000067DE; // -56dB
 8001478:	f246 73de 	movw	r3, #26590	; 0x67de
 800147c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	  vol_data[0] = 0x00005281; // -58dB
 8001480:	f245 2381 	movw	r3, #21121	; 0x5281
 8001484:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

	  // 8.24 FixPoint Loudness
	  loud_data[29] = 0x01000000; // 0dB
 8001488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800148c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001490:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001494:	675a      	str	r2, [r3, #116]	; 0x74
	  loud_data[28] = 0x00F1ADF9; // -0.5dB
 8001496:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800149a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800149e:	4aa7      	ldr	r2, [pc, #668]	; (800173c <main+0x3f8>)
 80014a0:	671a      	str	r2, [r3, #112]	; 0x70
	  loud_data[27] = 0x00E42905; // -1dB
 80014a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014aa:	4aa5      	ldr	r2, [pc, #660]	; (8001740 <main+0x3fc>)
 80014ac:	66da      	str	r2, [r3, #108]	; 0x6c
	  loud_data[26] = 0x00D765AC; // -1.5dB
 80014ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014b6:	4aa3      	ldr	r2, [pc, #652]	; (8001744 <main+0x400>)
 80014b8:	669a      	str	r2, [r3, #104]	; 0x68
	  loud_data[25] = 0x00CB5918; // -2dB
 80014ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014c2:	4a86      	ldr	r2, [pc, #536]	; (80016dc <main+0x398>)
 80014c4:	665a      	str	r2, [r3, #100]	; 0x64
	  loud_data[24] = 0x00BFF911; // -2.5dB
 80014c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014ce:	4a9e      	ldr	r2, [pc, #632]	; (8001748 <main+0x404>)
 80014d0:	661a      	str	r2, [r3, #96]	; 0x60
	  loud_data[23] = 0x00B53BEF; // -3dB
 80014d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014da:	4a9c      	ldr	r2, [pc, #624]	; (800174c <main+0x408>)
 80014dc:	65da      	str	r2, [r3, #92]	; 0x5c
	  loud_data[22] = 0x00AB1896; // -3.5dB
 80014de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014e6:	4a9a      	ldr	r2, [pc, #616]	; (8001750 <main+0x40c>)
 80014e8:	659a      	str	r2, [r3, #88]	; 0x58
	  loud_data[21] = 0x00A1866C; // -4dB
 80014ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014f2:	4a7b      	ldr	r2, [pc, #492]	; (80016e0 <main+0x39c>)
 80014f4:	655a      	str	r2, [r3, #84]	; 0x54
	  loud_data[20] = 0x00987D50; // -4.5dB
 80014f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014fe:	4a95      	ldr	r2, [pc, #596]	; (8001754 <main+0x410>)
 8001500:	651a      	str	r2, [r3, #80]	; 0x50
	  loud_data[19] = 0x008FF59A; // -5dB
 8001502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001506:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800150a:	4a93      	ldr	r2, [pc, #588]	; (8001758 <main+0x414>)
 800150c:	64da      	str	r2, [r3, #76]	; 0x4c
	  loud_data[18] = 0x0087E80B; // -5.5dB
 800150e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001512:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001516:	4a91      	ldr	r2, [pc, #580]	; (800175c <main+0x418>)
 8001518:	649a      	str	r2, [r3, #72]	; 0x48
	  loud_data[17] = 0x00804DCE; // -6dB
 800151a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800151e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001522:	4a70      	ldr	r2, [pc, #448]	; (80016e4 <main+0x3a0>)
 8001524:	645a      	str	r2, [r3, #68]	; 0x44
	  loud_data[16] = 0x00792071; // -6.5dB
 8001526:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800152a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800152e:	4a8c      	ldr	r2, [pc, #560]	; (8001760 <main+0x41c>)
 8001530:	641a      	str	r2, [r3, #64]	; 0x40
	  loud_data[15] = 0x007259DB; // -7dB
 8001532:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001536:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800153a:	4a8a      	ldr	r2, [pc, #552]	; (8001764 <main+0x420>)
 800153c:	63da      	str	r2, [r3, #60]	; 0x3c
	  loud_data[14] = 0x006BF44D; // -7.5dB
 800153e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001542:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001546:	4a88      	ldr	r2, [pc, #544]	; (8001768 <main+0x424>)
 8001548:	639a      	str	r2, [r3, #56]	; 0x38
	  loud_data[13] = 0x0065EA5A; // -8dB
 800154a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800154e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001552:	4a65      	ldr	r2, [pc, #404]	; (80016e8 <main+0x3a4>)
 8001554:	635a      	str	r2, [r3, #52]	; 0x34
	  loud_data[12] = 0x006036E1; // -8.5dB
 8001556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800155a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800155e:	4a83      	ldr	r2, [pc, #524]	; (800176c <main+0x428>)
 8001560:	631a      	str	r2, [r3, #48]	; 0x30
	  loud_data[11] = 0x005AD50D; // -9dB
 8001562:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001566:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800156a:	4a81      	ldr	r2, [pc, #516]	; (8001770 <main+0x42c>)
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c
	  loud_data[10] = 0x0055C04C; // -9.5dB
 800156e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001572:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001576:	4a7f      	ldr	r2, [pc, #508]	; (8001774 <main+0x430>)
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
	  loud_data[9] = 0x0050F44E; // -10dB
 800157a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800157e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001582:	4a5a      	ldr	r2, [pc, #360]	; (80016ec <main+0x3a8>)
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
	  loud_data[8] = 0x004C6D01; // -10.5dB
 8001586:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800158a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800158e:	4a7a      	ldr	r2, [pc, #488]	; (8001778 <main+0x434>)
 8001590:	621a      	str	r2, [r3, #32]
	  loud_data[7] = 0x0048268E; // -11dB
 8001592:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001596:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800159a:	4a78      	ldr	r2, [pc, #480]	; (800177c <main+0x438>)
 800159c:	61da      	str	r2, [r3, #28]
	  loud_data[6] = 0x00441D54; // -11.5dB
 800159e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015a6:	4a76      	ldr	r2, [pc, #472]	; (8001780 <main+0x43c>)
 80015a8:	619a      	str	r2, [r3, #24]
	  loud_data[5] = 0x00404DE6; // -12dB
 80015aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015b2:	4a4f      	ldr	r2, [pc, #316]	; (80016f0 <main+0x3ac>)
 80015b4:	615a      	str	r2, [r3, #20]
	  loud_data[4] = 0x003CB509; // -12.5dB
 80015b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015be:	4a71      	ldr	r2, [pc, #452]	; (8001784 <main+0x440>)
 80015c0:	611a      	str	r2, [r3, #16]
	  loud_data[3] = 0x00394FAF; // -13dB
 80015c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015ca:	4a6f      	ldr	r2, [pc, #444]	; (8001788 <main+0x444>)
 80015cc:	60da      	str	r2, [r3, #12]
	  loud_data[2] = 0x00361AF6; // -13.5dB
 80015ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015d6:	4a6d      	ldr	r2, [pc, #436]	; (800178c <main+0x448>)
 80015d8:	609a      	str	r2, [r3, #8]
	  loud_data[1] = 0x00331427; // -14dB
 80015da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015e2:	4a44      	ldr	r2, [pc, #272]	; (80016f4 <main+0x3b0>)
 80015e4:	605a      	str	r2, [r3, #4]
	  loud_data[0] = 0x003038AF; // -14.5dB
 80015e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015ee:	4a68      	ldr	r2, [pc, #416]	; (8001790 <main+0x44c>)
 80015f0:	601a      	str	r2, [r3, #0]

	  // 8.24 Compensation FixPoint
	  comp_data[29] = 0x01000000; // 0dB
 80015f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015fe:	675a      	str	r2, [r3, #116]	; 0x74
	  comp_data[28] = 0x010F2B41; // +0.5dB
 8001600:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001604:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001608:	4a62      	ldr	r2, [pc, #392]	; (8001794 <main+0x450>)
 800160a:	671a      	str	r2, [r3, #112]	; 0x70
	  comp_data[27] = 0x011F3C9A; // +1dB
 800160c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001610:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001614:	4a60      	ldr	r2, [pc, #384]	; (8001798 <main+0x454>)
 8001616:	66da      	str	r2, [r3, #108]	; 0x6c
	  comp_data[26] = 0x013041AF; // +1.5dB
 8001618:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800161c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001620:	4a5e      	ldr	r2, [pc, #376]	; (800179c <main+0x458>)
 8001622:	669a      	str	r2, [r3, #104]	; 0x68
	  comp_data[25] = 0x014248F0; // +2dB
 8001624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001628:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800162c:	4a5c      	ldr	r2, [pc, #368]	; (80017a0 <main+0x45c>)
 800162e:	665a      	str	r2, [r3, #100]	; 0x64
	  comp_data[24] = 0x015561A9; // +2.5dB
 8001630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001634:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001638:	4a5a      	ldr	r2, [pc, #360]	; (80017a4 <main+0x460>)
 800163a:	661a      	str	r2, [r3, #96]	; 0x60
	  comp_data[23] = 0x01699C0F; // +3dB
 800163c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001640:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001644:	4a58      	ldr	r2, [pc, #352]	; (80017a8 <main+0x464>)
 8001646:	65da      	str	r2, [r3, #92]	; 0x5c
	  comp_data[22] = 0x017F094D; // +3.5dB
 8001648:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800164c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001650:	4a56      	ldr	r2, [pc, #344]	; (80017ac <main+0x468>)
 8001652:	659a      	str	r2, [r3, #88]	; 0x58
	  comp_data[21] = 0x0195BB8F; // +4dB
 8001654:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001658:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800165c:	4a54      	ldr	r2, [pc, #336]	; (80017b0 <main+0x46c>)
 800165e:	655a      	str	r2, [r3, #84]	; 0x54
	  comp_data[20] = 0x01ADC61A; // +4.5dB
 8001660:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001664:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001668:	4a52      	ldr	r2, [pc, #328]	; (80017b4 <main+0x470>)
 800166a:	651a      	str	r2, [r3, #80]	; 0x50
	  comp_data[19] = 0x01C73D52; // +5dB
 800166c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001670:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001674:	4a50      	ldr	r2, [pc, #320]	; (80017b8 <main+0x474>)
 8001676:	64da      	str	r2, [r3, #76]	; 0x4c
	  comp_data[18] = 0x01E236D4; // +5.5dB
 8001678:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800167c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001680:	4a4e      	ldr	r2, [pc, #312]	; (80017bc <main+0x478>)
 8001682:	649a      	str	r2, [r3, #72]	; 0x48
	  comp_data[17] = 0x01FEC983; // +6dB
 8001684:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001688:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800168c:	4a4c      	ldr	r2, [pc, #304]	; (80017c0 <main+0x47c>)
 800168e:	645a      	str	r2, [r3, #68]	; 0x44
	  comp_data[16] = 0x021D0D9E; // +6.5dB
 8001690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001694:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001698:	4a4a      	ldr	r2, [pc, #296]	; (80017c4 <main+0x480>)
 800169a:	641a      	str	r2, [r3, #64]	; 0x40
	  comp_data[15] = 0x023D1CD4; // +7dB
 800169c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016a4:	4a48      	ldr	r2, [pc, #288]	; (80017c8 <main+0x484>)
 80016a6:	63da      	str	r2, [r3, #60]	; 0x3c
	  comp_data[14] = 0x025F1259; // +7.5dB
 80016a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016b0:	4a46      	ldr	r2, [pc, #280]	; (80017cc <main+0x488>)
 80016b2:	639a      	str	r2, [r3, #56]	; 0x38
	  comp_data[13] = 0x02830AFD; // +8dB
 80016b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016bc:	4a44      	ldr	r2, [pc, #272]	; (80017d0 <main+0x48c>)
 80016be:	635a      	str	r2, [r3, #52]	; 0x34
	  comp_data[12] = 0x02A92547; // +8.5dB
 80016c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016c8:	4a42      	ldr	r2, [pc, #264]	; (80017d4 <main+0x490>)
 80016ca:	631a      	str	r2, [r3, #48]	; 0x30
	  comp_data[11] = 0x02D1818B; // +9dB
 80016cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016d4:	4a40      	ldr	r2, [pc, #256]	; (80017d8 <main+0x494>)
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80016d8:	e080      	b.n	80017dc <main+0x498>
 80016da:	bf00      	nop
 80016dc:	00cb5918 	.word	0x00cb5918
 80016e0:	00a1866c 	.word	0x00a1866c
 80016e4:	00804dce 	.word	0x00804dce
 80016e8:	0065ea5a 	.word	0x0065ea5a
 80016ec:	0050f44e 	.word	0x0050f44e
 80016f0:	00404de6 	.word	0x00404de6
 80016f4:	00331427 	.word	0x00331427
 80016f8:	002892c2 	.word	0x002892c2
 80016fc:	00203a7e 	.word	0x00203a7e
 8001700:	0019999a 	.word	0x0019999a
 8001704:	001455b6 	.word	0x001455b6
 8001708:	0010270b 	.word	0x0010270b
 800170c:	000cd495 	.word	0x000cd495
 8001710:	000a3109 	.word	0x000a3109
 8001714:	0008186e 	.word	0x0008186e
 8001718:	00066e31 	.word	0x00066e31
 800171c:	00051b9d 	.word	0x00051b9d
 8001720:	00040ead 	.word	0x00040ead
 8001724:	0003390d 	.word	0x0003390d
 8001728:	00028f5c 	.word	0x00028f5c
 800172c:	00020892 	.word	0x00020892
 8001730:	00019d81 	.word	0x00019d81
 8001734:	00014875 	.word	0x00014875
 8001738:	000104e7 	.word	0x000104e7
 800173c:	00f1adf9 	.word	0x00f1adf9
 8001740:	00e42905 	.word	0x00e42905
 8001744:	00d765ac 	.word	0x00d765ac
 8001748:	00bff911 	.word	0x00bff911
 800174c:	00b53bef 	.word	0x00b53bef
 8001750:	00ab1896 	.word	0x00ab1896
 8001754:	00987d50 	.word	0x00987d50
 8001758:	008ff59a 	.word	0x008ff59a
 800175c:	0087e80b 	.word	0x0087e80b
 8001760:	00792071 	.word	0x00792071
 8001764:	007259db 	.word	0x007259db
 8001768:	006bf44d 	.word	0x006bf44d
 800176c:	006036e1 	.word	0x006036e1
 8001770:	005ad50d 	.word	0x005ad50d
 8001774:	0055c04c 	.word	0x0055c04c
 8001778:	004c6d01 	.word	0x004c6d01
 800177c:	0048268e 	.word	0x0048268e
 8001780:	00441d54 	.word	0x00441d54
 8001784:	003cb509 	.word	0x003cb509
 8001788:	00394faf 	.word	0x00394faf
 800178c:	00361af6 	.word	0x00361af6
 8001790:	003038af 	.word	0x003038af
 8001794:	010f2b41 	.word	0x010f2b41
 8001798:	011f3c9a 	.word	0x011f3c9a
 800179c:	013041af 	.word	0x013041af
 80017a0:	014248f0 	.word	0x014248f0
 80017a4:	015561a9 	.word	0x015561a9
 80017a8:	01699c0f 	.word	0x01699c0f
 80017ac:	017f094d 	.word	0x017f094d
 80017b0:	0195bb8f 	.word	0x0195bb8f
 80017b4:	01adc61a 	.word	0x01adc61a
 80017b8:	01c73d52 	.word	0x01c73d52
 80017bc:	01e236d4 	.word	0x01e236d4
 80017c0:	01fec983 	.word	0x01fec983
 80017c4:	021d0d9e 	.word	0x021d0d9e
 80017c8:	023d1cd4 	.word	0x023d1cd4
 80017cc:	025f1259 	.word	0x025f1259
 80017d0:	02830afd 	.word	0x02830afd
 80017d4:	02a92547 	.word	0x02a92547
 80017d8:	02d1818b 	.word	0x02d1818b
	  comp_data[10] = 0x02FC4209; // +9.5dB
 80017dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017e4:	4a7c      	ldr	r2, [pc, #496]	; (80019d8 <main+0x694>)
 80017e6:	629a      	str	r2, [r3, #40]	; 0x28
	  comp_data[9] = 0x03298B07; // +10dB
 80017e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017f0:	4a7a      	ldr	r2, [pc, #488]	; (80019dc <main+0x698>)
 80017f2:	625a      	str	r2, [r3, #36]	; 0x24
	  comp_data[8] = 0x035982F3; // +10.5dB
 80017f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017fc:	4a78      	ldr	r2, [pc, #480]	; (80019e0 <main+0x69c>)
 80017fe:	621a      	str	r2, [r3, #32]
	  comp_data[7] = 0x038C5281; // +11dB
 8001800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001804:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001808:	4a76      	ldr	r2, [pc, #472]	; (80019e4 <main+0x6a0>)
 800180a:	61da      	str	r2, [r3, #28]
	  comp_data[6] = 0x03C224CD; // +11.5dB
 800180c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001810:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001814:	4a74      	ldr	r2, [pc, #464]	; (80019e8 <main+0x6a4>)
 8001816:	619a      	str	r2, [r3, #24]
	  comp_data[5] = 0x03FB2784; // +12dB
 8001818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001820:	4a72      	ldr	r2, [pc, #456]	; (80019ec <main+0x6a8>)
 8001822:	615a      	str	r2, [r3, #20]
	  comp_data[4] = 0x04378B05; // +12.5dB
 8001824:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001828:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800182c:	4a70      	ldr	r2, [pc, #448]	; (80019f0 <main+0x6ac>)
 800182e:	611a      	str	r2, [r3, #16]
	  comp_data[3] = 0x0477828F; // +13dB
 8001830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001834:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001838:	4a6e      	ldr	r2, [pc, #440]	; (80019f4 <main+0x6b0>)
 800183a:	60da      	str	r2, [r3, #12]
	  comp_data[2] = 0x04BB4469; // +13.5dB
 800183c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001840:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001844:	4a6c      	ldr	r2, [pc, #432]	; (80019f8 <main+0x6b4>)
 8001846:	609a      	str	r2, [r3, #8]
	  comp_data[1] = 0x05030A11; // +14dB
 8001848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001850:	4a6a      	ldr	r2, [pc, #424]	; (80019fc <main+0x6b8>)
 8001852:	605a      	str	r2, [r3, #4]
	  comp_data[0] = 0x054F106E; // +14.5dB
 8001854:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001858:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800185c:	4a68      	ldr	r2, [pc, #416]	; (8001a00 <main+0x6bc>)
 800185e:	601a      	str	r2, [r3, #0]

	  // 8.24 FixPoint Bass and Treble Loudness
	  boost_data[29] = 0x02800000; // 2.50
 8001860:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001864:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001868:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
 800186c:	675a      	str	r2, [r3, #116]	; 0x74
	  boost_data[28] = 0x02666666; // 2.40
 800186e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001872:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001876:	4a63      	ldr	r2, [pc, #396]	; (8001a04 <main+0x6c0>)
 8001878:	671a      	str	r2, [r3, #112]	; 0x70
	  boost_data[27] = 0x02570a3c; // 2.34
 800187a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001882:	4a61      	ldr	r2, [pc, #388]	; (8001a08 <main+0x6c4>)
 8001884:	66da      	str	r2, [r3, #108]	; 0x6c
	  boost_data[26] = 0x02451eb8; // 2.27
 8001886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800188e:	4a5f      	ldr	r2, [pc, #380]	; (8001a0c <main+0x6c8>)
 8001890:	669a      	str	r2, [r3, #104]	; 0x68
	  boost_data[25] = 0x02333332; // 2.20
 8001892:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001896:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800189a:	4a5d      	ldr	r2, [pc, #372]	; (8001a10 <main+0x6cc>)
 800189c:	665a      	str	r2, [r3, #100]	; 0x64
	  boost_data[24] = 0x022147ae; // 2.13
 800189e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018a6:	4a5b      	ldr	r2, [pc, #364]	; (8001a14 <main+0x6d0>)
 80018a8:	661a      	str	r2, [r3, #96]	; 0x60
	  boost_data[23] = 0x020f5c28; // 2.06
 80018aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018b2:	4a59      	ldr	r2, [pc, #356]	; (8001a18 <main+0x6d4>)
 80018b4:	65da      	str	r2, [r3, #92]	; 0x5c
	  boost_data[22] = 0x02000000; // 2.00
 80018b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018c2:	659a      	str	r2, [r3, #88]	; 0x58
	  boost_data[21] = 0x01ee147a; // 1.93
 80018c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018cc:	4a53      	ldr	r2, [pc, #332]	; (8001a1c <main+0x6d8>)
 80018ce:	655a      	str	r2, [r3, #84]	; 0x54
	  boost_data[20] = 0x01dc28f4; // 1.86
 80018d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018d8:	4a51      	ldr	r2, [pc, #324]	; (8001a20 <main+0x6dc>)
 80018da:	651a      	str	r2, [r3, #80]	; 0x50
	  boost_data[19] = 0x01ca3d70; // 1.79
 80018dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018e4:	4a4f      	ldr	r2, [pc, #316]	; (8001a24 <main+0x6e0>)
 80018e6:	64da      	str	r2, [r3, #76]	; 0x4c
	  boost_data[18] = 0x01b851ea; // 1.72
 80018e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ec:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018f0:	4a4d      	ldr	r2, [pc, #308]	; (8001a28 <main+0x6e4>)
 80018f2:	649a      	str	r2, [r3, #72]	; 0x48
	  boost_data[17] = 0x01a8f5c2; // 1.66
 80018f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018fc:	4a4b      	ldr	r2, [pc, #300]	; (8001a2c <main+0x6e8>)
 80018fe:	645a      	str	r2, [r3, #68]	; 0x44
	  boost_data[16] = 0x01970a3c; // 1.59
 8001900:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001904:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001908:	4a49      	ldr	r2, [pc, #292]	; (8001a30 <main+0x6ec>)
 800190a:	641a      	str	r2, [r3, #64]	; 0x40
	  boost_data[15] = 0x01851eb8; // 1.52
 800190c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001910:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001914:	4a47      	ldr	r2, [pc, #284]	; (8001a34 <main+0x6f0>)
 8001916:	63da      	str	r2, [r3, #60]	; 0x3c
	  boost_data[14] = 0x01733332; // 1.45
 8001918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001920:	4a45      	ldr	r2, [pc, #276]	; (8001a38 <main+0x6f4>)
 8001922:	639a      	str	r2, [r3, #56]	; 0x38
	  boost_data[13] = 0x016147ae; // 1.38
 8001924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001928:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800192c:	4a43      	ldr	r2, [pc, #268]	; (8001a3c <main+0x6f8>)
 800192e:	635a      	str	r2, [r3, #52]	; 0x34
	  boost_data[12] = 0x0151eb84; // 1.32
 8001930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001934:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001938:	4a41      	ldr	r2, [pc, #260]	; (8001a40 <main+0x6fc>)
 800193a:	631a      	str	r2, [r3, #48]	; 0x30
	  boost_data[11] = 0x01400000; // 1.25
 800193c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001940:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001944:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c
	  boost_data[10] = 0x012e147a; // 1.18
 800194a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800194e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001952:	4a3c      	ldr	r2, [pc, #240]	; (8001a44 <main+0x700>)
 8001954:	629a      	str	r2, [r3, #40]	; 0x28
	  boost_data[9] =  0x011c28f4; // 1.11
 8001956:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800195e:	4a3a      	ldr	r2, [pc, #232]	; (8001a48 <main+0x704>)
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
	  boost_data[8] =  0x010a3d70; // 1.04
 8001962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001966:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800196a:	4a38      	ldr	r2, [pc, #224]	; (8001a4c <main+0x708>)
 800196c:	621a      	str	r2, [r3, #32]
	  boost_data[7] =  0x00fae146; // 0.98
 800196e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001972:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001976:	4a36      	ldr	r2, [pc, #216]	; (8001a50 <main+0x70c>)
 8001978:	61da      	str	r2, [r3, #28]
	  boost_data[6] =  0x00e8f5c2; // 0.91
 800197a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001982:	4a34      	ldr	r2, [pc, #208]	; (8001a54 <main+0x710>)
 8001984:	619a      	str	r2, [r3, #24]
	  boost_data[5] =  0x00d70a3c; // 0.84
 8001986:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800198e:	4a32      	ldr	r2, [pc, #200]	; (8001a58 <main+0x714>)
 8001990:	615a      	str	r2, [r3, #20]
	  boost_data[4] =  0x00c51eb8; // 0.77
 8001992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001996:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800199a:	4a30      	ldr	r2, [pc, #192]	; (8001a5c <main+0x718>)
 800199c:	611a      	str	r2, [r3, #16]
	  boost_data[3] =  0x00b33332; // 0.70
 800199e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019a6:	4a2e      	ldr	r2, [pc, #184]	; (8001a60 <main+0x71c>)
 80019a8:	60da      	str	r2, [r3, #12]
	  boost_data[2] =  0x00a3d70a; // 0.64
 80019aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019b2:	4a2c      	ldr	r2, [pc, #176]	; (8001a64 <main+0x720>)
 80019b4:	609a      	str	r2, [r3, #8]
	  boost_data[1] =  0x0091eb84; // 0.57
 80019b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019be:	4a2a      	ldr	r2, [pc, #168]	; (8001a68 <main+0x724>)
 80019c0:	605a      	str	r2, [r3, #4]
	  boost_data[0] =  0x00800000; // 0.50
 80019c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80019ce:	601a      	str	r2, [r3, #0]

	  for(k=0; k<30; k++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 80019d6:	e098      	b.n	8001b0a <main+0x7c6>
 80019d8:	02fc4209 	.word	0x02fc4209
 80019dc:	03298b07 	.word	0x03298b07
 80019e0:	035982f3 	.word	0x035982f3
 80019e4:	038c5281 	.word	0x038c5281
 80019e8:	03c224cd 	.word	0x03c224cd
 80019ec:	03fb2784 	.word	0x03fb2784
 80019f0:	04378b05 	.word	0x04378b05
 80019f4:	0477828f 	.word	0x0477828f
 80019f8:	04bb4469 	.word	0x04bb4469
 80019fc:	05030a11 	.word	0x05030a11
 8001a00:	054f106e 	.word	0x054f106e
 8001a04:	02666666 	.word	0x02666666
 8001a08:	02570a3c 	.word	0x02570a3c
 8001a0c:	02451eb8 	.word	0x02451eb8
 8001a10:	02333332 	.word	0x02333332
 8001a14:	022147ae 	.word	0x022147ae
 8001a18:	020f5c28 	.word	0x020f5c28
 8001a1c:	01ee147a 	.word	0x01ee147a
 8001a20:	01dc28f4 	.word	0x01dc28f4
 8001a24:	01ca3d70 	.word	0x01ca3d70
 8001a28:	01b851ea 	.word	0x01b851ea
 8001a2c:	01a8f5c2 	.word	0x01a8f5c2
 8001a30:	01970a3c 	.word	0x01970a3c
 8001a34:	01851eb8 	.word	0x01851eb8
 8001a38:	01733332 	.word	0x01733332
 8001a3c:	016147ae 	.word	0x016147ae
 8001a40:	0151eb84 	.word	0x0151eb84
 8001a44:	012e147a 	.word	0x012e147a
 8001a48:	011c28f4 	.word	0x011c28f4
 8001a4c:	010a3d70 	.word	0x010a3d70
 8001a50:	00fae146 	.word	0x00fae146
 8001a54:	00e8f5c2 	.word	0x00e8f5c2
 8001a58:	00d70a3c 	.word	0x00d70a3c
 8001a5c:	00c51eb8 	.word	0x00c51eb8
 8001a60:	00b33332 	.word	0x00b33332
 8001a64:	00a3d70a 	.word	0x00a3d70a
 8001a68:	0091eb84 	.word	0x0091eb84
	  {
		  log_in_table[k] = 4096.0*log10(1.0+(3.0*k/10.0));
 8001a6c:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd03 	bl	800047c <__aeabi_i2d>
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	4bba      	ldr	r3, [pc, #744]	; (8001d64 <main+0xa20>)
 8001a7c:	f7fe fd68 	bl	8000550 <__aeabi_dmul>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	4bb6      	ldr	r3, [pc, #728]	; (8001d68 <main+0xa24>)
 8001a8e:	f7fe fe89 	bl	80007a4 <__aeabi_ddiv>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	4bb3      	ldr	r3, [pc, #716]	; (8001d6c <main+0xa28>)
 8001aa0:	f7fe fba0 	bl	80001e4 <__adddf3>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	ec43 2b17 	vmov	d7, r2, r3
 8001aac:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab0:	eef0 0a67 	vmov.f32	s1, s15
 8001ab4:	f005 fa6c 	bl	8006f90 <log10>
 8001ab8:	ec51 0b10 	vmov	r0, r1, d0
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	4bab      	ldr	r3, [pc, #684]	; (8001d70 <main+0xa2c>)
 8001ac2:	f7fe fd45 	bl	8000550 <__aeabi_dmul>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	f8b7 4206 	ldrh.w	r4, [r7, #518]	; 0x206
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f7fe ffed 	bl	8000ab0 <__aeabi_d2uiz>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	4ba6      	ldr	r3, [pc, #664]	; (8001d74 <main+0xa30>)
 8001adc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		  linear_in_table[k] = 4096*k/30;
 8001ae0:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001ae4:	031b      	lsls	r3, r3, #12
 8001ae6:	4aa4      	ldr	r2, [pc, #656]	; (8001d78 <main+0xa34>)
 8001ae8:	fb82 1203 	smull	r1, r2, r2, r3
 8001aec:	441a      	add	r2, r3
 8001aee:	1112      	asrs	r2, r2, #4
 8001af0:	17db      	asrs	r3, r3, #31
 8001af2:	1ad2      	subs	r2, r2, r3
 8001af4:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001af8:	b291      	uxth	r1, r2
 8001afa:	4aa0      	ldr	r2, [pc, #640]	; (8001d7c <main+0xa38>)
 8001afc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(k=0; k<30; k++)
 8001b00:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001b04:	3301      	adds	r3, #1
 8001b06:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001b0a:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001b0e:	2b1d      	cmp	r3, #29
 8001b10:	d9ac      	bls.n	8001a6c <main+0x728>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b12:	f002 f86f 	bl	8003bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b16:	f001 f8e1 	bl	8002cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b1a:	f001 fba5 	bl	8003268 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b1e:	f001 fb83 	bl	8003228 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b22:	f001 f947 	bl	8002db4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001b26:	f001 fae5 	bl	80030f4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001b2a:	f001 fa59 	bl	8002fe0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001b2e:	f001 fa85 	bl	800303c <MX_I2C2_Init>
  MX_I2C3_Init();
 8001b32:	f001 fab1 	bl	8003098 <MX_I2C3_Init>
  MX_TIM4_Init();
 8001b36:	f001 fb2b 	bl	8003190 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Start timer for delay function
  HAL_TIM_Base_Start(&htim4);
 8001b3a:	4891      	ldr	r0, [pc, #580]	; (8001d80 <main+0xa3c>)
 8001b3c:	f004 ff4c 	bl	80069d8 <HAL_TIM_Base_Start>

  // Reset DSPs
  HAL_GPIO_WritePin(nRST_DSP0_GPIO_Port, nRST_DSP0_Pin, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2120      	movs	r1, #32
 8001b44:	488f      	ldr	r0, [pc, #572]	; (8001d84 <main+0xa40>)
 8001b46:	f003 fad9 	bl	80050fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nRST_DSP1_GPIO_Port, nRST_DSP1_Pin, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b50:	488c      	ldr	r0, [pc, #560]	; (8001d84 <main+0xa40>)
 8001b52:	f003 fad3 	bl	80050fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nRST_DSP2_GPIO_Port, nRST_DSP2_Pin, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b5c:	4889      	ldr	r0, [pc, #548]	; (8001d84 <main+0xa40>)
 8001b5e:	f003 facd 	bl	80050fc <HAL_GPIO_WritePin>

  HAL_Delay(100);
 8001b62:	2064      	movs	r0, #100	; 0x64
 8001b64:	f002 f8b8 	bl	8003cd8 <HAL_Delay>

  // Disable CLK
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_RESET);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b6e:	4886      	ldr	r0, [pc, #536]	; (8001d88 <main+0xa44>)
 8001b70:	f003 fac4 	bl	80050fc <HAL_GPIO_WritePin>

  // Configure DACs
  HAL_GPIO_WritePin(FMT_GPIO_Port, FMT_Pin, GPIO_PIN_RESET); // 16-to-24 bit I2S Format
 8001b74:	2200      	movs	r2, #0
 8001b76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b7a:	4883      	ldr	r0, [pc, #524]	; (8001d88 <main+0xa44>)
 8001b7c:	f003 fabe 	bl	80050fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DEMP1_GPIO_Port, DEMP1_Pin, GPIO_PIN_RESET); // De-Emphasis
 8001b80:	2200      	movs	r2, #0
 8001b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b86:	4880      	ldr	r0, [pc, #512]	; (8001d88 <main+0xa44>)
 8001b88:	f003 fab8 	bl	80050fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DEMP0_GPIO_Port, DEMP0_Pin, GPIO_PIN_SET);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b92:	487d      	ldr	r0, [pc, #500]	; (8001d88 <main+0xa44>)
 8001b94:	f003 fab2 	bl	80050fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUTE_GPIO_Port, MUTE_Pin, GPIO_PIN_RESET); // Mute OFF
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b9e:	487b      	ldr	r0, [pc, #492]	; (8001d8c <main+0xa48>)
 8001ba0:	f003 faac 	bl	80050fc <HAL_GPIO_WritePin>

  // Enable CLK
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001baa:	4877      	ldr	r0, [pc, #476]	; (8001d88 <main+0xa44>)
 8001bac:	f003 faa6 	bl	80050fc <HAL_GPIO_WritePin>

  // Mute DSPs
  HAL_GPIO_WritePin(GPIO_MCU0_GPIO_Port, GPIO_MCU0_Pin, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2110      	movs	r1, #16
 8001bb4:	4873      	ldr	r0, [pc, #460]	; (8001d84 <main+0xa40>)
 8001bb6:	f003 faa1 	bl	80050fc <HAL_GPIO_WritePin>

  // Enable DSPs
  HAL_GPIO_WritePin(nRST_DSP0_GPIO_Port, nRST_DSP0_Pin, GPIO_PIN_SET);
 8001bba:	2201      	movs	r2, #1
 8001bbc:	2120      	movs	r1, #32
 8001bbe:	4871      	ldr	r0, [pc, #452]	; (8001d84 <main+0xa40>)
 8001bc0:	f003 fa9c 	bl	80050fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nRST_DSP1_GPIO_Port, nRST_DSP1_Pin, GPIO_PIN_SET);
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bca:	486e      	ldr	r0, [pc, #440]	; (8001d84 <main+0xa40>)
 8001bcc:	f003 fa96 	bl	80050fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nRST_DSP2_GPIO_Port, nRST_DSP2_Pin, GPIO_PIN_SET);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bd6:	486b      	ldr	r0, [pc, #428]	; (8001d84 <main+0xa40>)
 8001bd8:	f003 fa90 	bl	80050fc <HAL_GPIO_WritePin>

  // DSPs Software Download
  default_download_IC_1(DSP0_ADDR);
 8001bdc:	2070      	movs	r0, #112	; 0x70
 8001bde:	f7ff f905 	bl	8000dec <default_download_IC_1>
  default_download_IC_1(DSP1_ADDR);
 8001be2:	2072      	movs	r0, #114	; 0x72
 8001be4:	f7ff f902 	bl	8000dec <default_download_IC_1>
  default_download_IC_1(DSP2_ADDR);
 8001be8:	2074      	movs	r0, #116	; 0x74
 8001bea:	f7ff f8ff 	bl	8000dec <default_download_IC_1>

  // Configure ADCs
  auxData[0] = 0xFE;
 8001bee:	4b68      	ldr	r3, [pc, #416]	; (8001d90 <main+0xa4c>)
 8001bf0:	22fe      	movs	r2, #254	; 0xfe
 8001bf2:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c2, ADC0_ADDR, 0x00, 1, auxData, 1, 1000);
 8001bf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf8:	9302      	str	r3, [sp, #8]
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	4b64      	ldr	r3, [pc, #400]	; (8001d90 <main+0xa4c>)
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2301      	movs	r3, #1
 8001c04:	2200      	movs	r2, #0
 8001c06:	2194      	movs	r1, #148	; 0x94
 8001c08:	4862      	ldr	r0, [pc, #392]	; (8001d94 <main+0xa50>)
 8001c0a:	f003 fbd5 	bl	80053b8 <HAL_I2C_Mem_Write>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b61      	ldr	r3, [pc, #388]	; (8001d98 <main+0xa54>)
 8001c14:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c2, ADC1_ADDR, 0x00, 1, auxData, 1, 1000);
 8001c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1a:	9302      	str	r3, [sp, #8]
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	4b5b      	ldr	r3, [pc, #364]	; (8001d90 <main+0xa4c>)
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2301      	movs	r3, #1
 8001c26:	2200      	movs	r2, #0
 8001c28:	2196      	movs	r1, #150	; 0x96
 8001c2a:	485a      	ldr	r0, [pc, #360]	; (8001d94 <main+0xa50>)
 8001c2c:	f003 fbc4 	bl	80053b8 <HAL_I2C_Mem_Write>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b58      	ldr	r3, [pc, #352]	; (8001d98 <main+0xa54>)
 8001c36:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c3, ADC2_ADDR, 0x00, 1, auxData, 1, 1000);
 8001c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3c:	9302      	str	r3, [sp, #8]
 8001c3e:	2301      	movs	r3, #1
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	4b53      	ldr	r3, [pc, #332]	; (8001d90 <main+0xa4c>)
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	2301      	movs	r3, #1
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2194      	movs	r1, #148	; 0x94
 8001c4c:	4853      	ldr	r0, [pc, #332]	; (8001d9c <main+0xa58>)
 8001c4e:	f003 fbb3 	bl	80053b8 <HAL_I2C_Mem_Write>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b50      	ldr	r3, [pc, #320]	; (8001d98 <main+0xa54>)
 8001c58:	701a      	strb	r2, [r3, #0]
  auxData[0] = 0x47;
 8001c5a:	4b4d      	ldr	r3, [pc, #308]	; (8001d90 <main+0xa4c>)
 8001c5c:	2247      	movs	r2, #71	; 0x47
 8001c5e:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c2, ADC0_ADDR, 0x20, 1, auxData, 1, 1000);
 8001c60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c64:	9302      	str	r3, [sp, #8]
 8001c66:	2301      	movs	r3, #1
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	4b49      	ldr	r3, [pc, #292]	; (8001d90 <main+0xa4c>)
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2301      	movs	r3, #1
 8001c70:	2220      	movs	r2, #32
 8001c72:	2194      	movs	r1, #148	; 0x94
 8001c74:	4847      	ldr	r0, [pc, #284]	; (8001d94 <main+0xa50>)
 8001c76:	f003 fb9f 	bl	80053b8 <HAL_I2C_Mem_Write>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b46      	ldr	r3, [pc, #280]	; (8001d98 <main+0xa54>)
 8001c80:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c2, ADC1_ADDR, 0x20, 1, auxData, 1, 1000);
 8001c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c86:	9302      	str	r3, [sp, #8]
 8001c88:	2301      	movs	r3, #1
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	4b40      	ldr	r3, [pc, #256]	; (8001d90 <main+0xa4c>)
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2301      	movs	r3, #1
 8001c92:	2220      	movs	r2, #32
 8001c94:	2196      	movs	r1, #150	; 0x96
 8001c96:	483f      	ldr	r0, [pc, #252]	; (8001d94 <main+0xa50>)
 8001c98:	f003 fb8e 	bl	80053b8 <HAL_I2C_Mem_Write>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <main+0xa54>)
 8001ca2:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c3, ADC2_ADDR, 0x20, 1, auxData, 1, 1000);
 8001ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca8:	9302      	str	r3, [sp, #8]
 8001caa:	2301      	movs	r3, #1
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	4b38      	ldr	r3, [pc, #224]	; (8001d90 <main+0xa4c>)
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	2194      	movs	r1, #148	; 0x94
 8001cb8:	4838      	ldr	r0, [pc, #224]	; (8001d9c <main+0xa58>)
 8001cba:	f003 fb7d 	bl	80053b8 <HAL_I2C_Mem_Write>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b35      	ldr	r3, [pc, #212]	; (8001d98 <main+0xa54>)
 8001cc4:	701a      	strb	r2, [r3, #0]

  // Un-mute DSPs
  HAL_GPIO_WritePin(GPIO_MCU0_GPIO_Port, GPIO_MCU0_Pin, GPIO_PIN_SET);
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	2110      	movs	r1, #16
 8001cca:	482e      	ldr	r0, [pc, #184]	; (8001d84 <main+0xa40>)
 8001ccc:	f003 fa16 	bl	80050fc <HAL_GPIO_WritePin>

  // Set flag ADC to update
  for(k=0; k<ADC_POT; k++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001cd6:	e00a      	b.n	8001cee <main+0x9aa>
  {
	  flag[k] = 1;
 8001cd8:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001cdc:	4a30      	ldr	r2, [pc, #192]	; (8001da0 <main+0xa5c>)
 8001cde:	2101      	movs	r1, #1
 8001ce0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(k=0; k<ADC_POT; k++)
 8001ce4:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001cee:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001cf2:	2b0e      	cmp	r3, #14
 8001cf4:	d9f0      	bls.n	8001cd8 <main+0x994>
  }

  // DMA Start
  HAL_TIM_Base_Start(&htim2);
 8001cf6:	482b      	ldr	r0, [pc, #172]	; (8001da4 <main+0xa60>)
 8001cf8:	f004 fe6e 	bl	80069d8 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, value, ADC_POT);
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	492a      	ldr	r1, [pc, #168]	; (8001da8 <main+0xa64>)
 8001d00:	482a      	ldr	r0, [pc, #168]	; (8001dac <main+0xa68>)
 8001d02:	f002 f851 	bl	8003da8 <HAL_ADC_Start_DMA>

  HAL_Delay(100);
 8001d06:	2064      	movs	r0, #100	; 0x64
 8001d08:	f001 ffe6 	bl	8003cd8 <HAL_Delay>

  // Data pre-load
  data_SafeLoad[2] = 0x00;
 8001d0c:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <main+0xa6c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	709a      	strb	r2, [r3, #2]
  data_SafeLoad[1] = 0x00;
 8001d12:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <main+0xa6c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	705a      	strb	r2, [r3, #1]
  data_SafeLoad[0] = 0x00;
 8001d18:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <main+0xa6c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]

  address_SafeLoad[1] = 0x00;
 8001d1e:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <main+0xa70>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	705a      	strb	r2, [r3, #1]
  address_SafeLoad[0] = 0x00;
 8001d24:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <main+0xa70>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]

  num_SafeLoad_Lower[3] = 0x01;
 8001d2a:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <main+0xa74>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	70da      	strb	r2, [r3, #3]
  num_SafeLoad_Lower[2] = 0x00;
 8001d30:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <main+0xa74>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	709a      	strb	r2, [r3, #2]
  num_SafeLoad_Lower[1] = 0x00;
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <main+0xa74>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	705a      	strb	r2, [r3, #1]
  num_SafeLoad_Lower[0] = 0x00;
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <main+0xa74>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]

  num_SafeLoad_Upper[3] = 0x00;
 8001d42:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <main+0xa78>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	70da      	strb	r2, [r3, #3]
  num_SafeLoad_Upper[2] = 0x00;
 8001d48:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <main+0xa78>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	709a      	strb	r2, [r3, #2]
  num_SafeLoad_Upper[1] = 0x00;
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <main+0xa78>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	705a      	strb	r2, [r3, #1]
  num_SafeLoad_Upper[0] = 0x00;
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <main+0xa78>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]

  for(k=0; k<10; k++) // Pre-load Filters 32Hz - 16KHz
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001d60:	e0db      	b.n	8001f1a <main+0xbd6>
 8001d62:	bf00      	nop
 8001d64:	40080000 	.word	0x40080000
 8001d68:	40240000 	.word	0x40240000
 8001d6c:	3ff00000 	.word	0x3ff00000
 8001d70:	40b00000 	.word	0x40b00000
 8001d74:	200073d0 	.word	0x200073d0
 8001d78:	88888889 	.word	0x88888889
 8001d7c:	2000740c 	.word	0x2000740c
 8001d80:	20007324 	.word	0x20007324
 8001d84:	40020400 	.word	0x40020400
 8001d88:	40020800 	.word	0x40020800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	20007370 	.word	0x20007370
 8001d94:	20007234 	.word	0x20007234
 8001d98:	2000736c 	.word	0x2000736c
 8001d9c:	20007288 	.word	0x20007288
 8001da0:	20007448 	.word	0x20007448
 8001da4:	200072dc 	.word	0x200072dc
 8001da8:	20007374 	.word	0x20007374
 8001dac:	20007138 	.word	0x20007138
 8001db0:	2000746c 	.word	0x2000746c
 8001db4:	20007470 	.word	0x20007470
 8001db8:	20007474 	.word	0x20007474
 8001dbc:	20007478 	.word	0x20007478
  {
	  while(tx_check < 3)
	  {
		  tx_check = 0;
 8001dc0:	4b58      	ldr	r3, [pc, #352]	; (8001f24 <main+0xbe0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
		  data_SafeLoad[3] = 29 - pote[k];
 8001dc6:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001dca:	4a57      	ldr	r2, [pc, #348]	; (8001f28 <main+0xbe4>)
 8001dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	f1c3 031d 	rsb	r3, r3, #29
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	4b54      	ldr	r3, [pc, #336]	; (8001f2c <main+0xbe8>)
 8001dda:	70da      	strb	r2, [r3, #3]
		  address_SafeLoad[3] = 0xFF & (BandAddress[k]);
 8001ddc:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001de6:	443b      	add	r3, r7
 8001de8:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4b50      	ldr	r3, [pc, #320]	; (8001f30 <main+0xbec>)
 8001df0:	70da      	strb	r2, [r3, #3]
		  address_SafeLoad[2] = 0xFF & ((BandAddress[k])>>8);
 8001df2:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001dfc:	443b      	add	r3, r7
 8001dfe:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	4b49      	ldr	r3, [pc, #292]	; (8001f30 <main+0xbec>)
 8001e0a:	709a      	strb	r2, [r3, #2]
		  Safeload_Write();
 8001e0c:	f001 fc2a 	bl	8003664 <Safeload_Write>
		  delay_us(100);
 8001e10:	2064      	movs	r0, #100	; 0x64
 8001e12:	f001 fc0d 	bl	8003630 <delay_us>
		  stat = HAL_I2C_Mem_Read(&hi2c1, DSP0_ADDR, BandAddress[k], 2, aux, 4, 1000);
 8001e16:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e20:	443b      	add	r3, r7
 8001e22:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2a:	9302      	str	r3, [sp, #8]
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	9301      	str	r3, [sp, #4]
 8001e30:	4b40      	ldr	r3, [pc, #256]	; (8001f34 <main+0xbf0>)
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	2302      	movs	r3, #2
 8001e36:	2170      	movs	r1, #112	; 0x70
 8001e38:	483f      	ldr	r0, [pc, #252]	; (8001f38 <main+0xbf4>)
 8001e3a:	f003 fbb7 	bl	80055ac <HAL_I2C_Mem_Read>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b3e      	ldr	r3, [pc, #248]	; (8001f3c <main+0xbf8>)
 8001e44:	701a      	strb	r2, [r3, #0]
		  stat = 0;
 8001e46:	4b3d      	ldr	r3, [pc, #244]	; (8001f3c <main+0xbf8>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
		  if(aux[3] == data_SafeLoad[3])
 8001e4c:	4b39      	ldr	r3, [pc, #228]	; (8001f34 <main+0xbf0>)
 8001e4e:	78da      	ldrb	r2, [r3, #3]
 8001e50:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <main+0xbe8>)
 8001e52:	78db      	ldrb	r3, [r3, #3]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d105      	bne.n	8001e64 <main+0xb20>
		  {
			  tx_check++;
 8001e58:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <main+0xbe0>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <main+0xbe0>)
 8001e62:	701a      	strb	r2, [r3, #0]
		  }
		  stat = HAL_I2C_Mem_Read(&hi2c1, DSP1_ADDR, BandAddress[k], 2, aux, 4, 1000);
 8001e64:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e6e:	443b      	add	r3, r7
 8001e70:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e78:	9302      	str	r3, [sp, #8]
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <main+0xbf0>)
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2302      	movs	r3, #2
 8001e84:	2172      	movs	r1, #114	; 0x72
 8001e86:	482c      	ldr	r0, [pc, #176]	; (8001f38 <main+0xbf4>)
 8001e88:	f003 fb90 	bl	80055ac <HAL_I2C_Mem_Read>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <main+0xbf8>)
 8001e92:	701a      	strb	r2, [r3, #0]
		  stat = 0;
 8001e94:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <main+0xbf8>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
		  if(aux[3] == data_SafeLoad[3])
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <main+0xbf0>)
 8001e9c:	78da      	ldrb	r2, [r3, #3]
 8001e9e:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <main+0xbe8>)
 8001ea0:	78db      	ldrb	r3, [r3, #3]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d105      	bne.n	8001eb2 <main+0xb6e>
		  {
			  tx_check++;
 8001ea6:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <main+0xbe0>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <main+0xbe0>)
 8001eb0:	701a      	strb	r2, [r3, #0]
		  }
		  stat = HAL_I2C_Mem_Read(&hi2c1, DSP2_ADDR, BandAddress[k], 2, aux, 4, 1000);
 8001eb2:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ebc:	443b      	add	r3, r7
 8001ebe:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec6:	9302      	str	r3, [sp, #8]
 8001ec8:	2304      	movs	r3, #4
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <main+0xbf0>)
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	2174      	movs	r1, #116	; 0x74
 8001ed4:	4818      	ldr	r0, [pc, #96]	; (8001f38 <main+0xbf4>)
 8001ed6:	f003 fb69 	bl	80055ac <HAL_I2C_Mem_Read>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <main+0xbf8>)
 8001ee0:	701a      	strb	r2, [r3, #0]
		  stat = 0;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <main+0xbf8>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
		  if(aux[3] == data_SafeLoad[3])
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <main+0xbf0>)
 8001eea:	78da      	ldrb	r2, [r3, #3]
 8001eec:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <main+0xbe8>)
 8001eee:	78db      	ldrb	r3, [r3, #3]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d105      	bne.n	8001f00 <main+0xbbc>
		  {
			  tx_check++;
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <main+0xbe0>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <main+0xbe0>)
 8001efe:	701a      	strb	r2, [r3, #0]
	  while(tx_check < 3)
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <main+0xbe0>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	f67f af5b 	bls.w	8001dc0 <main+0xa7c>
		  }
	  }
	  tx_check = 0;
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <main+0xbe0>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
  for(k=0; k<10; k++) // Pre-load Filters 32Hz - 16KHz
 8001f10:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001f14:	3301      	adds	r3, #1
 8001f16:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001f1a:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001f1e:	2b09      	cmp	r3, #9
 8001f20:	d9ee      	bls.n	8001f00 <main+0xbbc>
  }

  while(tx_check < 3) // Pre-load Volume
 8001f22:	e0ef      	b.n	8002104 <main+0xdc0>
 8001f24:	20007467 	.word	0x20007467
 8001f28:	200073b0 	.word	0x200073b0
 8001f2c:	2000746c 	.word	0x2000746c
 8001f30:	20007470 	.word	0x20007470
 8001f34:	20007468 	.word	0x20007468
 8001f38:	200071e0 	.word	0x200071e0
 8001f3c:	2000736c 	.word	0x2000736c
  {
	  tx_check = 0;
 8001f40:	4b75      	ldr	r3, [pc, #468]	; (8002118 <main+0xdd4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
	  pote_aux = 29 - pote[VOL_ARRAY];
 8001f46:	4b75      	ldr	r3, [pc, #468]	; (800211c <main+0xdd8>)
 8001f48:	8adb      	ldrh	r3, [r3, #22]
 8001f4a:	f1c3 031d 	rsb	r3, r3, #29
 8001f4e:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
	  data_SafeLoad[3] = 0xFF & (vol_data[pote_aux]);
 8001f52:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f5c:	443b      	add	r3, r7
 8001f5e:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	4b6e      	ldr	r3, [pc, #440]	; (8002120 <main+0xddc>)
 8001f66:	70da      	strb	r2, [r3, #3]
	  data_SafeLoad[2] = 0xFF & ((vol_data[pote_aux])>>8);
 8001f68:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f72:	443b      	add	r3, r7
 8001f74:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	4b68      	ldr	r3, [pc, #416]	; (8002120 <main+0xddc>)
 8001f7e:	709a      	strb	r2, [r3, #2]
	  data_SafeLoad[1] = 0xFF & ((vol_data[pote_aux])>>16);
 8001f80:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f8a:	443b      	add	r3, r7
 8001f8c:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001f90:	0c1b      	lsrs	r3, r3, #16
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	4b62      	ldr	r3, [pc, #392]	; (8002120 <main+0xddc>)
 8001f96:	705a      	strb	r2, [r3, #1]
	  data_SafeLoad[0] = 0xFF & ((vol_data[pote_aux])>>24);
 8001f98:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fa2:	443b      	add	r3, r7
 8001fa4:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001fa8:	0e1b      	lsrs	r3, r3, #24
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	4b5c      	ldr	r3, [pc, #368]	; (8002120 <main+0xddc>)
 8001fae:	701a      	strb	r2, [r3, #0]
	  address_SafeLoad[3] = 0xFF & (BandAddress[VOL_ARRAY]);
 8001fb0:	f8b7 31fa 	ldrh.w	r3, [r7, #506]	; 0x1fa
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4b5b      	ldr	r3, [pc, #364]	; (8002124 <main+0xde0>)
 8001fb8:	70da      	strb	r2, [r3, #3]
	  address_SafeLoad[2] = 0xFF & ((BandAddress[VOL_ARRAY])>>8);
 8001fba:	f8b7 31fa 	ldrh.w	r3, [r7, #506]	; 0x1fa
 8001fbe:	0a1b      	lsrs	r3, r3, #8
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	4b57      	ldr	r3, [pc, #348]	; (8002124 <main+0xde0>)
 8001fc6:	709a      	strb	r2, [r3, #2]
	  Safeload_Write();
 8001fc8:	f001 fb4c 	bl	8003664 <Safeload_Write>
	  delay_us(100);
 8001fcc:	2064      	movs	r0, #100	; 0x64
 8001fce:	f001 fb2f 	bl	8003630 <delay_us>
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP0_ADDR, BandAddress[VOL_ARRAY], 2, aux, 4, 1000);
 8001fd2:	f8b7 21fa 	ldrh.w	r2, [r7, #506]	; 0x1fa
 8001fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fda:	9302      	str	r3, [sp, #8]
 8001fdc:	2304      	movs	r3, #4
 8001fde:	9301      	str	r3, [sp, #4]
 8001fe0:	4b51      	ldr	r3, [pc, #324]	; (8002128 <main+0xde4>)
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	2170      	movs	r1, #112	; 0x70
 8001fe8:	4850      	ldr	r0, [pc, #320]	; (800212c <main+0xde8>)
 8001fea:	f003 fadf 	bl	80055ac <HAL_I2C_Mem_Read>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b4f      	ldr	r3, [pc, #316]	; (8002130 <main+0xdec>)
 8001ff4:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 8001ff6:	4b4e      	ldr	r3, [pc, #312]	; (8002130 <main+0xdec>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 8001ffc:	4b4a      	ldr	r3, [pc, #296]	; (8002128 <main+0xde4>)
 8001ffe:	78da      	ldrb	r2, [r3, #3]
 8002000:	4b47      	ldr	r3, [pc, #284]	; (8002120 <main+0xddc>)
 8002002:	78db      	ldrb	r3, [r3, #3]
 8002004:	429a      	cmp	r2, r3
 8002006:	d117      	bne.n	8002038 <main+0xcf4>
	  {
		  if(aux[2] == data_SafeLoad[2])
 8002008:	4b47      	ldr	r3, [pc, #284]	; (8002128 <main+0xde4>)
 800200a:	789a      	ldrb	r2, [r3, #2]
 800200c:	4b44      	ldr	r3, [pc, #272]	; (8002120 <main+0xddc>)
 800200e:	789b      	ldrb	r3, [r3, #2]
 8002010:	429a      	cmp	r2, r3
 8002012:	d111      	bne.n	8002038 <main+0xcf4>
		  {
			  if(aux[1] == data_SafeLoad[1])
 8002014:	4b44      	ldr	r3, [pc, #272]	; (8002128 <main+0xde4>)
 8002016:	785a      	ldrb	r2, [r3, #1]
 8002018:	4b41      	ldr	r3, [pc, #260]	; (8002120 <main+0xddc>)
 800201a:	785b      	ldrb	r3, [r3, #1]
 800201c:	429a      	cmp	r2, r3
 800201e:	d10b      	bne.n	8002038 <main+0xcf4>
			  {
				  if(aux[0] == data_SafeLoad[0])
 8002020:	4b41      	ldr	r3, [pc, #260]	; (8002128 <main+0xde4>)
 8002022:	781a      	ldrb	r2, [r3, #0]
 8002024:	4b3e      	ldr	r3, [pc, #248]	; (8002120 <main+0xddc>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d105      	bne.n	8002038 <main+0xcf4>
				  {
					  tx_check++;
 800202c:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <main+0xdd4>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	3301      	adds	r3, #1
 8002032:	b2da      	uxtb	r2, r3
 8002034:	4b38      	ldr	r3, [pc, #224]	; (8002118 <main+0xdd4>)
 8002036:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP1_ADDR, BandAddress[VOL_ARRAY], 2, aux, 4, 1000);
 8002038:	f8b7 21fa 	ldrh.w	r2, [r7, #506]	; 0x1fa
 800203c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002040:	9302      	str	r3, [sp, #8]
 8002042:	2304      	movs	r3, #4
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	4b38      	ldr	r3, [pc, #224]	; (8002128 <main+0xde4>)
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2302      	movs	r3, #2
 800204c:	2172      	movs	r1, #114	; 0x72
 800204e:	4837      	ldr	r0, [pc, #220]	; (800212c <main+0xde8>)
 8002050:	f003 faac 	bl	80055ac <HAL_I2C_Mem_Read>
 8002054:	4603      	mov	r3, r0
 8002056:	461a      	mov	r2, r3
 8002058:	4b35      	ldr	r3, [pc, #212]	; (8002130 <main+0xdec>)
 800205a:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 800205c:	4b34      	ldr	r3, [pc, #208]	; (8002130 <main+0xdec>)
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 8002062:	4b31      	ldr	r3, [pc, #196]	; (8002128 <main+0xde4>)
 8002064:	78da      	ldrb	r2, [r3, #3]
 8002066:	4b2e      	ldr	r3, [pc, #184]	; (8002120 <main+0xddc>)
 8002068:	78db      	ldrb	r3, [r3, #3]
 800206a:	429a      	cmp	r2, r3
 800206c:	d117      	bne.n	800209e <main+0xd5a>
	  {
		  if(aux[2] == data_SafeLoad[2])
 800206e:	4b2e      	ldr	r3, [pc, #184]	; (8002128 <main+0xde4>)
 8002070:	789a      	ldrb	r2, [r3, #2]
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <main+0xddc>)
 8002074:	789b      	ldrb	r3, [r3, #2]
 8002076:	429a      	cmp	r2, r3
 8002078:	d111      	bne.n	800209e <main+0xd5a>
		  {
			  if(aux[1] == data_SafeLoad[1])
 800207a:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <main+0xde4>)
 800207c:	785a      	ldrb	r2, [r3, #1]
 800207e:	4b28      	ldr	r3, [pc, #160]	; (8002120 <main+0xddc>)
 8002080:	785b      	ldrb	r3, [r3, #1]
 8002082:	429a      	cmp	r2, r3
 8002084:	d10b      	bne.n	800209e <main+0xd5a>
			  {
				  if(aux[0] == data_SafeLoad[0])
 8002086:	4b28      	ldr	r3, [pc, #160]	; (8002128 <main+0xde4>)
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	4b25      	ldr	r3, [pc, #148]	; (8002120 <main+0xddc>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d105      	bne.n	800209e <main+0xd5a>
				  {
					  tx_check++;
 8002092:	4b21      	ldr	r3, [pc, #132]	; (8002118 <main+0xdd4>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	3301      	adds	r3, #1
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <main+0xdd4>)
 800209c:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP2_ADDR, BandAddress[VOL_ARRAY], 2, aux, 4, 1000);
 800209e:	f8b7 21fa 	ldrh.w	r2, [r7, #506]	; 0x1fa
 80020a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a6:	9302      	str	r3, [sp, #8]
 80020a8:	2304      	movs	r3, #4
 80020aa:	9301      	str	r3, [sp, #4]
 80020ac:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <main+0xde4>)
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2302      	movs	r3, #2
 80020b2:	2174      	movs	r1, #116	; 0x74
 80020b4:	481d      	ldr	r0, [pc, #116]	; (800212c <main+0xde8>)
 80020b6:	f003 fa79 	bl	80055ac <HAL_I2C_Mem_Read>
 80020ba:	4603      	mov	r3, r0
 80020bc:	461a      	mov	r2, r3
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <main+0xdec>)
 80020c0:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 80020c2:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <main+0xdec>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 80020c8:	4b17      	ldr	r3, [pc, #92]	; (8002128 <main+0xde4>)
 80020ca:	78da      	ldrb	r2, [r3, #3]
 80020cc:	4b14      	ldr	r3, [pc, #80]	; (8002120 <main+0xddc>)
 80020ce:	78db      	ldrb	r3, [r3, #3]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d117      	bne.n	8002104 <main+0xdc0>
	  {
		  if(aux[2] == data_SafeLoad[2])
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <main+0xde4>)
 80020d6:	789a      	ldrb	r2, [r3, #2]
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <main+0xddc>)
 80020da:	789b      	ldrb	r3, [r3, #2]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d111      	bne.n	8002104 <main+0xdc0>
		  {
			  if(aux[1] == data_SafeLoad[1])
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <main+0xde4>)
 80020e2:	785a      	ldrb	r2, [r3, #1]
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <main+0xddc>)
 80020e6:	785b      	ldrb	r3, [r3, #1]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d10b      	bne.n	8002104 <main+0xdc0>
			  {
				  if(aux[0] == data_SafeLoad[0])
 80020ec:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <main+0xde4>)
 80020ee:	781a      	ldrb	r2, [r3, #0]
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <main+0xddc>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d105      	bne.n	8002104 <main+0xdc0>
				  {
					  tx_check++;
 80020f8:	4b07      	ldr	r3, [pc, #28]	; (8002118 <main+0xdd4>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	3301      	adds	r3, #1
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <main+0xdd4>)
 8002102:	701a      	strb	r2, [r3, #0]
  while(tx_check < 3) // Pre-load Volume
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <main+0xdd4>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b02      	cmp	r3, #2
 800210a:	f67f af19 	bls.w	8001f40 <main+0xbfc>
				  }
			  }
		  }
	  }
  }
  tx_check = 0;
 800210e:	4b02      	ldr	r3, [pc, #8]	; (8002118 <main+0xdd4>)
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]

  while(tx_check < 3) // Pre-load Loudness LOW
 8002114:	e0f0      	b.n	80022f8 <main+0xfb4>
 8002116:	bf00      	nop
 8002118:	20007467 	.word	0x20007467
 800211c:	200073b0 	.word	0x200073b0
 8002120:	2000746c 	.word	0x2000746c
 8002124:	20007470 	.word	0x20007470
 8002128:	20007468 	.word	0x20007468
 800212c:	200071e0 	.word	0x200071e0
 8002130:	2000736c 	.word	0x2000736c
  {
	  tx_check = 0;
 8002134:	4b75      	ldr	r3, [pc, #468]	; (800230c <main+0xfc8>)
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
	  pote_aux = 29 - pote[LOUD_LOW_ARRAY];
 800213a:	4b75      	ldr	r3, [pc, #468]	; (8002310 <main+0xfcc>)
 800213c:	8b1b      	ldrh	r3, [r3, #24]
 800213e:	f1c3 031d 	rsb	r3, r3, #29
 8002142:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

	  data_SafeLoad[3] = 0xFF & (boost_data[pote_aux]);
 8002146:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 800214a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800214e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b6e      	ldr	r3, [pc, #440]	; (8002314 <main+0xfd0>)
 800215a:	70da      	strb	r2, [r3, #3]
	  data_SafeLoad[2] = 0xFF & ((boost_data[pote_aux])>>8);
 800215c:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002160:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002164:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	b2da      	uxtb	r2, r3
 8002170:	4b68      	ldr	r3, [pc, #416]	; (8002314 <main+0xfd0>)
 8002172:	709a      	strb	r2, [r3, #2]
	  data_SafeLoad[1] = 0xFF & ((boost_data[pote_aux])>>16);
 8002174:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002178:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	b2da      	uxtb	r2, r3
 8002188:	4b62      	ldr	r3, [pc, #392]	; (8002314 <main+0xfd0>)
 800218a:	705a      	strb	r2, [r3, #1]
	  data_SafeLoad[0] = 0xFF & ((boost_data[pote_aux])>>24);
 800218c:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002190:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002194:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219c:	0e1b      	lsrs	r3, r3, #24
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	4b5c      	ldr	r3, [pc, #368]	; (8002314 <main+0xfd0>)
 80021a2:	701a      	strb	r2, [r3, #0]
	  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_LOW_ARRAY]);
 80021a4:	f8b7 31fc 	ldrh.w	r3, [r7, #508]	; 0x1fc
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b5b      	ldr	r3, [pc, #364]	; (8002318 <main+0xfd4>)
 80021ac:	70da      	strb	r2, [r3, #3]
	  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_LOW_ARRAY])>>8);
 80021ae:	f8b7 31fc 	ldrh.w	r3, [r7, #508]	; 0x1fc
 80021b2:	0a1b      	lsrs	r3, r3, #8
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	4b57      	ldr	r3, [pc, #348]	; (8002318 <main+0xfd4>)
 80021ba:	709a      	strb	r2, [r3, #2]
	  Safeload_Write();
 80021bc:	f001 fa52 	bl	8003664 <Safeload_Write>
	  delay_us(100);
 80021c0:	2064      	movs	r0, #100	; 0x64
 80021c2:	f001 fa35 	bl	8003630 <delay_us>
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP0_ADDR, BandAddress[LOUD_LOW_ARRAY], 2, aux, 4, 1000);
 80021c6:	f8b7 21fc 	ldrh.w	r2, [r7, #508]	; 0x1fc
 80021ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ce:	9302      	str	r3, [sp, #8]
 80021d0:	2304      	movs	r3, #4
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	4b51      	ldr	r3, [pc, #324]	; (800231c <main+0xfd8>)
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	2302      	movs	r3, #2
 80021da:	2170      	movs	r1, #112	; 0x70
 80021dc:	4850      	ldr	r0, [pc, #320]	; (8002320 <main+0xfdc>)
 80021de:	f003 f9e5 	bl	80055ac <HAL_I2C_Mem_Read>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b4f      	ldr	r3, [pc, #316]	; (8002324 <main+0xfe0>)
 80021e8:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 80021ea:	4b4e      	ldr	r3, [pc, #312]	; (8002324 <main+0xfe0>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 80021f0:	4b4a      	ldr	r3, [pc, #296]	; (800231c <main+0xfd8>)
 80021f2:	78da      	ldrb	r2, [r3, #3]
 80021f4:	4b47      	ldr	r3, [pc, #284]	; (8002314 <main+0xfd0>)
 80021f6:	78db      	ldrb	r3, [r3, #3]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d117      	bne.n	800222c <main+0xee8>
	  {
		  if(aux[2] == data_SafeLoad[2])
 80021fc:	4b47      	ldr	r3, [pc, #284]	; (800231c <main+0xfd8>)
 80021fe:	789a      	ldrb	r2, [r3, #2]
 8002200:	4b44      	ldr	r3, [pc, #272]	; (8002314 <main+0xfd0>)
 8002202:	789b      	ldrb	r3, [r3, #2]
 8002204:	429a      	cmp	r2, r3
 8002206:	d111      	bne.n	800222c <main+0xee8>
		  {
			  if(aux[1] == data_SafeLoad[1])
 8002208:	4b44      	ldr	r3, [pc, #272]	; (800231c <main+0xfd8>)
 800220a:	785a      	ldrb	r2, [r3, #1]
 800220c:	4b41      	ldr	r3, [pc, #260]	; (8002314 <main+0xfd0>)
 800220e:	785b      	ldrb	r3, [r3, #1]
 8002210:	429a      	cmp	r2, r3
 8002212:	d10b      	bne.n	800222c <main+0xee8>
			  {
				  if(aux[0] == data_SafeLoad[0])
 8002214:	4b41      	ldr	r3, [pc, #260]	; (800231c <main+0xfd8>)
 8002216:	781a      	ldrb	r2, [r3, #0]
 8002218:	4b3e      	ldr	r3, [pc, #248]	; (8002314 <main+0xfd0>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d105      	bne.n	800222c <main+0xee8>
				  {
					  tx_check++;
 8002220:	4b3a      	ldr	r3, [pc, #232]	; (800230c <main+0xfc8>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	b2da      	uxtb	r2, r3
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <main+0xfc8>)
 800222a:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP1_ADDR, BandAddress[LOUD_LOW_ARRAY], 2, aux, 4, 1000);
 800222c:	f8b7 21fc 	ldrh.w	r2, [r7, #508]	; 0x1fc
 8002230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002234:	9302      	str	r3, [sp, #8]
 8002236:	2304      	movs	r3, #4
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	4b38      	ldr	r3, [pc, #224]	; (800231c <main+0xfd8>)
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2302      	movs	r3, #2
 8002240:	2172      	movs	r1, #114	; 0x72
 8002242:	4837      	ldr	r0, [pc, #220]	; (8002320 <main+0xfdc>)
 8002244:	f003 f9b2 	bl	80055ac <HAL_I2C_Mem_Read>
 8002248:	4603      	mov	r3, r0
 800224a:	461a      	mov	r2, r3
 800224c:	4b35      	ldr	r3, [pc, #212]	; (8002324 <main+0xfe0>)
 800224e:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 8002250:	4b34      	ldr	r3, [pc, #208]	; (8002324 <main+0xfe0>)
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 8002256:	4b31      	ldr	r3, [pc, #196]	; (800231c <main+0xfd8>)
 8002258:	78da      	ldrb	r2, [r3, #3]
 800225a:	4b2e      	ldr	r3, [pc, #184]	; (8002314 <main+0xfd0>)
 800225c:	78db      	ldrb	r3, [r3, #3]
 800225e:	429a      	cmp	r2, r3
 8002260:	d117      	bne.n	8002292 <main+0xf4e>
	  {
		  if(aux[2] == data_SafeLoad[2])
 8002262:	4b2e      	ldr	r3, [pc, #184]	; (800231c <main+0xfd8>)
 8002264:	789a      	ldrb	r2, [r3, #2]
 8002266:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <main+0xfd0>)
 8002268:	789b      	ldrb	r3, [r3, #2]
 800226a:	429a      	cmp	r2, r3
 800226c:	d111      	bne.n	8002292 <main+0xf4e>
		  {
			  if(aux[1] == data_SafeLoad[1])
 800226e:	4b2b      	ldr	r3, [pc, #172]	; (800231c <main+0xfd8>)
 8002270:	785a      	ldrb	r2, [r3, #1]
 8002272:	4b28      	ldr	r3, [pc, #160]	; (8002314 <main+0xfd0>)
 8002274:	785b      	ldrb	r3, [r3, #1]
 8002276:	429a      	cmp	r2, r3
 8002278:	d10b      	bne.n	8002292 <main+0xf4e>
			  {
				  if(aux[0] == data_SafeLoad[0])
 800227a:	4b28      	ldr	r3, [pc, #160]	; (800231c <main+0xfd8>)
 800227c:	781a      	ldrb	r2, [r3, #0]
 800227e:	4b25      	ldr	r3, [pc, #148]	; (8002314 <main+0xfd0>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d105      	bne.n	8002292 <main+0xf4e>
				  {
					  tx_check++;
 8002286:	4b21      	ldr	r3, [pc, #132]	; (800230c <main+0xfc8>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	3301      	adds	r3, #1
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b1f      	ldr	r3, [pc, #124]	; (800230c <main+0xfc8>)
 8002290:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP2_ADDR, BandAddress[LOUD_LOW_ARRAY], 2, aux, 4, 1000);
 8002292:	f8b7 21fc 	ldrh.w	r2, [r7, #508]	; 0x1fc
 8002296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229a:	9302      	str	r3, [sp, #8]
 800229c:	2304      	movs	r3, #4
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	4b1e      	ldr	r3, [pc, #120]	; (800231c <main+0xfd8>)
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	2302      	movs	r3, #2
 80022a6:	2174      	movs	r1, #116	; 0x74
 80022a8:	481d      	ldr	r0, [pc, #116]	; (8002320 <main+0xfdc>)
 80022aa:	f003 f97f 	bl	80055ac <HAL_I2C_Mem_Read>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <main+0xfe0>)
 80022b4:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 80022b6:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <main+0xfe0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 80022bc:	4b17      	ldr	r3, [pc, #92]	; (800231c <main+0xfd8>)
 80022be:	78da      	ldrb	r2, [r3, #3]
 80022c0:	4b14      	ldr	r3, [pc, #80]	; (8002314 <main+0xfd0>)
 80022c2:	78db      	ldrb	r3, [r3, #3]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d117      	bne.n	80022f8 <main+0xfb4>
	  {
		  if(aux[2] == data_SafeLoad[2])
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <main+0xfd8>)
 80022ca:	789a      	ldrb	r2, [r3, #2]
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <main+0xfd0>)
 80022ce:	789b      	ldrb	r3, [r3, #2]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d111      	bne.n	80022f8 <main+0xfb4>
		  {
			  if(aux[1] == data_SafeLoad[1])
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <main+0xfd8>)
 80022d6:	785a      	ldrb	r2, [r3, #1]
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <main+0xfd0>)
 80022da:	785b      	ldrb	r3, [r3, #1]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d10b      	bne.n	80022f8 <main+0xfb4>
			  {
				  if(aux[0] == data_SafeLoad[0])
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <main+0xfd8>)
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <main+0xfd0>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d105      	bne.n	80022f8 <main+0xfb4>
				  {
					  tx_check++;
 80022ec:	4b07      	ldr	r3, [pc, #28]	; (800230c <main+0xfc8>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <main+0xfc8>)
 80022f6:	701a      	strb	r2, [r3, #0]
  while(tx_check < 3) // Pre-load Loudness LOW
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <main+0xfc8>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	f67f af19 	bls.w	8002134 <main+0xdf0>
				  }
			  }
		  }
	  }
  }
  tx_check = 0;
 8002302:	4b02      	ldr	r3, [pc, #8]	; (800230c <main+0xfc8>)
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]

  while(tx_check < 3) // Pre-load Loudness HIGH
 8002308:	e0f0      	b.n	80024ec <main+0x11a8>
 800230a:	bf00      	nop
 800230c:	20007467 	.word	0x20007467
 8002310:	200073b0 	.word	0x200073b0
 8002314:	2000746c 	.word	0x2000746c
 8002318:	20007470 	.word	0x20007470
 800231c:	20007468 	.word	0x20007468
 8002320:	200071e0 	.word	0x200071e0
 8002324:	2000736c 	.word	0x2000736c
  {
	  tx_check = 0;
 8002328:	4b75      	ldr	r3, [pc, #468]	; (8002500 <main+0x11bc>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
	  pote_aux = 29 - pote[LOUD_HIGH_ARRAY];
 800232e:	4b75      	ldr	r3, [pc, #468]	; (8002504 <main+0x11c0>)
 8002330:	8b5b      	ldrh	r3, [r3, #26]
 8002332:	f1c3 031d 	rsb	r3, r3, #29
 8002336:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

	  data_SafeLoad[3] = 0xFF & (boost_data[pote_aux]);
 800233a:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 800233e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002342:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	4b6e      	ldr	r3, [pc, #440]	; (8002508 <main+0x11c4>)
 800234e:	70da      	strb	r2, [r3, #3]
	  data_SafeLoad[2] = 0xFF & ((boost_data[pote_aux])>>8);
 8002350:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002358:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800235c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	b2da      	uxtb	r2, r3
 8002364:	4b68      	ldr	r3, [pc, #416]	; (8002508 <main+0x11c4>)
 8002366:	709a      	strb	r2, [r3, #2]
	  data_SafeLoad[1] = 0xFF & ((boost_data[pote_aux])>>16);
 8002368:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 800236c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002370:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002378:	0c1b      	lsrs	r3, r3, #16
 800237a:	b2da      	uxtb	r2, r3
 800237c:	4b62      	ldr	r3, [pc, #392]	; (8002508 <main+0x11c4>)
 800237e:	705a      	strb	r2, [r3, #1]
	  data_SafeLoad[0] = 0xFF & ((boost_data[pote_aux])>>24);
 8002380:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002388:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800238c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002390:	0e1b      	lsrs	r3, r3, #24
 8002392:	b2da      	uxtb	r2, r3
 8002394:	4b5c      	ldr	r3, [pc, #368]	; (8002508 <main+0x11c4>)
 8002396:	701a      	strb	r2, [r3, #0]
	  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_HIGH_ARRAY]);
 8002398:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4b5b      	ldr	r3, [pc, #364]	; (800250c <main+0x11c8>)
 80023a0:	70da      	strb	r2, [r3, #3]
	  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_HIGH_ARRAY])>>8);
 80023a2:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	4b57      	ldr	r3, [pc, #348]	; (800250c <main+0x11c8>)
 80023ae:	709a      	strb	r2, [r3, #2]
	  Safeload_Write();
 80023b0:	f001 f958 	bl	8003664 <Safeload_Write>
	  delay_us(100);
 80023b4:	2064      	movs	r0, #100	; 0x64
 80023b6:	f001 f93b 	bl	8003630 <delay_us>
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP0_ADDR, BandAddress[LOUD_HIGH_ARRAY], 2, aux, 4, 1000);
 80023ba:	f8b7 21fe 	ldrh.w	r2, [r7, #510]	; 0x1fe
 80023be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023c2:	9302      	str	r3, [sp, #8]
 80023c4:	2304      	movs	r3, #4
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	4b51      	ldr	r3, [pc, #324]	; (8002510 <main+0x11cc>)
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	2302      	movs	r3, #2
 80023ce:	2170      	movs	r1, #112	; 0x70
 80023d0:	4850      	ldr	r0, [pc, #320]	; (8002514 <main+0x11d0>)
 80023d2:	f003 f8eb 	bl	80055ac <HAL_I2C_Mem_Read>
 80023d6:	4603      	mov	r3, r0
 80023d8:	461a      	mov	r2, r3
 80023da:	4b4f      	ldr	r3, [pc, #316]	; (8002518 <main+0x11d4>)
 80023dc:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 80023de:	4b4e      	ldr	r3, [pc, #312]	; (8002518 <main+0x11d4>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 80023e4:	4b4a      	ldr	r3, [pc, #296]	; (8002510 <main+0x11cc>)
 80023e6:	78da      	ldrb	r2, [r3, #3]
 80023e8:	4b47      	ldr	r3, [pc, #284]	; (8002508 <main+0x11c4>)
 80023ea:	78db      	ldrb	r3, [r3, #3]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d117      	bne.n	8002420 <main+0x10dc>
	  {
		  if(aux[2] == data_SafeLoad[2])
 80023f0:	4b47      	ldr	r3, [pc, #284]	; (8002510 <main+0x11cc>)
 80023f2:	789a      	ldrb	r2, [r3, #2]
 80023f4:	4b44      	ldr	r3, [pc, #272]	; (8002508 <main+0x11c4>)
 80023f6:	789b      	ldrb	r3, [r3, #2]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d111      	bne.n	8002420 <main+0x10dc>
		  {
			  if(aux[1] == data_SafeLoad[1])
 80023fc:	4b44      	ldr	r3, [pc, #272]	; (8002510 <main+0x11cc>)
 80023fe:	785a      	ldrb	r2, [r3, #1]
 8002400:	4b41      	ldr	r3, [pc, #260]	; (8002508 <main+0x11c4>)
 8002402:	785b      	ldrb	r3, [r3, #1]
 8002404:	429a      	cmp	r2, r3
 8002406:	d10b      	bne.n	8002420 <main+0x10dc>
			  {
				  if(aux[0] == data_SafeLoad[0])
 8002408:	4b41      	ldr	r3, [pc, #260]	; (8002510 <main+0x11cc>)
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	4b3e      	ldr	r3, [pc, #248]	; (8002508 <main+0x11c4>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d105      	bne.n	8002420 <main+0x10dc>
				  {
					  tx_check++;
 8002414:	4b3a      	ldr	r3, [pc, #232]	; (8002500 <main+0x11bc>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	3301      	adds	r3, #1
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b38      	ldr	r3, [pc, #224]	; (8002500 <main+0x11bc>)
 800241e:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP1_ADDR, BandAddress[LOUD_HIGH_ARRAY], 2, aux, 4, 1000);
 8002420:	f8b7 21fe 	ldrh.w	r2, [r7, #510]	; 0x1fe
 8002424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002428:	9302      	str	r3, [sp, #8]
 800242a:	2304      	movs	r3, #4
 800242c:	9301      	str	r3, [sp, #4]
 800242e:	4b38      	ldr	r3, [pc, #224]	; (8002510 <main+0x11cc>)
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	2302      	movs	r3, #2
 8002434:	2172      	movs	r1, #114	; 0x72
 8002436:	4837      	ldr	r0, [pc, #220]	; (8002514 <main+0x11d0>)
 8002438:	f003 f8b8 	bl	80055ac <HAL_I2C_Mem_Read>
 800243c:	4603      	mov	r3, r0
 800243e:	461a      	mov	r2, r3
 8002440:	4b35      	ldr	r3, [pc, #212]	; (8002518 <main+0x11d4>)
 8002442:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 8002444:	4b34      	ldr	r3, [pc, #208]	; (8002518 <main+0x11d4>)
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 800244a:	4b31      	ldr	r3, [pc, #196]	; (8002510 <main+0x11cc>)
 800244c:	78da      	ldrb	r2, [r3, #3]
 800244e:	4b2e      	ldr	r3, [pc, #184]	; (8002508 <main+0x11c4>)
 8002450:	78db      	ldrb	r3, [r3, #3]
 8002452:	429a      	cmp	r2, r3
 8002454:	d117      	bne.n	8002486 <main+0x1142>
	  {
		  if(aux[2] == data_SafeLoad[2])
 8002456:	4b2e      	ldr	r3, [pc, #184]	; (8002510 <main+0x11cc>)
 8002458:	789a      	ldrb	r2, [r3, #2]
 800245a:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <main+0x11c4>)
 800245c:	789b      	ldrb	r3, [r3, #2]
 800245e:	429a      	cmp	r2, r3
 8002460:	d111      	bne.n	8002486 <main+0x1142>
		  {
			  if(aux[1] == data_SafeLoad[1])
 8002462:	4b2b      	ldr	r3, [pc, #172]	; (8002510 <main+0x11cc>)
 8002464:	785a      	ldrb	r2, [r3, #1]
 8002466:	4b28      	ldr	r3, [pc, #160]	; (8002508 <main+0x11c4>)
 8002468:	785b      	ldrb	r3, [r3, #1]
 800246a:	429a      	cmp	r2, r3
 800246c:	d10b      	bne.n	8002486 <main+0x1142>
			  {
				  if(aux[0] == data_SafeLoad[0])
 800246e:	4b28      	ldr	r3, [pc, #160]	; (8002510 <main+0x11cc>)
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	4b25      	ldr	r3, [pc, #148]	; (8002508 <main+0x11c4>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d105      	bne.n	8002486 <main+0x1142>
				  {
					  tx_check++;
 800247a:	4b21      	ldr	r3, [pc, #132]	; (8002500 <main+0x11bc>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	3301      	adds	r3, #1
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <main+0x11bc>)
 8002484:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP2_ADDR, BandAddress[LOUD_HIGH_ARRAY], 2, aux, 4, 1000);
 8002486:	f8b7 21fe 	ldrh.w	r2, [r7, #510]	; 0x1fe
 800248a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800248e:	9302      	str	r3, [sp, #8]
 8002490:	2304      	movs	r3, #4
 8002492:	9301      	str	r3, [sp, #4]
 8002494:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <main+0x11cc>)
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	2302      	movs	r3, #2
 800249a:	2174      	movs	r1, #116	; 0x74
 800249c:	481d      	ldr	r0, [pc, #116]	; (8002514 <main+0x11d0>)
 800249e:	f003 f885 	bl	80055ac <HAL_I2C_Mem_Read>
 80024a2:	4603      	mov	r3, r0
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <main+0x11d4>)
 80024a8:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 80024aa:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <main+0x11d4>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <main+0x11cc>)
 80024b2:	78da      	ldrb	r2, [r3, #3]
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <main+0x11c4>)
 80024b6:	78db      	ldrb	r3, [r3, #3]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d117      	bne.n	80024ec <main+0x11a8>
	  {
		  if(aux[2] == data_SafeLoad[2])
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <main+0x11cc>)
 80024be:	789a      	ldrb	r2, [r3, #2]
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <main+0x11c4>)
 80024c2:	789b      	ldrb	r3, [r3, #2]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d111      	bne.n	80024ec <main+0x11a8>
		  {
			  if(aux[1] == data_SafeLoad[1])
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <main+0x11cc>)
 80024ca:	785a      	ldrb	r2, [r3, #1]
 80024cc:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <main+0x11c4>)
 80024ce:	785b      	ldrb	r3, [r3, #1]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d10b      	bne.n	80024ec <main+0x11a8>
			  {
				  if(aux[0] == data_SafeLoad[0])
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <main+0x11cc>)
 80024d6:	781a      	ldrb	r2, [r3, #0]
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <main+0x11c4>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d105      	bne.n	80024ec <main+0x11a8>
				  {
					  tx_check++;
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <main+0x11bc>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	3301      	adds	r3, #1
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <main+0x11bc>)
 80024ea:	701a      	strb	r2, [r3, #0]
  while(tx_check < 3) // Pre-load Loudness HIGH
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <main+0x11bc>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	f67f af19 	bls.w	8002328 <main+0xfe4>
				  }
			  }
		  }
	  }
  }
  tx_check = 0;
 80024f6:	4b02      	ldr	r3, [pc, #8]	; (8002500 <main+0x11bc>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]

  while(tx_check < 3) // Pre-load Loudness GRL
 80024fc:	e0ee      	b.n	80026dc <main+0x1398>
 80024fe:	bf00      	nop
 8002500:	20007467 	.word	0x20007467
 8002504:	200073b0 	.word	0x200073b0
 8002508:	2000746c 	.word	0x2000746c
 800250c:	20007470 	.word	0x20007470
 8002510:	20007468 	.word	0x20007468
 8002514:	200071e0 	.word	0x200071e0
 8002518:	2000736c 	.word	0x2000736c
  {
	  tx_check = 0;
 800251c:	4b74      	ldr	r3, [pc, #464]	; (80026f0 <main+0x13ac>)
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
	  pote_aux = pote[LOUD_GRL_ARRAY];
 8002522:	4b74      	ldr	r3, [pc, #464]	; (80026f4 <main+0x13b0>)
 8002524:	8b9b      	ldrh	r3, [r3, #28]
 8002526:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

	  data_SafeLoad[3] = 0xFF & (loud_data[pote_aux]);
 800252a:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 800252e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002532:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	4b6e      	ldr	r3, [pc, #440]	; (80026f8 <main+0x13b4>)
 800253e:	70da      	strb	r2, [r3, #3]
	  data_SafeLoad[2] = 0xFF & ((loud_data[pote_aux])>>8);
 8002540:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002544:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002548:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800254c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	b2da      	uxtb	r2, r3
 8002554:	4b68      	ldr	r3, [pc, #416]	; (80026f8 <main+0x13b4>)
 8002556:	709a      	strb	r2, [r3, #2]
	  data_SafeLoad[1] = 0xFF & ((loud_data[pote_aux])>>16);
 8002558:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 800255c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002560:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	b2da      	uxtb	r2, r3
 800256c:	4b62      	ldr	r3, [pc, #392]	; (80026f8 <main+0x13b4>)
 800256e:	705a      	strb	r2, [r3, #1]
	  data_SafeLoad[0] = 0xFF & ((loud_data[pote_aux])>>24);
 8002570:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002574:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002578:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800257c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002580:	0e1b      	lsrs	r3, r3, #24
 8002582:	b2da      	uxtb	r2, r3
 8002584:	4b5c      	ldr	r3, [pc, #368]	; (80026f8 <main+0x13b4>)
 8002586:	701a      	strb	r2, [r3, #0]
	  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_GRL_ARRAY]);
 8002588:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4b5b      	ldr	r3, [pc, #364]	; (80026fc <main+0x13b8>)
 8002590:	70da      	strb	r2, [r3, #3]
	  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_GRL_ARRAY])>>8);
 8002592:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 8002596:	0a1b      	lsrs	r3, r3, #8
 8002598:	b29b      	uxth	r3, r3
 800259a:	b2da      	uxtb	r2, r3
 800259c:	4b57      	ldr	r3, [pc, #348]	; (80026fc <main+0x13b8>)
 800259e:	709a      	strb	r2, [r3, #2]
	  Safeload_Write();
 80025a0:	f001 f860 	bl	8003664 <Safeload_Write>
	  delay_us(100);
 80025a4:	2064      	movs	r0, #100	; 0x64
 80025a6:	f001 f843 	bl	8003630 <delay_us>
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP0_ADDR, BandAddress[LOUD_GRL_ARRAY], 2, aux, 4, 1000);
 80025aa:	f8b7 2200 	ldrh.w	r2, [r7, #512]	; 0x200
 80025ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025b2:	9302      	str	r3, [sp, #8]
 80025b4:	2304      	movs	r3, #4
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	4b51      	ldr	r3, [pc, #324]	; (8002700 <main+0x13bc>)
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	2302      	movs	r3, #2
 80025be:	2170      	movs	r1, #112	; 0x70
 80025c0:	4850      	ldr	r0, [pc, #320]	; (8002704 <main+0x13c0>)
 80025c2:	f002 fff3 	bl	80055ac <HAL_I2C_Mem_Read>
 80025c6:	4603      	mov	r3, r0
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b4f      	ldr	r3, [pc, #316]	; (8002708 <main+0x13c4>)
 80025cc:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 80025ce:	4b4e      	ldr	r3, [pc, #312]	; (8002708 <main+0x13c4>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 80025d4:	4b4a      	ldr	r3, [pc, #296]	; (8002700 <main+0x13bc>)
 80025d6:	78da      	ldrb	r2, [r3, #3]
 80025d8:	4b47      	ldr	r3, [pc, #284]	; (80026f8 <main+0x13b4>)
 80025da:	78db      	ldrb	r3, [r3, #3]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d117      	bne.n	8002610 <main+0x12cc>
	  {
		  if(aux[2] == data_SafeLoad[2])
 80025e0:	4b47      	ldr	r3, [pc, #284]	; (8002700 <main+0x13bc>)
 80025e2:	789a      	ldrb	r2, [r3, #2]
 80025e4:	4b44      	ldr	r3, [pc, #272]	; (80026f8 <main+0x13b4>)
 80025e6:	789b      	ldrb	r3, [r3, #2]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d111      	bne.n	8002610 <main+0x12cc>
		  {
			  if(aux[1] == data_SafeLoad[1])
 80025ec:	4b44      	ldr	r3, [pc, #272]	; (8002700 <main+0x13bc>)
 80025ee:	785a      	ldrb	r2, [r3, #1]
 80025f0:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <main+0x13b4>)
 80025f2:	785b      	ldrb	r3, [r3, #1]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d10b      	bne.n	8002610 <main+0x12cc>
			  {
				  if(aux[0] == data_SafeLoad[0])
 80025f8:	4b41      	ldr	r3, [pc, #260]	; (8002700 <main+0x13bc>)
 80025fa:	781a      	ldrb	r2, [r3, #0]
 80025fc:	4b3e      	ldr	r3, [pc, #248]	; (80026f8 <main+0x13b4>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d105      	bne.n	8002610 <main+0x12cc>
				  {
					  tx_check++;
 8002604:	4b3a      	ldr	r3, [pc, #232]	; (80026f0 <main+0x13ac>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	3301      	adds	r3, #1
 800260a:	b2da      	uxtb	r2, r3
 800260c:	4b38      	ldr	r3, [pc, #224]	; (80026f0 <main+0x13ac>)
 800260e:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP1_ADDR, BandAddress[LOUD_GRL_ARRAY], 2, aux, 4, 1000);
 8002610:	f8b7 2200 	ldrh.w	r2, [r7, #512]	; 0x200
 8002614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002618:	9302      	str	r3, [sp, #8]
 800261a:	2304      	movs	r3, #4
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	4b38      	ldr	r3, [pc, #224]	; (8002700 <main+0x13bc>)
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	2302      	movs	r3, #2
 8002624:	2172      	movs	r1, #114	; 0x72
 8002626:	4837      	ldr	r0, [pc, #220]	; (8002704 <main+0x13c0>)
 8002628:	f002 ffc0 	bl	80055ac <HAL_I2C_Mem_Read>
 800262c:	4603      	mov	r3, r0
 800262e:	461a      	mov	r2, r3
 8002630:	4b35      	ldr	r3, [pc, #212]	; (8002708 <main+0x13c4>)
 8002632:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 8002634:	4b34      	ldr	r3, [pc, #208]	; (8002708 <main+0x13c4>)
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 800263a:	4b31      	ldr	r3, [pc, #196]	; (8002700 <main+0x13bc>)
 800263c:	78da      	ldrb	r2, [r3, #3]
 800263e:	4b2e      	ldr	r3, [pc, #184]	; (80026f8 <main+0x13b4>)
 8002640:	78db      	ldrb	r3, [r3, #3]
 8002642:	429a      	cmp	r2, r3
 8002644:	d117      	bne.n	8002676 <main+0x1332>
	  {
		  if(aux[2] == data_SafeLoad[2])
 8002646:	4b2e      	ldr	r3, [pc, #184]	; (8002700 <main+0x13bc>)
 8002648:	789a      	ldrb	r2, [r3, #2]
 800264a:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <main+0x13b4>)
 800264c:	789b      	ldrb	r3, [r3, #2]
 800264e:	429a      	cmp	r2, r3
 8002650:	d111      	bne.n	8002676 <main+0x1332>
		  {
			  if(aux[1] == data_SafeLoad[1])
 8002652:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <main+0x13bc>)
 8002654:	785a      	ldrb	r2, [r3, #1]
 8002656:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <main+0x13b4>)
 8002658:	785b      	ldrb	r3, [r3, #1]
 800265a:	429a      	cmp	r2, r3
 800265c:	d10b      	bne.n	8002676 <main+0x1332>
			  {
				  if(aux[0] == data_SafeLoad[0])
 800265e:	4b28      	ldr	r3, [pc, #160]	; (8002700 <main+0x13bc>)
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <main+0x13b4>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d105      	bne.n	8002676 <main+0x1332>
				  {
					  tx_check++;
 800266a:	4b21      	ldr	r3, [pc, #132]	; (80026f0 <main+0x13ac>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	3301      	adds	r3, #1
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <main+0x13ac>)
 8002674:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP2_ADDR, BandAddress[LOUD_GRL_ARRAY], 2, aux, 4, 1000);
 8002676:	f8b7 2200 	ldrh.w	r2, [r7, #512]	; 0x200
 800267a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800267e:	9302      	str	r3, [sp, #8]
 8002680:	2304      	movs	r3, #4
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <main+0x13bc>)
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2302      	movs	r3, #2
 800268a:	2174      	movs	r1, #116	; 0x74
 800268c:	481d      	ldr	r0, [pc, #116]	; (8002704 <main+0x13c0>)
 800268e:	f002 ff8d 	bl	80055ac <HAL_I2C_Mem_Read>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <main+0x13c4>)
 8002698:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 800269a:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <main+0x13c4>)
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 80026a0:	4b17      	ldr	r3, [pc, #92]	; (8002700 <main+0x13bc>)
 80026a2:	78da      	ldrb	r2, [r3, #3]
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <main+0x13b4>)
 80026a6:	78db      	ldrb	r3, [r3, #3]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d117      	bne.n	80026dc <main+0x1398>
	  {
		  if(aux[2] == data_SafeLoad[2])
 80026ac:	4b14      	ldr	r3, [pc, #80]	; (8002700 <main+0x13bc>)
 80026ae:	789a      	ldrb	r2, [r3, #2]
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <main+0x13b4>)
 80026b2:	789b      	ldrb	r3, [r3, #2]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d111      	bne.n	80026dc <main+0x1398>
		  {
			  if(aux[1] == data_SafeLoad[1])
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <main+0x13bc>)
 80026ba:	785a      	ldrb	r2, [r3, #1]
 80026bc:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <main+0x13b4>)
 80026be:	785b      	ldrb	r3, [r3, #1]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d10b      	bne.n	80026dc <main+0x1398>
			  {
				  if(aux[0] == data_SafeLoad[0])
 80026c4:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <main+0x13bc>)
 80026c6:	781a      	ldrb	r2, [r3, #0]
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <main+0x13b4>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d105      	bne.n	80026dc <main+0x1398>
				  {
					  tx_check++;
 80026d0:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <main+0x13ac>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	3301      	adds	r3, #1
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <main+0x13ac>)
 80026da:	701a      	strb	r2, [r3, #0]
  while(tx_check < 3) // Pre-load Loudness GRL
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <main+0x13ac>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	f67f af1b 	bls.w	800251c <main+0x11d8>
				  }
			  }
		  }
	  }
  }
  tx_check = 0;
 80026e6:	4b02      	ldr	r3, [pc, #8]	; (80026f0 <main+0x13ac>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]

  while(tx_check < 3) // Pre-load Loudness COMP
 80026ec:	e0e4      	b.n	80028b8 <main+0x1574>
 80026ee:	bf00      	nop
 80026f0:	20007467 	.word	0x20007467
 80026f4:	200073b0 	.word	0x200073b0
 80026f8:	2000746c 	.word	0x2000746c
 80026fc:	20007470 	.word	0x20007470
 8002700:	20007468 	.word	0x20007468
 8002704:	200071e0 	.word	0x200071e0
 8002708:	2000736c 	.word	0x2000736c
  {
	  tx_check = 0;
 800270c:	4b86      	ldr	r3, [pc, #536]	; (8002928 <main+0x15e4>)
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
	  data_SafeLoad[3] = 0xFF & (comp_data[pote_aux]);
 8002712:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002716:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800271a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800271e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	4b81      	ldr	r3, [pc, #516]	; (800292c <main+0x15e8>)
 8002726:	70da      	strb	r2, [r3, #3]
	  data_SafeLoad[2] = 0xFF & ((comp_data[pote_aux])>>8);
 8002728:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 800272c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002730:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	b2da      	uxtb	r2, r3
 800273c:	4b7b      	ldr	r3, [pc, #492]	; (800292c <main+0x15e8>)
 800273e:	709a      	strb	r2, [r3, #2]
	  data_SafeLoad[1] = 0xFF & ((comp_data[pote_aux])>>16);
 8002740:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002748:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800274c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	b2da      	uxtb	r2, r3
 8002754:	4b75      	ldr	r3, [pc, #468]	; (800292c <main+0x15e8>)
 8002756:	705a      	strb	r2, [r3, #1]
	  data_SafeLoad[0] = 0xFF & ((comp_data[pote_aux])>>24);
 8002758:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 800275c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002760:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002768:	0e1b      	lsrs	r3, r3, #24
 800276a:	b2da      	uxtb	r2, r3
 800276c:	4b6f      	ldr	r3, [pc, #444]	; (800292c <main+0x15e8>)
 800276e:	701a      	strb	r2, [r3, #0]
	  address_SafeLoad[3] = 0xFF & (MOD_LOUD_COMP_GAINALGNS145X2GAIN_ADDR);
 8002770:	4b6f      	ldr	r3, [pc, #444]	; (8002930 <main+0x15ec>)
 8002772:	2269      	movs	r2, #105	; 0x69
 8002774:	70da      	strb	r2, [r3, #3]
	  address_SafeLoad[2] = 0xFF & ((MOD_LOUD_COMP_GAINALGNS145X2GAIN_ADDR)>>8);
 8002776:	4b6e      	ldr	r3, [pc, #440]	; (8002930 <main+0x15ec>)
 8002778:	2208      	movs	r2, #8
 800277a:	709a      	strb	r2, [r3, #2]
	  Safeload_Write();
 800277c:	f000 ff72 	bl	8003664 <Safeload_Write>
	  delay_us(100);
 8002780:	2064      	movs	r0, #100	; 0x64
 8002782:	f000 ff55 	bl	8003630 <delay_us>
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP0_ADDR, MOD_LOUD_COMP_GAINALGNS145X2GAIN_ADDR, 2, aux, 4, 1000);
 8002786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278a:	9302      	str	r3, [sp, #8]
 800278c:	2304      	movs	r3, #4
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	4b68      	ldr	r3, [pc, #416]	; (8002934 <main+0x15f0>)
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2302      	movs	r3, #2
 8002796:	f640 0269 	movw	r2, #2153	; 0x869
 800279a:	2170      	movs	r1, #112	; 0x70
 800279c:	4866      	ldr	r0, [pc, #408]	; (8002938 <main+0x15f4>)
 800279e:	f002 ff05 	bl	80055ac <HAL_I2C_Mem_Read>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461a      	mov	r2, r3
 80027a6:	4b65      	ldr	r3, [pc, #404]	; (800293c <main+0x15f8>)
 80027a8:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 80027aa:	4b64      	ldr	r3, [pc, #400]	; (800293c <main+0x15f8>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 80027b0:	4b60      	ldr	r3, [pc, #384]	; (8002934 <main+0x15f0>)
 80027b2:	78da      	ldrb	r2, [r3, #3]
 80027b4:	4b5d      	ldr	r3, [pc, #372]	; (800292c <main+0x15e8>)
 80027b6:	78db      	ldrb	r3, [r3, #3]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d117      	bne.n	80027ec <main+0x14a8>
	  {
		  if(aux[2] == data_SafeLoad[2])
 80027bc:	4b5d      	ldr	r3, [pc, #372]	; (8002934 <main+0x15f0>)
 80027be:	789a      	ldrb	r2, [r3, #2]
 80027c0:	4b5a      	ldr	r3, [pc, #360]	; (800292c <main+0x15e8>)
 80027c2:	789b      	ldrb	r3, [r3, #2]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d111      	bne.n	80027ec <main+0x14a8>
		  {
			  if(aux[1] == data_SafeLoad[1])
 80027c8:	4b5a      	ldr	r3, [pc, #360]	; (8002934 <main+0x15f0>)
 80027ca:	785a      	ldrb	r2, [r3, #1]
 80027cc:	4b57      	ldr	r3, [pc, #348]	; (800292c <main+0x15e8>)
 80027ce:	785b      	ldrb	r3, [r3, #1]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d10b      	bne.n	80027ec <main+0x14a8>
			  {
				  if(aux[0] == data_SafeLoad[0])
 80027d4:	4b57      	ldr	r3, [pc, #348]	; (8002934 <main+0x15f0>)
 80027d6:	781a      	ldrb	r2, [r3, #0]
 80027d8:	4b54      	ldr	r3, [pc, #336]	; (800292c <main+0x15e8>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d105      	bne.n	80027ec <main+0x14a8>
				  {
					  tx_check++;
 80027e0:	4b51      	ldr	r3, [pc, #324]	; (8002928 <main+0x15e4>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	3301      	adds	r3, #1
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	4b4f      	ldr	r3, [pc, #316]	; (8002928 <main+0x15e4>)
 80027ea:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP1_ADDR, MOD_LOUD_COMP_GAINALGNS145X2GAIN_ADDR, 2, aux, 4, 1000);
 80027ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f0:	9302      	str	r3, [sp, #8]
 80027f2:	2304      	movs	r3, #4
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	4b4f      	ldr	r3, [pc, #316]	; (8002934 <main+0x15f0>)
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	2302      	movs	r3, #2
 80027fc:	f640 0269 	movw	r2, #2153	; 0x869
 8002800:	2172      	movs	r1, #114	; 0x72
 8002802:	484d      	ldr	r0, [pc, #308]	; (8002938 <main+0x15f4>)
 8002804:	f002 fed2 	bl	80055ac <HAL_I2C_Mem_Read>
 8002808:	4603      	mov	r3, r0
 800280a:	461a      	mov	r2, r3
 800280c:	4b4b      	ldr	r3, [pc, #300]	; (800293c <main+0x15f8>)
 800280e:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 8002810:	4b4a      	ldr	r3, [pc, #296]	; (800293c <main+0x15f8>)
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 8002816:	4b47      	ldr	r3, [pc, #284]	; (8002934 <main+0x15f0>)
 8002818:	78da      	ldrb	r2, [r3, #3]
 800281a:	4b44      	ldr	r3, [pc, #272]	; (800292c <main+0x15e8>)
 800281c:	78db      	ldrb	r3, [r3, #3]
 800281e:	429a      	cmp	r2, r3
 8002820:	d117      	bne.n	8002852 <main+0x150e>
	  {
		  if(aux[2] == data_SafeLoad[2])
 8002822:	4b44      	ldr	r3, [pc, #272]	; (8002934 <main+0x15f0>)
 8002824:	789a      	ldrb	r2, [r3, #2]
 8002826:	4b41      	ldr	r3, [pc, #260]	; (800292c <main+0x15e8>)
 8002828:	789b      	ldrb	r3, [r3, #2]
 800282a:	429a      	cmp	r2, r3
 800282c:	d111      	bne.n	8002852 <main+0x150e>
		  {
			  if(aux[1] == data_SafeLoad[1])
 800282e:	4b41      	ldr	r3, [pc, #260]	; (8002934 <main+0x15f0>)
 8002830:	785a      	ldrb	r2, [r3, #1]
 8002832:	4b3e      	ldr	r3, [pc, #248]	; (800292c <main+0x15e8>)
 8002834:	785b      	ldrb	r3, [r3, #1]
 8002836:	429a      	cmp	r2, r3
 8002838:	d10b      	bne.n	8002852 <main+0x150e>
			  {
				  if(aux[0] == data_SafeLoad[0])
 800283a:	4b3e      	ldr	r3, [pc, #248]	; (8002934 <main+0x15f0>)
 800283c:	781a      	ldrb	r2, [r3, #0]
 800283e:	4b3b      	ldr	r3, [pc, #236]	; (800292c <main+0x15e8>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d105      	bne.n	8002852 <main+0x150e>
				  {
					  tx_check++;
 8002846:	4b38      	ldr	r3, [pc, #224]	; (8002928 <main+0x15e4>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	3301      	adds	r3, #1
 800284c:	b2da      	uxtb	r2, r3
 800284e:	4b36      	ldr	r3, [pc, #216]	; (8002928 <main+0x15e4>)
 8002850:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP2_ADDR, MOD_LOUD_COMP_GAINALGNS145X2GAIN_ADDR, 2, aux, 4, 1000);
 8002852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002856:	9302      	str	r3, [sp, #8]
 8002858:	2304      	movs	r3, #4
 800285a:	9301      	str	r3, [sp, #4]
 800285c:	4b35      	ldr	r3, [pc, #212]	; (8002934 <main+0x15f0>)
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	2302      	movs	r3, #2
 8002862:	f640 0269 	movw	r2, #2153	; 0x869
 8002866:	2174      	movs	r1, #116	; 0x74
 8002868:	4833      	ldr	r0, [pc, #204]	; (8002938 <main+0x15f4>)
 800286a:	f002 fe9f 	bl	80055ac <HAL_I2C_Mem_Read>
 800286e:	4603      	mov	r3, r0
 8002870:	461a      	mov	r2, r3
 8002872:	4b32      	ldr	r3, [pc, #200]	; (800293c <main+0x15f8>)
 8002874:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 8002876:	4b31      	ldr	r3, [pc, #196]	; (800293c <main+0x15f8>)
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 800287c:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <main+0x15f0>)
 800287e:	78da      	ldrb	r2, [r3, #3]
 8002880:	4b2a      	ldr	r3, [pc, #168]	; (800292c <main+0x15e8>)
 8002882:	78db      	ldrb	r3, [r3, #3]
 8002884:	429a      	cmp	r2, r3
 8002886:	d117      	bne.n	80028b8 <main+0x1574>
	  {
		  if(aux[2] == data_SafeLoad[2])
 8002888:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <main+0x15f0>)
 800288a:	789a      	ldrb	r2, [r3, #2]
 800288c:	4b27      	ldr	r3, [pc, #156]	; (800292c <main+0x15e8>)
 800288e:	789b      	ldrb	r3, [r3, #2]
 8002890:	429a      	cmp	r2, r3
 8002892:	d111      	bne.n	80028b8 <main+0x1574>
		  {
			  if(aux[1] == data_SafeLoad[1])
 8002894:	4b27      	ldr	r3, [pc, #156]	; (8002934 <main+0x15f0>)
 8002896:	785a      	ldrb	r2, [r3, #1]
 8002898:	4b24      	ldr	r3, [pc, #144]	; (800292c <main+0x15e8>)
 800289a:	785b      	ldrb	r3, [r3, #1]
 800289c:	429a      	cmp	r2, r3
 800289e:	d10b      	bne.n	80028b8 <main+0x1574>
			  {
				  if(aux[0] == data_SafeLoad[0])
 80028a0:	4b24      	ldr	r3, [pc, #144]	; (8002934 <main+0x15f0>)
 80028a2:	781a      	ldrb	r2, [r3, #0]
 80028a4:	4b21      	ldr	r3, [pc, #132]	; (800292c <main+0x15e8>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d105      	bne.n	80028b8 <main+0x1574>
				  {
					  tx_check++;
 80028ac:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <main+0x15e4>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	3301      	adds	r3, #1
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <main+0x15e4>)
 80028b6:	701a      	strb	r2, [r3, #0]
  while(tx_check < 3) // Pre-load Loudness COMP
 80028b8:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <main+0x15e4>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	f67f af25 	bls.w	800270c <main+0x13c8>
				  }
			  }
		  }
	  }
  }
  tx_check = 0;
 80028c2:	4b19      	ldr	r3, [pc, #100]	; (8002928 <main+0x15e4>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
 	  data_SafeLoad[2] = 0x00;
 80028c8:	4b18      	ldr	r3, [pc, #96]	; (800292c <main+0x15e8>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	709a      	strb	r2, [r3, #2]
	  data_SafeLoad[1] = 0x00;
 80028ce:	4b17      	ldr	r3, [pc, #92]	; (800292c <main+0x15e8>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	705a      	strb	r2, [r3, #1]
	  data_SafeLoad[0] = 0x00;
 80028d4:	4b15      	ldr	r3, [pc, #84]	; (800292c <main+0x15e8>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]

	  address_SafeLoad[1] = 0x00;
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <main+0x15ec>)
 80028dc:	2200      	movs	r2, #0
 80028de:	705a      	strb	r2, [r3, #1]
	  address_SafeLoad[0] = 0x00;
 80028e0:	4b13      	ldr	r3, [pc, #76]	; (8002930 <main+0x15ec>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]

	  num_SafeLoad_Lower[3] = 0x01;
 80028e6:	4b16      	ldr	r3, [pc, #88]	; (8002940 <main+0x15fc>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	70da      	strb	r2, [r3, #3]
	  num_SafeLoad_Lower[2] = 0x00;
 80028ec:	4b14      	ldr	r3, [pc, #80]	; (8002940 <main+0x15fc>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	709a      	strb	r2, [r3, #2]
	  num_SafeLoad_Lower[1] = 0x00;
 80028f2:	4b13      	ldr	r3, [pc, #76]	; (8002940 <main+0x15fc>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	705a      	strb	r2, [r3, #1]
	  num_SafeLoad_Lower[0] = 0x00;
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <main+0x15fc>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]

	  num_SafeLoad_Upper[3] = 0x00;
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <main+0x1600>)
 8002900:	2200      	movs	r2, #0
 8002902:	70da      	strb	r2, [r3, #3]
	  num_SafeLoad_Upper[2] = 0x00;
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <main+0x1600>)
 8002906:	2200      	movs	r2, #0
 8002908:	709a      	strb	r2, [r3, #2]
	  num_SafeLoad_Upper[1] = 0x00;
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <main+0x1600>)
 800290c:	2200      	movs	r2, #0
 800290e:	705a      	strb	r2, [r3, #1]
	  num_SafeLoad_Upper[0] = 0x00;
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <main+0x1600>)
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]

	  if(update == 1)
 8002916:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <main+0x1604>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d1d4      	bne.n	80028c8 <main+0x1584>
	  {
		  for(k=0; k<10; k++) // Filters 32Hz - 16KHz
 800291e:	2300      	movs	r3, #0
 8002920:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8002924:	e04c      	b.n	80029c0 <main+0x167c>
 8002926:	bf00      	nop
 8002928:	20007467 	.word	0x20007467
 800292c:	2000746c 	.word	0x2000746c
 8002930:	20007470 	.word	0x20007470
 8002934:	20007468 	.word	0x20007468
 8002938:	200071e0 	.word	0x200071e0
 800293c:	2000736c 	.word	0x2000736c
 8002940:	20007474 	.word	0x20007474
 8002944:	20007478 	.word	0x20007478
 8002948:	20007466 	.word	0x20007466
		  {
			  if(flag[k] == 1)
 800294c:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8002950:	4aca      	ldr	r2, [pc, #808]	; (8002c7c <main+0x1938>)
 8002952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d12d      	bne.n	80029b6 <main+0x1672>
			  {
				  flag[k] = 0;
 800295a:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 800295e:	4ac7      	ldr	r2, [pc, #796]	; (8002c7c <main+0x1938>)
 8002960:	2100      	movs	r1, #0
 8002962:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  data_SafeLoad[3] = 29 - pote[k];
 8002966:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 800296a:	4ac5      	ldr	r2, [pc, #788]	; (8002c80 <main+0x193c>)
 800296c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f1c3 031d 	rsb	r3, r3, #29
 8002976:	b2da      	uxtb	r2, r3
 8002978:	4bc2      	ldr	r3, [pc, #776]	; (8002c84 <main+0x1940>)
 800297a:	70da      	strb	r2, [r3, #3]
				  address_SafeLoad[3] = 0xFF & (BandAddress[k]);
 800297c:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002986:	443b      	add	r3, r7
 8002988:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800298c:	b2da      	uxtb	r2, r3
 800298e:	4bbe      	ldr	r3, [pc, #760]	; (8002c88 <main+0x1944>)
 8002990:	70da      	strb	r2, [r3, #3]
				  address_SafeLoad[2] = 0xFF & ((BandAddress[k])>>8);
 8002992:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800299c:	443b      	add	r3, r7
 800299e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	4bb7      	ldr	r3, [pc, #732]	; (8002c88 <main+0x1944>)
 80029aa:	709a      	strb	r2, [r3, #2]
				  Safeload_Write();
 80029ac:	f000 fe5a 	bl	8003664 <Safeload_Write>
				  delay_us(100);
 80029b0:	2064      	movs	r0, #100	; 0x64
 80029b2:	f000 fe3d 	bl	8003630 <delay_us>
		  for(k=0; k<10; k++) // Filters 32Hz - 16KHz
 80029b6:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 80029ba:	3301      	adds	r3, #1
 80029bc:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 80029c0:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 80029c4:	2b09      	cmp	r3, #9
 80029c6:	d9c1      	bls.n	800294c <main+0x1608>
			  }

		  }

		  if(flag[VOL_ARRAY] == 1) // Volume General
 80029c8:	4bac      	ldr	r3, [pc, #688]	; (8002c7c <main+0x1938>)
 80029ca:	8adb      	ldrh	r3, [r3, #22]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d148      	bne.n	8002a62 <main+0x171e>
		  {
			  flag[VOL_ARRAY] = 0;
 80029d0:	4baa      	ldr	r3, [pc, #680]	; (8002c7c <main+0x1938>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	82da      	strh	r2, [r3, #22]
			  pote_aux = 29 - pote[VOL_ARRAY];
 80029d6:	4baa      	ldr	r3, [pc, #680]	; (8002c80 <main+0x193c>)
 80029d8:	8adb      	ldrh	r3, [r3, #22]
 80029da:	f1c3 031d 	rsb	r3, r3, #29
 80029de:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

			  data_SafeLoad[3] = 0xFF & (vol_data[pote_aux]);
 80029e2:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029ec:	443b      	add	r3, r7
 80029ee:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	4ba3      	ldr	r3, [pc, #652]	; (8002c84 <main+0x1940>)
 80029f6:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((vol_data[pote_aux])>>8);
 80029f8:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a02:	443b      	add	r3, r7
 8002a04:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8002a08:	0a1b      	lsrs	r3, r3, #8
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	4b9d      	ldr	r3, [pc, #628]	; (8002c84 <main+0x1940>)
 8002a0e:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((vol_data[pote_aux])>>16);
 8002a10:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a1a:	443b      	add	r3, r7
 8002a1c:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	4b97      	ldr	r3, [pc, #604]	; (8002c84 <main+0x1940>)
 8002a26:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((vol_data[pote_aux])>>24);
 8002a28:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a32:	443b      	add	r3, r7
 8002a34:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8002a38:	0e1b      	lsrs	r3, r3, #24
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	4b91      	ldr	r3, [pc, #580]	; (8002c84 <main+0x1940>)
 8002a3e:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[VOL_ARRAY]);
 8002a40:	f8b7 31fa 	ldrh.w	r3, [r7, #506]	; 0x1fa
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4b90      	ldr	r3, [pc, #576]	; (8002c88 <main+0x1944>)
 8002a48:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[VOL_ARRAY])>>8);
 8002a4a:	f8b7 31fa 	ldrh.w	r3, [r7, #506]	; 0x1fa
 8002a4e:	0a1b      	lsrs	r3, r3, #8
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	4b8c      	ldr	r3, [pc, #560]	; (8002c88 <main+0x1944>)
 8002a56:	709a      	strb	r2, [r3, #2]
			  Safeload_Write();
 8002a58:	f000 fe04 	bl	8003664 <Safeload_Write>
			  delay_us(100);
 8002a5c:	2064      	movs	r0, #100	; 0x64
 8002a5e:	f000 fde7 	bl	8003630 <delay_us>
//			  SIGMA_WRITE_REGISTER_BLOCK(DSP2_ADDR, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
//			  SIGMA_WRITE_REGISTER_BLOCK(DSP2_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_ADDR, 4, num_SafeLoad);
//			  delay_us(100);
//		  }

		  if(flag[LOUD_LOW_ARRAY] == 1) // Loudness Low Side
 8002a62:	4b86      	ldr	r3, [pc, #536]	; (8002c7c <main+0x1938>)
 8002a64:	8b1b      	ldrh	r3, [r3, #24]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d148      	bne.n	8002afc <main+0x17b8>
		  {
			  flag[LOUD_LOW_ARRAY] = 0;
 8002a6a:	4b84      	ldr	r3, [pc, #528]	; (8002c7c <main+0x1938>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	831a      	strh	r2, [r3, #24]
			  pote_aux = 29 - pote[LOUD_LOW_ARRAY];
 8002a70:	4b83      	ldr	r3, [pc, #524]	; (8002c80 <main+0x193c>)
 8002a72:	8b1b      	ldrh	r3, [r3, #24]
 8002a74:	f1c3 031d 	rsb	r3, r3, #29
 8002a78:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

			  data_SafeLoad[3] = 0xFF & (boost_data[pote_aux]);
 8002a7c:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002a80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a84:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	4b7d      	ldr	r3, [pc, #500]	; (8002c84 <main+0x1940>)
 8002a90:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((boost_data[pote_aux])>>8);
 8002a92:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a9a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4b77      	ldr	r3, [pc, #476]	; (8002c84 <main+0x1940>)
 8002aa8:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((boost_data[pote_aux])>>16);
 8002aaa:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002aae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aba:	0c1b      	lsrs	r3, r3, #16
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4b71      	ldr	r3, [pc, #452]	; (8002c84 <main+0x1940>)
 8002ac0:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((boost_data[pote_aux])>>24);
 8002ac2:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002ac6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad2:	0e1b      	lsrs	r3, r3, #24
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4b6b      	ldr	r3, [pc, #428]	; (8002c84 <main+0x1940>)
 8002ad8:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_LOW_ARRAY]);
 8002ada:	f8b7 31fc 	ldrh.w	r3, [r7, #508]	; 0x1fc
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	4b69      	ldr	r3, [pc, #420]	; (8002c88 <main+0x1944>)
 8002ae2:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_LOW_ARRAY])>>8);
 8002ae4:	f8b7 31fc 	ldrh.w	r3, [r7, #508]	; 0x1fc
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	4b66      	ldr	r3, [pc, #408]	; (8002c88 <main+0x1944>)
 8002af0:	709a      	strb	r2, [r3, #2]
			  Safeload_Write();
 8002af2:	f000 fdb7 	bl	8003664 <Safeload_Write>
			  delay_us(100);
 8002af6:	2064      	movs	r0, #100	; 0x64
 8002af8:	f000 fd9a 	bl	8003630 <delay_us>
		  }

		  if(flag[LOUD_HIGH_ARRAY] == 1) // Loudness High Side
 8002afc:	4b5f      	ldr	r3, [pc, #380]	; (8002c7c <main+0x1938>)
 8002afe:	8b5b      	ldrh	r3, [r3, #26]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d148      	bne.n	8002b96 <main+0x1852>
		  {
			  flag[LOUD_HIGH_ARRAY] = 0;
 8002b04:	4b5d      	ldr	r3, [pc, #372]	; (8002c7c <main+0x1938>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	835a      	strh	r2, [r3, #26]
			  pote_aux = 29 - pote[LOUD_HIGH_ARRAY];
 8002b0a:	4b5d      	ldr	r3, [pc, #372]	; (8002c80 <main+0x193c>)
 8002b0c:	8b5b      	ldrh	r3, [r3, #26]
 8002b0e:	f1c3 031d 	rsb	r3, r3, #29
 8002b12:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

			  data_SafeLoad[3] = 0xFF & (boost_data[pote_aux]);
 8002b16:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b1e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	4b56      	ldr	r3, [pc, #344]	; (8002c84 <main+0x1940>)
 8002b2a:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((boost_data[pote_aux])>>8);
 8002b2c:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b34:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <main+0x1940>)
 8002b42:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((boost_data[pote_aux])>>16);
 8002b44:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b4c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b54:	0c1b      	lsrs	r3, r3, #16
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	4b4a      	ldr	r3, [pc, #296]	; (8002c84 <main+0x1940>)
 8002b5a:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((boost_data[pote_aux])>>24);
 8002b5c:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b64:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b6c:	0e1b      	lsrs	r3, r3, #24
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	4b44      	ldr	r3, [pc, #272]	; (8002c84 <main+0x1940>)
 8002b72:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_HIGH_ARRAY]);
 8002b74:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4b43      	ldr	r3, [pc, #268]	; (8002c88 <main+0x1944>)
 8002b7c:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_HIGH_ARRAY])>>8);
 8002b7e:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8002b82:	0a1b      	lsrs	r3, r3, #8
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <main+0x1944>)
 8002b8a:	709a      	strb	r2, [r3, #2]
			  Safeload_Write();
 8002b8c:	f000 fd6a 	bl	8003664 <Safeload_Write>
			  delay_us(100);
 8002b90:	2064      	movs	r0, #100	; 0x64
 8002b92:	f000 fd4d 	bl	8003630 <delay_us>
		  }

		  if(flag[LOUD_GRL_ARRAY] == 1) // Loudness General
 8002b96:	4b39      	ldr	r3, [pc, #228]	; (8002c7c <main+0x1938>)
 8002b98:	8b9b      	ldrh	r3, [r3, #28]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	f040 808b 	bne.w	8002cb6 <main+0x1972>
		  {
			  flag[LOUD_GRL_ARRAY] = 0;
 8002ba0:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <main+0x1938>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	839a      	strh	r2, [r3, #28]
			  pote_aux = pote[LOUD_GRL_ARRAY];
 8002ba6:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <main+0x193c>)
 8002ba8:	8b9b      	ldrh	r3, [r3, #28]
 8002baa:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

			  data_SafeLoad[3] = 0xFF & (loud_data[pote_aux]);
 8002bae:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bb6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <main+0x1940>)
 8002bc2:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((loud_data[pote_aux])>>8);
 8002bc4:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002bc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bcc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	4b2a      	ldr	r3, [pc, #168]	; (8002c84 <main+0x1940>)
 8002bda:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((loud_data[pote_aux])>>16);
 8002bdc:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002be0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bec:	0c1b      	lsrs	r3, r3, #16
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <main+0x1940>)
 8002bf2:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((loud_data[pote_aux])>>24);
 8002bf4:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bfc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c04:	0e1b      	lsrs	r3, r3, #24
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	4b1e      	ldr	r3, [pc, #120]	; (8002c84 <main+0x1940>)
 8002c0a:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_GRL_ARRAY]);
 8002c0c:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <main+0x1944>)
 8002c14:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_GRL_ARRAY])>>8);
 8002c16:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 8002c1a:	0a1b      	lsrs	r3, r3, #8
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <main+0x1944>)
 8002c22:	709a      	strb	r2, [r3, #2]
			  Safeload_Write();
 8002c24:	f000 fd1e 	bl	8003664 <Safeload_Write>
			  delay_us(100);
 8002c28:	2064      	movs	r0, #100	; 0x64
 8002c2a:	f000 fd01 	bl	8003630 <delay_us>

			  data_SafeLoad[3] = 0xFF & (comp_data[pote_aux]);
 8002c2e:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002c32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <main+0x1940>)
 8002c42:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((comp_data[pote_aux])>>8);
 8002c44:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c54:	0a1b      	lsrs	r3, r3, #8
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <main+0x1940>)
 8002c5a:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((comp_data[pote_aux])>>16);
 8002c5c:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002c60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c6c:	0c1b      	lsrs	r3, r3, #16
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <main+0x1940>)
 8002c72:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((comp_data[pote_aux])>>24);
 8002c74:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002c78:	e008      	b.n	8002c8c <main+0x1948>
 8002c7a:	bf00      	nop
 8002c7c:	20007448 	.word	0x20007448
 8002c80:	200073b0 	.word	0x200073b0
 8002c84:	2000746c 	.word	0x2000746c
 8002c88:	20007470 	.word	0x20007470
 8002c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c98:	0e1b      	lsrs	r3, r3, #24
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <main+0x1984>)
 8002c9e:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (MOD_LOUD_COMP_GAINALGNS145X2GAIN_ADDR);
 8002ca0:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <main+0x1988>)
 8002ca2:	2269      	movs	r2, #105	; 0x69
 8002ca4:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((MOD_LOUD_COMP_GAINALGNS145X2GAIN_ADDR)>>8);
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <main+0x1988>)
 8002ca8:	2208      	movs	r2, #8
 8002caa:	709a      	strb	r2, [r3, #2]
			  Safeload_Write();
 8002cac:	f000 fcda 	bl	8003664 <Safeload_Write>
			  delay_us(100);
 8002cb0:	2064      	movs	r0, #100	; 0x64
 8002cb2:	f000 fcbd 	bl	8003630 <delay_us>
		  }

		  update = 0;
 8002cb6:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <main+0x198c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_DMA(&hadc1, value, ADC_POT);
 8002cbc:	220f      	movs	r2, #15
 8002cbe:	4905      	ldr	r1, [pc, #20]	; (8002cd4 <main+0x1990>)
 8002cc0:	4805      	ldr	r0, [pc, #20]	; (8002cd8 <main+0x1994>)
 8002cc2:	f001 f871 	bl	8003da8 <HAL_ADC_Start_DMA>
 	  data_SafeLoad[2] = 0x00;
 8002cc6:	e5ff      	b.n	80028c8 <main+0x1584>
 8002cc8:	2000746c 	.word	0x2000746c
 8002ccc:	20007470 	.word	0x20007470
 8002cd0:	20007466 	.word	0x20007466
 8002cd4:	20007374 	.word	0x20007374
 8002cd8:	20007138 	.word	0x20007138

08002cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b094      	sub	sp, #80	; 0x50
 8002ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ce2:	f107 0320 	add.w	r3, r7, #32
 8002ce6:	2230      	movs	r2, #48	; 0x30
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f004 f91e 	bl	8006f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cf0:	f107 030c 	add.w	r3, r7, #12
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d00:	2300      	movs	r3, #0
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	4b29      	ldr	r3, [pc, #164]	; (8002dac <SystemClock_Config+0xd0>)
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	4a28      	ldr	r2, [pc, #160]	; (8002dac <SystemClock_Config+0xd0>)
 8002d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d10:	4b26      	ldr	r3, [pc, #152]	; (8002dac <SystemClock_Config+0xd0>)
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <SystemClock_Config+0xd4>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d28:	4a21      	ldr	r2, [pc, #132]	; (8002db0 <SystemClock_Config+0xd4>)
 8002d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <SystemClock_Config+0xd4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d38:	607b      	str	r3, [r7, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d40:	2301      	movs	r3, #1
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d44:	2310      	movs	r3, #16
 8002d46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d50:	2308      	movs	r3, #8
 8002d52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002d54:	2350      	movs	r3, #80	; 0x50
 8002d56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d5c:	2304      	movs	r3, #4
 8002d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d60:	f107 0320 	add.w	r3, r7, #32
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 f9a3 	bl	80060b0 <HAL_RCC_OscConfig>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002d70:	f000 fcd8 	bl	8003724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d74:	230f      	movs	r3, #15
 8002d76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d8c:	f107 030c 	add.w	r3, r7, #12
 8002d90:	2102      	movs	r1, #2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f003 fc04 	bl	80065a0 <HAL_RCC_ClockConfig>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002d9e:	f000 fcc1 	bl	8003724 <Error_Handler>
  }
}
 8002da2:	bf00      	nop
 8002da4:	3750      	adds	r7, #80	; 0x50
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40007000 	.word	0x40007000

08002db4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002dba:	463b      	mov	r3, r7
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002dc6:	4b84      	ldr	r3, [pc, #528]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002dc8:	4a84      	ldr	r2, [pc, #528]	; (8002fdc <MX_ADC1_Init+0x228>)
 8002dca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002dcc:	4b82      	ldr	r3, [pc, #520]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002dd2:	4b81      	ldr	r3, [pc, #516]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002dd8:	4b7f      	ldr	r3, [pc, #508]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002dde:	4b7e      	ldr	r3, [pc, #504]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002de4:	4b7c      	ldr	r3, [pc, #496]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002dec:	4b7a      	ldr	r3, [pc, #488]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002df2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002df4:	4b78      	ldr	r3, [pc, #480]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002df6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002dfa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002dfc:	4b76      	ldr	r3, [pc, #472]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 15;
 8002e02:	4b75      	ldr	r3, [pc, #468]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002e04:	220f      	movs	r2, #15
 8002e06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002e08:	4b73      	ldr	r3, [pc, #460]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002e10:	4b71      	ldr	r3, [pc, #452]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e16:	4870      	ldr	r0, [pc, #448]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002e18:	f000 ff82 	bl	8003d20 <HAL_ADC_Init>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8002e22:	f000 fc7f 	bl	8003724 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002e2e:	2304      	movs	r3, #4
 8002e30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e32:	463b      	mov	r3, r7
 8002e34:	4619      	mov	r1, r3
 8002e36:	4868      	ldr	r0, [pc, #416]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002e38:	f001 f8ba 	bl	8003fb0 <HAL_ADC_ConfigChannel>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8002e42:	f000 fc6f 	bl	8003724 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002e46:	2301      	movs	r3, #1
 8002e48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e4e:	463b      	mov	r3, r7
 8002e50:	4619      	mov	r1, r3
 8002e52:	4861      	ldr	r0, [pc, #388]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002e54:	f001 f8ac 	bl	8003fb0 <HAL_ADC_ConfigChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8002e5e:	f000 fc61 	bl	8003724 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002e62:	2302      	movs	r3, #2
 8002e64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002e66:	2303      	movs	r3, #3
 8002e68:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e6a:	463b      	mov	r3, r7
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	485a      	ldr	r0, [pc, #360]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002e70:	f001 f89e 	bl	8003fb0 <HAL_ADC_ConfigChannel>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8002e7a:	f000 fc53 	bl	8003724 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002e82:	2304      	movs	r3, #4
 8002e84:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e86:	463b      	mov	r3, r7
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4853      	ldr	r0, [pc, #332]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002e8c:	f001 f890 	bl	8003fb0 <HAL_ADC_ConfigChannel>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8002e96:	f000 fc45 	bl	8003724 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002e9e:	2305      	movs	r3, #5
 8002ea0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ea2:	463b      	mov	r3, r7
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	484c      	ldr	r0, [pc, #304]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002ea8:	f001 f882 	bl	8003fb0 <HAL_ADC_ConfigChannel>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8002eb2:	f000 fc37 	bl	8003724 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002eb6:	2305      	movs	r3, #5
 8002eb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002eba:	2306      	movs	r3, #6
 8002ebc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ebe:	463b      	mov	r3, r7
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4845      	ldr	r0, [pc, #276]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002ec4:	f001 f874 	bl	8003fb0 <HAL_ADC_ConfigChannel>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8002ece:	f000 fc29 	bl	8003724 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002ed2:	2306      	movs	r3, #6
 8002ed4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002ed6:	2307      	movs	r3, #7
 8002ed8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002eda:	463b      	mov	r3, r7
 8002edc:	4619      	mov	r1, r3
 8002ede:	483e      	ldr	r0, [pc, #248]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002ee0:	f001 f866 	bl	8003fb0 <HAL_ADC_ConfigChannel>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 8002eea:	f000 fc1b 	bl	8003724 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002eee:	2307      	movs	r3, #7
 8002ef0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ef6:	463b      	mov	r3, r7
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4837      	ldr	r0, [pc, #220]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002efc:	f001 f858 	bl	8003fb0 <HAL_ADC_ConfigChannel>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8002f06:	f000 fc0d 	bl	8003724 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002f0a:	2308      	movs	r3, #8
 8002f0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002f0e:	2309      	movs	r3, #9
 8002f10:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f12:	463b      	mov	r3, r7
 8002f14:	4619      	mov	r1, r3
 8002f16:	4830      	ldr	r0, [pc, #192]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002f18:	f001 f84a 	bl	8003fb0 <HAL_ADC_ConfigChannel>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 8002f22:	f000 fbff 	bl	8003724 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002f26:	2309      	movs	r3, #9
 8002f28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8002f2a:	230a      	movs	r3, #10
 8002f2c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f2e:	463b      	mov	r3, r7
 8002f30:	4619      	mov	r1, r3
 8002f32:	4829      	ldr	r0, [pc, #164]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002f34:	f001 f83c 	bl	8003fb0 <HAL_ADC_ConfigChannel>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8002f3e:	f000 fbf1 	bl	8003724 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002f42:	230a      	movs	r3, #10
 8002f44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8002f46:	230b      	movs	r3, #11
 8002f48:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f4a:	463b      	mov	r3, r7
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4822      	ldr	r0, [pc, #136]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002f50:	f001 f82e 	bl	8003fb0 <HAL_ADC_ConfigChannel>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 8002f5a:	f000 fbe3 	bl	8003724 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002f5e:	230b      	movs	r3, #11
 8002f60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8002f62:	230c      	movs	r3, #12
 8002f64:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f66:	463b      	mov	r3, r7
 8002f68:	4619      	mov	r1, r3
 8002f6a:	481b      	ldr	r0, [pc, #108]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002f6c:	f001 f820 	bl	8003fb0 <HAL_ADC_ConfigChannel>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 8002f76:	f000 fbd5 	bl	8003724 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002f7a:	230c      	movs	r3, #12
 8002f7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8002f7e:	230d      	movs	r3, #13
 8002f80:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f82:	463b      	mov	r3, r7
 8002f84:	4619      	mov	r1, r3
 8002f86:	4814      	ldr	r0, [pc, #80]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002f88:	f001 f812 	bl	8003fb0 <HAL_ADC_ConfigChannel>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_ADC1_Init+0x1e2>
  {
    Error_Handler();
 8002f92:	f000 fbc7 	bl	8003724 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002f96:	230d      	movs	r3, #13
 8002f98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8002f9a:	230e      	movs	r3, #14
 8002f9c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f9e:	463b      	mov	r3, r7
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	480d      	ldr	r0, [pc, #52]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002fa4:	f001 f804 	bl	8003fb0 <HAL_ADC_ConfigChannel>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_ADC1_Init+0x1fe>
  {
    Error_Handler();
 8002fae:	f000 fbb9 	bl	8003724 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002fb2:	230e      	movs	r3, #14
 8002fb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8002fb6:	230f      	movs	r3, #15
 8002fb8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fba:	463b      	mov	r3, r7
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4806      	ldr	r0, [pc, #24]	; (8002fd8 <MX_ADC1_Init+0x224>)
 8002fc0:	f000 fff6 	bl	8003fb0 <HAL_ADC_ConfigChannel>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_ADC1_Init+0x21a>
  {
    Error_Handler();
 8002fca:	f000 fbab 	bl	8003724 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20007138 	.word	0x20007138
 8002fdc:	40012000 	.word	0x40012000

08002fe0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fe4:	4b12      	ldr	r3, [pc, #72]	; (8003030 <MX_I2C1_Init+0x50>)
 8002fe6:	4a13      	ldr	r2, [pc, #76]	; (8003034 <MX_I2C1_Init+0x54>)
 8002fe8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002fea:	4b11      	ldr	r3, [pc, #68]	; (8003030 <MX_I2C1_Init+0x50>)
 8002fec:	4a12      	ldr	r2, [pc, #72]	; (8003038 <MX_I2C1_Init+0x58>)
 8002fee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <MX_I2C1_Init+0x50>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ff6:	4b0e      	ldr	r3, [pc, #56]	; (8003030 <MX_I2C1_Init+0x50>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <MX_I2C1_Init+0x50>)
 8002ffe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003002:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003004:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <MX_I2C1_Init+0x50>)
 8003006:	2200      	movs	r2, #0
 8003008:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <MX_I2C1_Init+0x50>)
 800300c:	2200      	movs	r2, #0
 800300e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003010:	4b07      	ldr	r3, [pc, #28]	; (8003030 <MX_I2C1_Init+0x50>)
 8003012:	2200      	movs	r2, #0
 8003014:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <MX_I2C1_Init+0x50>)
 8003018:	2200      	movs	r2, #0
 800301a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800301c:	4804      	ldr	r0, [pc, #16]	; (8003030 <MX_I2C1_Init+0x50>)
 800301e:	f002 f887 	bl	8005130 <HAL_I2C_Init>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003028:	f000 fb7c 	bl	8003724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800302c:	bf00      	nop
 800302e:	bd80      	pop	{r7, pc}
 8003030:	200071e0 	.word	0x200071e0
 8003034:	40005400 	.word	0x40005400
 8003038:	00061a80 	.word	0x00061a80

0800303c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <MX_I2C2_Init+0x50>)
 8003042:	4a13      	ldr	r2, [pc, #76]	; (8003090 <MX_I2C2_Init+0x54>)
 8003044:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003046:	4b11      	ldr	r3, [pc, #68]	; (800308c <MX_I2C2_Init+0x50>)
 8003048:	4a12      	ldr	r2, [pc, #72]	; (8003094 <MX_I2C2_Init+0x58>)
 800304a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <MX_I2C2_Init+0x50>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <MX_I2C2_Init+0x50>)
 8003054:	2200      	movs	r2, #0
 8003056:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <MX_I2C2_Init+0x50>)
 800305a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800305e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003060:	4b0a      	ldr	r3, [pc, #40]	; (800308c <MX_I2C2_Init+0x50>)
 8003062:	2200      	movs	r2, #0
 8003064:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <MX_I2C2_Init+0x50>)
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800306c:	4b07      	ldr	r3, [pc, #28]	; (800308c <MX_I2C2_Init+0x50>)
 800306e:	2200      	movs	r2, #0
 8003070:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <MX_I2C2_Init+0x50>)
 8003074:	2200      	movs	r2, #0
 8003076:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003078:	4804      	ldr	r0, [pc, #16]	; (800308c <MX_I2C2_Init+0x50>)
 800307a:	f002 f859 	bl	8005130 <HAL_I2C_Init>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003084:	f000 fb4e 	bl	8003724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20007234 	.word	0x20007234
 8003090:	40005800 	.word	0x40005800
 8003094:	00061a80 	.word	0x00061a80

08003098 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800309c:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <MX_I2C3_Init+0x50>)
 800309e:	4a13      	ldr	r2, [pc, #76]	; (80030ec <MX_I2C3_Init+0x54>)
 80030a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80030a2:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <MX_I2C3_Init+0x50>)
 80030a4:	4a12      	ldr	r2, [pc, #72]	; (80030f0 <MX_I2C3_Init+0x58>)
 80030a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80030a8:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <MX_I2C3_Init+0x50>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80030ae:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <MX_I2C3_Init+0x50>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <MX_I2C3_Init+0x50>)
 80030b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <MX_I2C3_Init+0x50>)
 80030be:	2200      	movs	r2, #0
 80030c0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80030c2:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <MX_I2C3_Init+0x50>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030c8:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <MX_I2C3_Init+0x50>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030ce:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <MX_I2C3_Init+0x50>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80030d4:	4804      	ldr	r0, [pc, #16]	; (80030e8 <MX_I2C3_Init+0x50>)
 80030d6:	f002 f82b 	bl	8005130 <HAL_I2C_Init>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80030e0:	f000 fb20 	bl	8003724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80030e4:	bf00      	nop
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20007288 	.word	0x20007288
 80030ec:	40005c00 	.word	0x40005c00
 80030f0:	00061a80 	.word	0x00061a80

080030f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030fa:	f107 0308 	add.w	r3, r7, #8
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003108:	463b      	mov	r3, r7
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003110:	4b1e      	ldr	r3, [pc, #120]	; (800318c <MX_TIM2_Init+0x98>)
 8003112:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003116:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8003118:	4b1c      	ldr	r3, [pc, #112]	; (800318c <MX_TIM2_Init+0x98>)
 800311a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800311e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003120:	4b1a      	ldr	r3, [pc, #104]	; (800318c <MX_TIM2_Init+0x98>)
 8003122:	2200      	movs	r2, #0
 8003124:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8003126:	4b19      	ldr	r3, [pc, #100]	; (800318c <MX_TIM2_Init+0x98>)
 8003128:	f240 12f3 	movw	r2, #499	; 0x1f3
 800312c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800312e:	4b17      	ldr	r3, [pc, #92]	; (800318c <MX_TIM2_Init+0x98>)
 8003130:	2200      	movs	r2, #0
 8003132:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003134:	4b15      	ldr	r3, [pc, #84]	; (800318c <MX_TIM2_Init+0x98>)
 8003136:	2200      	movs	r2, #0
 8003138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800313a:	4814      	ldr	r0, [pc, #80]	; (800318c <MX_TIM2_Init+0x98>)
 800313c:	f003 fbfc 	bl	8006938 <HAL_TIM_Base_Init>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003146:	f000 faed 	bl	8003724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800314a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800314e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003150:	f107 0308 	add.w	r3, r7, #8
 8003154:	4619      	mov	r1, r3
 8003156:	480d      	ldr	r0, [pc, #52]	; (800318c <MX_TIM2_Init+0x98>)
 8003158:	f003 fc98 	bl	8006a8c <HAL_TIM_ConfigClockSource>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003162:	f000 fadf 	bl	8003724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003166:	2320      	movs	r3, #32
 8003168:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800316a:	2300      	movs	r3, #0
 800316c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800316e:	463b      	mov	r3, r7
 8003170:	4619      	mov	r1, r3
 8003172:	4806      	ldr	r0, [pc, #24]	; (800318c <MX_TIM2_Init+0x98>)
 8003174:	f003 fe6c 	bl	8006e50 <HAL_TIMEx_MasterConfigSynchronization>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800317e:	f000 fad1 	bl	8003724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003182:	bf00      	nop
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	200072dc 	.word	0x200072dc

08003190 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003196:	f107 0308 	add.w	r3, r7, #8
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	605a      	str	r2, [r3, #4]
 80031a0:	609a      	str	r2, [r3, #8]
 80031a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031a4:	463b      	mov	r3, r7
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80031ac:	4b1c      	ldr	r3, [pc, #112]	; (8003220 <MX_TIM4_Init+0x90>)
 80031ae:	4a1d      	ldr	r2, [pc, #116]	; (8003224 <MX_TIM4_Init+0x94>)
 80031b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80 - 1;
 80031b2:	4b1b      	ldr	r3, [pc, #108]	; (8003220 <MX_TIM4_Init+0x90>)
 80031b4:	224f      	movs	r2, #79	; 0x4f
 80031b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031b8:	4b19      	ldr	r3, [pc, #100]	; (8003220 <MX_TIM4_Init+0x90>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 123;
 80031be:	4b18      	ldr	r3, [pc, #96]	; (8003220 <MX_TIM4_Init+0x90>)
 80031c0:	227b      	movs	r2, #123	; 0x7b
 80031c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031c4:	4b16      	ldr	r3, [pc, #88]	; (8003220 <MX_TIM4_Init+0x90>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ca:	4b15      	ldr	r3, [pc, #84]	; (8003220 <MX_TIM4_Init+0x90>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80031d0:	4813      	ldr	r0, [pc, #76]	; (8003220 <MX_TIM4_Init+0x90>)
 80031d2:	f003 fbb1 	bl	8006938 <HAL_TIM_Base_Init>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80031dc:	f000 faa2 	bl	8003724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80031e6:	f107 0308 	add.w	r3, r7, #8
 80031ea:	4619      	mov	r1, r3
 80031ec:	480c      	ldr	r0, [pc, #48]	; (8003220 <MX_TIM4_Init+0x90>)
 80031ee:	f003 fc4d 	bl	8006a8c <HAL_TIM_ConfigClockSource>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80031f8:	f000 fa94 	bl	8003724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031fc:	2300      	movs	r3, #0
 80031fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003200:	2300      	movs	r3, #0
 8003202:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003204:	463b      	mov	r3, r7
 8003206:	4619      	mov	r1, r3
 8003208:	4805      	ldr	r0, [pc, #20]	; (8003220 <MX_TIM4_Init+0x90>)
 800320a:	f003 fe21 	bl	8006e50 <HAL_TIMEx_MasterConfigSynchronization>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003214:	f000 fa86 	bl	8003724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003218:	bf00      	nop
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	20007324 	.word	0x20007324
 8003224:	40000800 	.word	0x40000800

08003228 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	607b      	str	r3, [r7, #4]
 8003232:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <MX_DMA_Init+0x3c>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	4a0b      	ldr	r2, [pc, #44]	; (8003264 <MX_DMA_Init+0x3c>)
 8003238:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800323c:	6313      	str	r3, [r2, #48]	; 0x30
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <MX_DMA_Init+0x3c>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003246:	607b      	str	r3, [r7, #4]
 8003248:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800324a:	2200      	movs	r2, #0
 800324c:	2100      	movs	r1, #0
 800324e:	2038      	movs	r0, #56	; 0x38
 8003250:	f001 fa29 	bl	80046a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003254:	2038      	movs	r0, #56	; 0x38
 8003256:	f001 fa42 	bl	80046de <HAL_NVIC_EnableIRQ>

}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800

08003268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800326e:	f107 030c 	add.w	r3, r7, #12
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	605a      	str	r2, [r3, #4]
 8003278:	609a      	str	r2, [r3, #8]
 800327a:	60da      	str	r2, [r3, #12]
 800327c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	4b35      	ldr	r3, [pc, #212]	; (8003358 <MX_GPIO_Init+0xf0>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	4a34      	ldr	r2, [pc, #208]	; (8003358 <MX_GPIO_Init+0xf0>)
 8003288:	f043 0304 	orr.w	r3, r3, #4
 800328c:	6313      	str	r3, [r2, #48]	; 0x30
 800328e:	4b32      	ldr	r3, [pc, #200]	; (8003358 <MX_GPIO_Init+0xf0>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	607b      	str	r3, [r7, #4]
 800329e:	4b2e      	ldr	r3, [pc, #184]	; (8003358 <MX_GPIO_Init+0xf0>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	4a2d      	ldr	r2, [pc, #180]	; (8003358 <MX_GPIO_Init+0xf0>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	6313      	str	r3, [r2, #48]	; 0x30
 80032aa:	4b2b      	ldr	r3, [pc, #172]	; (8003358 <MX_GPIO_Init+0xf0>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	607b      	str	r3, [r7, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	4b27      	ldr	r3, [pc, #156]	; (8003358 <MX_GPIO_Init+0xf0>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	4a26      	ldr	r2, [pc, #152]	; (8003358 <MX_GPIO_Init+0xf0>)
 80032c0:	f043 0302 	orr.w	r3, r3, #2
 80032c4:	6313      	str	r3, [r2, #48]	; 0x30
 80032c6:	4b24      	ldr	r3, [pc, #144]	; (8003358 <MX_GPIO_Init+0xf0>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_SCK_Pin|DEMP1_Pin|DEMP0_Pin|FMT_Pin, GPIO_PIN_RESET);
 80032d2:	2200      	movs	r2, #0
 80032d4:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 80032d8:	4820      	ldr	r0, [pc, #128]	; (800335c <MX_GPIO_Init+0xf4>)
 80032da:	f001 ff0f 	bl	80050fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUTE_GPIO_Port, MUTE_Pin, GPIO_PIN_RESET);
 80032de:	2200      	movs	r2, #0
 80032e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032e4:	481e      	ldr	r0, [pc, #120]	; (8003360 <MX_GPIO_Init+0xf8>)
 80032e6:	f001 ff09 	bl	80050fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_MCU0_Pin|nRST_DSP0_Pin|nRST_DSP1_Pin|nRST_DSP2_Pin, GPIO_PIN_RESET);
 80032ea:	2200      	movs	r2, #0
 80032ec:	f44f 714c 	mov.w	r1, #816	; 0x330
 80032f0:	481c      	ldr	r0, [pc, #112]	; (8003364 <MX_GPIO_Init+0xfc>)
 80032f2:	f001 ff03 	bl	80050fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_SCK_Pin DEMP1_Pin DEMP0_Pin FMT_Pin */
  GPIO_InitStruct.Pin = EN_SCK_Pin|DEMP1_Pin|DEMP0_Pin|FMT_Pin;
 80032f6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80032fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032fc:	2301      	movs	r3, #1
 80032fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003304:	2300      	movs	r3, #0
 8003306:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003308:	f107 030c 	add.w	r3, r7, #12
 800330c:	4619      	mov	r1, r3
 800330e:	4813      	ldr	r0, [pc, #76]	; (800335c <MX_GPIO_Init+0xf4>)
 8003310:	f001 fd70 	bl	8004df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MUTE_Pin */
  GPIO_InitStruct.Pin = MUTE_Pin;
 8003314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003318:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800331a:	2301      	movs	r3, #1
 800331c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003322:	2300      	movs	r3, #0
 8003324:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MUTE_GPIO_Port, &GPIO_InitStruct);
 8003326:	f107 030c 	add.w	r3, r7, #12
 800332a:	4619      	mov	r1, r3
 800332c:	480c      	ldr	r0, [pc, #48]	; (8003360 <MX_GPIO_Init+0xf8>)
 800332e:	f001 fd61 	bl	8004df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_MCU0_Pin nRST_DSP0_Pin nRST_DSP1_Pin nRST_DSP2_Pin */
  GPIO_InitStruct.Pin = GPIO_MCU0_Pin|nRST_DSP0_Pin|nRST_DSP1_Pin|nRST_DSP2_Pin;
 8003332:	f44f 734c 	mov.w	r3, #816	; 0x330
 8003336:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003338:	2301      	movs	r3, #1
 800333a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003340:	2300      	movs	r3, #0
 8003342:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003344:	f107 030c 	add.w	r3, r7, #12
 8003348:	4619      	mov	r1, r3
 800334a:	4806      	ldr	r0, [pc, #24]	; (8003364 <MX_GPIO_Init+0xfc>)
 800334c:	f001 fd52 	bl	8004df4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003350:	bf00      	nop
 8003352:	3720      	adds	r7, #32
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40023800 	.word	0x40023800
 800335c:	40020800 	.word	0x40020800
 8003360:	40020000 	.word	0x40020000
 8003364:	40020400 	.word	0x40020400

08003368 <SIGMA_WRITE_REGISTER_BLOCK>:

/* USER CODE BEGIN 4 */
void SIGMA_WRITE_REGISTER_BLOCK(uint16_t devAddress, uint16_t address, uint16_t length, uint8_t *pData)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af04      	add	r7, sp, #16
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	4603      	mov	r3, r0
 8003372:	81fb      	strh	r3, [r7, #14]
 8003374:	460b      	mov	r3, r1
 8003376:	81bb      	strh	r3, [r7, #12]
 8003378:	4613      	mov	r3, r2
 800337a:	817b      	strh	r3, [r7, #10]
	stat = HAL_I2C_Mem_Write(&hi2c1, devAddress, address, 2, pData, length, 1000);
 800337c:	89ba      	ldrh	r2, [r7, #12]
 800337e:	89f9      	ldrh	r1, [r7, #14]
 8003380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003384:	9302      	str	r3, [sp, #8]
 8003386:	897b      	ldrh	r3, [r7, #10]
 8003388:	9301      	str	r3, [sp, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	2302      	movs	r3, #2
 8003390:	4805      	ldr	r0, [pc, #20]	; (80033a8 <SIGMA_WRITE_REGISTER_BLOCK+0x40>)
 8003392:	f002 f811 	bl	80053b8 <HAL_I2C_Mem_Write>
 8003396:	4603      	mov	r3, r0
 8003398:	461a      	mov	r2, r3
 800339a:	4b04      	ldr	r3, [pc, #16]	; (80033ac <SIGMA_WRITE_REGISTER_BLOCK+0x44>)
 800339c:	701a      	strb	r2, [r3, #0]
}
 800339e:	bf00      	nop
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	200071e0 	.word	0x200071e0
 80033ac:	2000736c 	.word	0x2000736c

080033b0 <SIGMA_WRITE_DELAY>:

void SIGMA_WRITE_DELAY(uint16_t devAddress, uint16_t length, uint8_t *pData)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	603a      	str	r2, [r7, #0]
 80033ba:	80fb      	strh	r3, [r7, #6]
 80033bc:	460b      	mov	r3, r1
 80033be:	80bb      	strh	r3, [r7, #4]
	HAL_Delay(11);
 80033c0:	200b      	movs	r0, #11
 80033c2:	f000 fc89 	bl	8003cd8 <HAL_Delay>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
	uint32_t j = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	613b      	str	r3, [r7, #16]
	uint32_t k = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]


	for(k=VOL_SUB; k<ADC_POT; k++) // For volume, loud low, loud high, loud general
 80033e4:	230a      	movs	r3, #10
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	e080      	b.n	80034ec <HAL_ADC_ConvCpltCallback+0x11c>
	{
		for(i=0; i<30; i++)
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	e077      	b.n	80034e0 <HAL_ADC_ConvCpltCallback+0x110>
		{
			if((i == 0) && (value[k] < (linear_in_table[i+1])-15))
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d11f      	bne.n	8003436 <HAL_ADC_ConvCpltCallback+0x66>
 80033f6:	4a88      	ldr	r2, [pc, #544]	; (8003618 <HAL_ADC_ConvCpltCallback+0x248>)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	3201      	adds	r2, #1
 8003402:	4986      	ldr	r1, [pc, #536]	; (800361c <HAL_ADC_ConvCpltCallback+0x24c>)
 8003404:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003408:	3a0f      	subs	r2, #15
 800340a:	4293      	cmp	r3, r2
 800340c:	d213      	bcs.n	8003436 <HAL_ADC_ConvCpltCallback+0x66>
			{
				if(pote[k] != i)
 800340e:	4a84      	ldr	r2, [pc, #528]	; (8003620 <HAL_ADC_ConvCpltCallback+0x250>)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003416:	461a      	mov	r2, r3
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	4293      	cmp	r3, r2
 800341c:	d05d      	beq.n	80034da <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	b299      	uxth	r1, r3
 8003422:	4a7f      	ldr	r2, [pc, #508]	; (8003620 <HAL_ADC_ConvCpltCallback+0x250>)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 800342a:	4a7e      	ldr	r2, [pc, #504]	; (8003624 <HAL_ADC_ConvCpltCallback+0x254>)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2101      	movs	r1, #1
 8003430:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[k] != i)
 8003434:	e051      	b.n	80034da <HAL_ADC_ConvCpltCallback+0x10a>
				}
			}
			else if((i > 0) && (i < 29) && (value[k] > (linear_in_table[i]+15)) && (value[k] < (linear_in_table[i+1])-15))
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d02d      	beq.n	8003498 <HAL_ADC_ConvCpltCallback+0xc8>
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b1c      	cmp	r3, #28
 8003440:	d82a      	bhi.n	8003498 <HAL_ADC_ConvCpltCallback+0xc8>
 8003442:	4a75      	ldr	r2, [pc, #468]	; (8003618 <HAL_ADC_ConvCpltCallback+0x248>)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344a:	4974      	ldr	r1, [pc, #464]	; (800361c <HAL_ADC_ConvCpltCallback+0x24c>)
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003452:	320f      	adds	r2, #15
 8003454:	4293      	cmp	r3, r2
 8003456:	d91f      	bls.n	8003498 <HAL_ADC_ConvCpltCallback+0xc8>
 8003458:	4a6f      	ldr	r2, [pc, #444]	; (8003618 <HAL_ADC_ConvCpltCallback+0x248>)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	3201      	adds	r2, #1
 8003464:	496d      	ldr	r1, [pc, #436]	; (800361c <HAL_ADC_ConvCpltCallback+0x24c>)
 8003466:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800346a:	3a0f      	subs	r2, #15
 800346c:	4293      	cmp	r3, r2
 800346e:	d213      	bcs.n	8003498 <HAL_ADC_ConvCpltCallback+0xc8>
			{
				if(pote[k] != i)
 8003470:	4a6b      	ldr	r2, [pc, #428]	; (8003620 <HAL_ADC_ConvCpltCallback+0x250>)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003478:	461a      	mov	r2, r3
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	4293      	cmp	r3, r2
 800347e:	d02c      	beq.n	80034da <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	b299      	uxth	r1, r3
 8003484:	4a66      	ldr	r2, [pc, #408]	; (8003620 <HAL_ADC_ConvCpltCallback+0x250>)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 800348c:	4a65      	ldr	r2, [pc, #404]	; (8003624 <HAL_ADC_ConvCpltCallback+0x254>)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2101      	movs	r1, #1
 8003492:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[k] != i)
 8003496:	e020      	b.n	80034da <HAL_ADC_ConvCpltCallback+0x10a>
				}
			}
			else if((i == 29) && (value[k] > (linear_in_table[i]+15)))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2b1d      	cmp	r3, #29
 800349c:	d11d      	bne.n	80034da <HAL_ADC_ConvCpltCallback+0x10a>
 800349e:	4a5e      	ldr	r2, [pc, #376]	; (8003618 <HAL_ADC_ConvCpltCallback+0x248>)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a6:	495d      	ldr	r1, [pc, #372]	; (800361c <HAL_ADC_ConvCpltCallback+0x24c>)
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80034ae:	320f      	adds	r2, #15
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d912      	bls.n	80034da <HAL_ADC_ConvCpltCallback+0x10a>
			{
				if(pote[k] != i)
 80034b4:	4a5a      	ldr	r2, [pc, #360]	; (8003620 <HAL_ADC_ConvCpltCallback+0x250>)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034bc:	461a      	mov	r2, r3
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00a      	beq.n	80034da <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	b299      	uxth	r1, r3
 80034c8:	4a55      	ldr	r2, [pc, #340]	; (8003620 <HAL_ADC_ConvCpltCallback+0x250>)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 80034d0:	4a54      	ldr	r2, [pc, #336]	; (8003624 <HAL_ADC_ConvCpltCallback+0x254>)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2101      	movs	r1, #1
 80034d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0; i<30; i++)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	3301      	adds	r3, #1
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b1d      	cmp	r3, #29
 80034e4:	d984      	bls.n	80033f0 <HAL_ADC_ConvCpltCallback+0x20>
	for(k=VOL_SUB; k<ADC_POT; k++) // For volume, loud low, loud high, loud general
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3301      	adds	r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b0e      	cmp	r3, #14
 80034f0:	f67f af7b 	bls.w	80033ea <HAL_ADC_ConvCpltCallback+0x1a>
			}
		}
	}


	for(j=0; j<10; j++) // For filter 32Hz - 16KHz
 80034f4:	2300      	movs	r3, #0
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	e080      	b.n	80035fc <HAL_ADC_ConvCpltCallback+0x22c>
	{
		for(i=0; i<30; i++)
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	e077      	b.n	80035f0 <HAL_ADC_ConvCpltCallback+0x220>
		{
			if((i == 0) && (value[j] < (log_in_table[i+1])-15))
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d11f      	bne.n	8003546 <HAL_ADC_ConvCpltCallback+0x176>
 8003506:	4a44      	ldr	r2, [pc, #272]	; (8003618 <HAL_ADC_ConvCpltCallback+0x248>)
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	3201      	adds	r2, #1
 8003512:	4945      	ldr	r1, [pc, #276]	; (8003628 <HAL_ADC_ConvCpltCallback+0x258>)
 8003514:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003518:	3a0f      	subs	r2, #15
 800351a:	4293      	cmp	r3, r2
 800351c:	d213      	bcs.n	8003546 <HAL_ADC_ConvCpltCallback+0x176>
			{
				if(pote[j] != i)
 800351e:	4a40      	ldr	r2, [pc, #256]	; (8003620 <HAL_ADC_ConvCpltCallback+0x250>)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003526:	461a      	mov	r2, r3
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	4293      	cmp	r3, r2
 800352c:	d05d      	beq.n	80035ea <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	b299      	uxth	r1, r3
 8003532:	4a3b      	ldr	r2, [pc, #236]	; (8003620 <HAL_ADC_ConvCpltCallback+0x250>)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 800353a:	4a3a      	ldr	r2, [pc, #232]	; (8003624 <HAL_ADC_ConvCpltCallback+0x254>)
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	2101      	movs	r1, #1
 8003540:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[j] != i)
 8003544:	e051      	b.n	80035ea <HAL_ADC_ConvCpltCallback+0x21a>
				}
			}
			else if((i > 0) && (i < 29) && (value[j] > (log_in_table[i]+15)) && (value[j] < (log_in_table[i+1])-15))
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d02d      	beq.n	80035a8 <HAL_ADC_ConvCpltCallback+0x1d8>
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2b1c      	cmp	r3, #28
 8003550:	d82a      	bhi.n	80035a8 <HAL_ADC_ConvCpltCallback+0x1d8>
 8003552:	4a31      	ldr	r2, [pc, #196]	; (8003618 <HAL_ADC_ConvCpltCallback+0x248>)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355a:	4933      	ldr	r1, [pc, #204]	; (8003628 <HAL_ADC_ConvCpltCallback+0x258>)
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003562:	320f      	adds	r2, #15
 8003564:	4293      	cmp	r3, r2
 8003566:	d91f      	bls.n	80035a8 <HAL_ADC_ConvCpltCallback+0x1d8>
 8003568:	4a2b      	ldr	r2, [pc, #172]	; (8003618 <HAL_ADC_ConvCpltCallback+0x248>)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	3201      	adds	r2, #1
 8003574:	492c      	ldr	r1, [pc, #176]	; (8003628 <HAL_ADC_ConvCpltCallback+0x258>)
 8003576:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800357a:	3a0f      	subs	r2, #15
 800357c:	4293      	cmp	r3, r2
 800357e:	d213      	bcs.n	80035a8 <HAL_ADC_ConvCpltCallback+0x1d8>
			{
				if(pote[j] != i)
 8003580:	4a27      	ldr	r2, [pc, #156]	; (8003620 <HAL_ADC_ConvCpltCallback+0x250>)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003588:	461a      	mov	r2, r3
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	4293      	cmp	r3, r2
 800358e:	d02c      	beq.n	80035ea <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	b299      	uxth	r1, r3
 8003594:	4a22      	ldr	r2, [pc, #136]	; (8003620 <HAL_ADC_ConvCpltCallback+0x250>)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 800359c:	4a21      	ldr	r2, [pc, #132]	; (8003624 <HAL_ADC_ConvCpltCallback+0x254>)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	2101      	movs	r1, #1
 80035a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[j] != i)
 80035a6:	e020      	b.n	80035ea <HAL_ADC_ConvCpltCallback+0x21a>
				}
			}
			else if((i == 29) && (value[j] > (log_in_table[i]+15)))
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b1d      	cmp	r3, #29
 80035ac:	d11d      	bne.n	80035ea <HAL_ADC_ConvCpltCallback+0x21a>
 80035ae:	4a1a      	ldr	r2, [pc, #104]	; (8003618 <HAL_ADC_ConvCpltCallback+0x248>)
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b6:	491c      	ldr	r1, [pc, #112]	; (8003628 <HAL_ADC_ConvCpltCallback+0x258>)
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80035be:	320f      	adds	r2, #15
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d912      	bls.n	80035ea <HAL_ADC_ConvCpltCallback+0x21a>
			{
				if(pote[j] != i)
 80035c4:	4a16      	ldr	r2, [pc, #88]	; (8003620 <HAL_ADC_ConvCpltCallback+0x250>)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035cc:	461a      	mov	r2, r3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00a      	beq.n	80035ea <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	b299      	uxth	r1, r3
 80035d8:	4a11      	ldr	r2, [pc, #68]	; (8003620 <HAL_ADC_ConvCpltCallback+0x250>)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 80035e0:	4a10      	ldr	r2, [pc, #64]	; (8003624 <HAL_ADC_ConvCpltCallback+0x254>)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	2101      	movs	r1, #1
 80035e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0; i<30; i++)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	3301      	adds	r3, #1
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2b1d      	cmp	r3, #29
 80035f4:	d984      	bls.n	8003500 <HAL_ADC_ConvCpltCallback+0x130>
	for(j=0; j<10; j++) // For filter 32Hz - 16KHz
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	3301      	adds	r3, #1
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2b09      	cmp	r3, #9
 8003600:	f67f af7b 	bls.w	80034fa <HAL_ADC_ConvCpltCallback+0x12a>
			}
		}

	}

	update = 1;
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_ADC_ConvCpltCallback+0x25c>)
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	20007374 	.word	0x20007374
 800361c:	2000740c 	.word	0x2000740c
 8003620:	200073b0 	.word	0x200073b0
 8003624:	20007448 	.word	0x20007448
 8003628:	200073d0 	.word	0x200073d0
 800362c:	20007466 	.word	0x20007466

08003630 <delay_us>:
void delay_us(uint16_t us)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	80fb      	strh	r3, [r7, #6]
	htim4.Instance->CNT = 0;
 800363a:	4b09      	ldr	r3, [pc, #36]	; (8003660 <delay_us+0x30>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2200      	movs	r2, #0
 8003640:	625a      	str	r2, [r3, #36]	; 0x24
	while((htim4.Instance->CNT) < us);
 8003642:	bf00      	nop
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <delay_us+0x30>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	429a      	cmp	r2, r3
 800364e:	d3f9      	bcc.n	8003644 <delay_us+0x14>
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20007324 	.word	0x20007324

08003664 <Safeload_Write>:
void Safeload_Write(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
	SIGMA_WRITE_REGISTER_BLOCK(DSP0_ADDR, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 8003668:	4b2a      	ldr	r3, [pc, #168]	; (8003714 <Safeload_Write+0xb0>)
 800366a:	2204      	movs	r2, #4
 800366c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003670:	2070      	movs	r0, #112	; 0x70
 8003672:	f7ff fe79 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK(DSP0_ADDR, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 8003676:	4b28      	ldr	r3, [pc, #160]	; (8003718 <Safeload_Write+0xb4>)
 8003678:	2204      	movs	r2, #4
 800367a:	f246 0105 	movw	r1, #24581	; 0x6005
 800367e:	2070      	movs	r0, #112	; 0x70
 8003680:	f7ff fe72 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK(DSP0_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_LOWER_ADDR, 4, num_SafeLoad_Lower);
 8003684:	4b25      	ldr	r3, [pc, #148]	; (800371c <Safeload_Write+0xb8>)
 8003686:	2204      	movs	r2, #4
 8003688:	f246 0106 	movw	r1, #24582	; 0x6006
 800368c:	2070      	movs	r0, #112	; 0x70
 800368e:	f7ff fe6b 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
    SIGMA_WRITE_REGISTER_BLOCK(DSP0_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_UPPER_ADDR, 4, num_SafeLoad_Upper);
 8003692:	4b23      	ldr	r3, [pc, #140]	; (8003720 <Safeload_Write+0xbc>)
 8003694:	2204      	movs	r2, #4
 8003696:	f246 0107 	movw	r1, #24583	; 0x6007
 800369a:	2070      	movs	r0, #112	; 0x70
 800369c:	f7ff fe64 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>

	SIGMA_WRITE_REGISTER_BLOCK(DSP1_ADDR, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 80036a0:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <Safeload_Write+0xb0>)
 80036a2:	2204      	movs	r2, #4
 80036a4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80036a8:	2072      	movs	r0, #114	; 0x72
 80036aa:	f7ff fe5d 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK(DSP1_ADDR, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 80036ae:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <Safeload_Write+0xb4>)
 80036b0:	2204      	movs	r2, #4
 80036b2:	f246 0105 	movw	r1, #24581	; 0x6005
 80036b6:	2072      	movs	r0, #114	; 0x72
 80036b8:	f7ff fe56 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK(DSP1_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_LOWER_ADDR, 4, num_SafeLoad_Lower);
 80036bc:	4b17      	ldr	r3, [pc, #92]	; (800371c <Safeload_Write+0xb8>)
 80036be:	2204      	movs	r2, #4
 80036c0:	f246 0106 	movw	r1, #24582	; 0x6006
 80036c4:	2072      	movs	r0, #114	; 0x72
 80036c6:	f7ff fe4f 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
    SIGMA_WRITE_REGISTER_BLOCK(DSP1_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_UPPER_ADDR, 4, num_SafeLoad_Upper);
 80036ca:	4b15      	ldr	r3, [pc, #84]	; (8003720 <Safeload_Write+0xbc>)
 80036cc:	2204      	movs	r2, #4
 80036ce:	f246 0107 	movw	r1, #24583	; 0x6007
 80036d2:	2072      	movs	r0, #114	; 0x72
 80036d4:	f7ff fe48 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>

	SIGMA_WRITE_REGISTER_BLOCK(DSP2_ADDR, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 80036d8:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <Safeload_Write+0xb0>)
 80036da:	2204      	movs	r2, #4
 80036dc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80036e0:	2074      	movs	r0, #116	; 0x74
 80036e2:	f7ff fe41 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK(DSP2_ADDR, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 80036e6:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <Safeload_Write+0xb4>)
 80036e8:	2204      	movs	r2, #4
 80036ea:	f246 0105 	movw	r1, #24581	; 0x6005
 80036ee:	2074      	movs	r0, #116	; 0x74
 80036f0:	f7ff fe3a 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK(DSP2_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_LOWER_ADDR, 4, num_SafeLoad_Lower);
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <Safeload_Write+0xb8>)
 80036f6:	2204      	movs	r2, #4
 80036f8:	f246 0106 	movw	r1, #24582	; 0x6006
 80036fc:	2074      	movs	r0, #116	; 0x74
 80036fe:	f7ff fe33 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
    SIGMA_WRITE_REGISTER_BLOCK(DSP2_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_UPPER_ADDR, 4, num_SafeLoad_Upper);
 8003702:	4b07      	ldr	r3, [pc, #28]	; (8003720 <Safeload_Write+0xbc>)
 8003704:	2204      	movs	r2, #4
 8003706:	f246 0107 	movw	r1, #24583	; 0x6007
 800370a:	2074      	movs	r0, #116	; 0x74
 800370c:	f7ff fe2c 	bl	8003368 <SIGMA_WRITE_REGISTER_BLOCK>
}
 8003710:	bf00      	nop
 8003712:	bd80      	pop	{r7, pc}
 8003714:	2000746c 	.word	0x2000746c
 8003718:	20007470 	.word	0x20007470
 800371c:	20007474 	.word	0x20007474
 8003720:	20007478 	.word	0x20007478

08003724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003728:	b672      	cpsid	i
}
 800372a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800372c:	e7fe      	b.n	800372c <Error_Handler+0x8>
	...

08003730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_MspInit+0x4c>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	4a0f      	ldr	r2, [pc, #60]	; (800377c <HAL_MspInit+0x4c>)
 8003740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003744:	6453      	str	r3, [r2, #68]	; 0x44
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <HAL_MspInit+0x4c>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	4b09      	ldr	r3, [pc, #36]	; (800377c <HAL_MspInit+0x4c>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	4a08      	ldr	r2, [pc, #32]	; (800377c <HAL_MspInit+0x4c>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003760:	6413      	str	r3, [r2, #64]	; 0x40
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_MspInit+0x4c>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800

08003780 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08c      	sub	sp, #48	; 0x30
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003788:	f107 031c 	add.w	r3, r7, #28
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a49      	ldr	r2, [pc, #292]	; (80038c4 <HAL_ADC_MspInit+0x144>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	f040 808c 	bne.w	80038bc <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037a4:	2300      	movs	r3, #0
 80037a6:	61bb      	str	r3, [r7, #24]
 80037a8:	4b47      	ldr	r3, [pc, #284]	; (80038c8 <HAL_ADC_MspInit+0x148>)
 80037aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ac:	4a46      	ldr	r2, [pc, #280]	; (80038c8 <HAL_ADC_MspInit+0x148>)
 80037ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b2:	6453      	str	r3, [r2, #68]	; 0x44
 80037b4:	4b44      	ldr	r3, [pc, #272]	; (80038c8 <HAL_ADC_MspInit+0x148>)
 80037b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	4b40      	ldr	r3, [pc, #256]	; (80038c8 <HAL_ADC_MspInit+0x148>)
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	4a3f      	ldr	r2, [pc, #252]	; (80038c8 <HAL_ADC_MspInit+0x148>)
 80037ca:	f043 0304 	orr.w	r3, r3, #4
 80037ce:	6313      	str	r3, [r2, #48]	; 0x30
 80037d0:	4b3d      	ldr	r3, [pc, #244]	; (80038c8 <HAL_ADC_MspInit+0x148>)
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037dc:	2300      	movs	r3, #0
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	4b39      	ldr	r3, [pc, #228]	; (80038c8 <HAL_ADC_MspInit+0x148>)
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	4a38      	ldr	r2, [pc, #224]	; (80038c8 <HAL_ADC_MspInit+0x148>)
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	6313      	str	r3, [r2, #48]	; 0x30
 80037ec:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <HAL_ADC_MspInit+0x148>)
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	4b32      	ldr	r3, [pc, #200]	; (80038c8 <HAL_ADC_MspInit+0x148>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	4a31      	ldr	r2, [pc, #196]	; (80038c8 <HAL_ADC_MspInit+0x148>)
 8003802:	f043 0302 	orr.w	r3, r3, #2
 8003806:	6313      	str	r3, [r2, #48]	; 0x30
 8003808:	4b2f      	ldr	r3, [pc, #188]	; (80038c8 <HAL_ADC_MspInit+0x148>)
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003814:	231f      	movs	r3, #31
 8003816:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003818:	2303      	movs	r3, #3
 800381a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	2300      	movs	r3, #0
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003820:	f107 031c 	add.w	r3, r7, #28
 8003824:	4619      	mov	r1, r3
 8003826:	4829      	ldr	r0, [pc, #164]	; (80038cc <HAL_ADC_MspInit+0x14c>)
 8003828:	f001 fae4 	bl	8004df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800382c:	23ff      	movs	r3, #255	; 0xff
 800382e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003830:	2303      	movs	r3, #3
 8003832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2300      	movs	r3, #0
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003838:	f107 031c 	add.w	r3, r7, #28
 800383c:	4619      	mov	r1, r3
 800383e:	4824      	ldr	r0, [pc, #144]	; (80038d0 <HAL_ADC_MspInit+0x150>)
 8003840:	f001 fad8 	bl	8004df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003844:	2303      	movs	r3, #3
 8003846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003848:	2303      	movs	r3, #3
 800384a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384c:	2300      	movs	r3, #0
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003850:	f107 031c 	add.w	r3, r7, #28
 8003854:	4619      	mov	r1, r3
 8003856:	481f      	ldr	r0, [pc, #124]	; (80038d4 <HAL_ADC_MspInit+0x154>)
 8003858:	f001 facc 	bl	8004df4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800385c:	4b1e      	ldr	r3, [pc, #120]	; (80038d8 <HAL_ADC_MspInit+0x158>)
 800385e:	4a1f      	ldr	r2, [pc, #124]	; (80038dc <HAL_ADC_MspInit+0x15c>)
 8003860:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003862:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <HAL_ADC_MspInit+0x158>)
 8003864:	2200      	movs	r2, #0
 8003866:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003868:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <HAL_ADC_MspInit+0x158>)
 800386a:	2200      	movs	r2, #0
 800386c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800386e:	4b1a      	ldr	r3, [pc, #104]	; (80038d8 <HAL_ADC_MspInit+0x158>)
 8003870:	2200      	movs	r2, #0
 8003872:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003874:	4b18      	ldr	r3, [pc, #96]	; (80038d8 <HAL_ADC_MspInit+0x158>)
 8003876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800387a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800387c:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <HAL_ADC_MspInit+0x158>)
 800387e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003882:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003884:	4b14      	ldr	r3, [pc, #80]	; (80038d8 <HAL_ADC_MspInit+0x158>)
 8003886:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800388a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800388c:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <HAL_ADC_MspInit+0x158>)
 800388e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003892:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003894:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <HAL_ADC_MspInit+0x158>)
 8003896:	2200      	movs	r2, #0
 8003898:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800389a:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <HAL_ADC_MspInit+0x158>)
 800389c:	2200      	movs	r2, #0
 800389e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80038a0:	480d      	ldr	r0, [pc, #52]	; (80038d8 <HAL_ADC_MspInit+0x158>)
 80038a2:	f000 ff37 	bl	8004714 <HAL_DMA_Init>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80038ac:	f7ff ff3a 	bl	8003724 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a09      	ldr	r2, [pc, #36]	; (80038d8 <HAL_ADC_MspInit+0x158>)
 80038b4:	639a      	str	r2, [r3, #56]	; 0x38
 80038b6:	4a08      	ldr	r2, [pc, #32]	; (80038d8 <HAL_ADC_MspInit+0x158>)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80038bc:	bf00      	nop
 80038be:	3730      	adds	r7, #48	; 0x30
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40012000 	.word	0x40012000
 80038c8:	40023800 	.word	0x40023800
 80038cc:	40020800 	.word	0x40020800
 80038d0:	40020000 	.word	0x40020000
 80038d4:	40020400 	.word	0x40020400
 80038d8:	20007180 	.word	0x20007180
 80038dc:	40026410 	.word	0x40026410

080038e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08e      	sub	sp, #56	; 0x38
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a63      	ldr	r2, [pc, #396]	; (8003a8c <HAL_I2C_MspInit+0x1ac>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d12c      	bne.n	800395c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	623b      	str	r3, [r7, #32]
 8003906:	4b62      	ldr	r3, [pc, #392]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	4a61      	ldr	r2, [pc, #388]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 800390c:	f043 0302 	orr.w	r3, r3, #2
 8003910:	6313      	str	r3, [r2, #48]	; 0x30
 8003912:	4b5f      	ldr	r3, [pc, #380]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	623b      	str	r3, [r7, #32]
 800391c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800391e:	23c0      	movs	r3, #192	; 0xc0
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003922:	2312      	movs	r3, #18
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003926:	2300      	movs	r3, #0
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392a:	2303      	movs	r3, #3
 800392c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800392e:	2304      	movs	r3, #4
 8003930:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003936:	4619      	mov	r1, r3
 8003938:	4856      	ldr	r0, [pc, #344]	; (8003a94 <HAL_I2C_MspInit+0x1b4>)
 800393a:	f001 fa5b 	bl	8004df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	4b53      	ldr	r3, [pc, #332]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	4a52      	ldr	r2, [pc, #328]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 8003948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800394c:	6413      	str	r3, [r2, #64]	; 0x40
 800394e:	4b50      	ldr	r3, [pc, #320]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003956:	61fb      	str	r3, [r7, #28]
 8003958:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800395a:	e093      	b.n	8003a84 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a4d      	ldr	r2, [pc, #308]	; (8003a98 <HAL_I2C_MspInit+0x1b8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d13d      	bne.n	80039e2 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	4b49      	ldr	r3, [pc, #292]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	4a48      	ldr	r2, [pc, #288]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 8003970:	f043 0302 	orr.w	r3, r3, #2
 8003974:	6313      	str	r3, [r2, #48]	; 0x30
 8003976:	4b46      	ldr	r3, [pc, #280]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003988:	2312      	movs	r3, #18
 800398a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003990:	2303      	movs	r3, #3
 8003992:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003994:	2304      	movs	r3, #4
 8003996:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800399c:	4619      	mov	r1, r3
 800399e:	483d      	ldr	r0, [pc, #244]	; (8003a94 <HAL_I2C_MspInit+0x1b4>)
 80039a0:	f001 fa28 	bl	8004df4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80039a4:	2308      	movs	r3, #8
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039a8:	2312      	movs	r3, #18
 80039aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b0:	2303      	movs	r3, #3
 80039b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80039b4:	2309      	movs	r3, #9
 80039b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039bc:	4619      	mov	r1, r3
 80039be:	4835      	ldr	r0, [pc, #212]	; (8003a94 <HAL_I2C_MspInit+0x1b4>)
 80039c0:	f001 fa18 	bl	8004df4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	4b31      	ldr	r3, [pc, #196]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	4a30      	ldr	r2, [pc, #192]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 80039ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039d2:	6413      	str	r3, [r2, #64]	; 0x40
 80039d4:	4b2e      	ldr	r3, [pc, #184]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	697b      	ldr	r3, [r7, #20]
}
 80039e0:	e050      	b.n	8003a84 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a2d      	ldr	r2, [pc, #180]	; (8003a9c <HAL_I2C_MspInit+0x1bc>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d14b      	bne.n	8003a84 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	4b27      	ldr	r3, [pc, #156]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	4a26      	ldr	r2, [pc, #152]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 80039f6:	f043 0304 	orr.w	r3, r3, #4
 80039fa:	6313      	str	r3, [r2, #48]	; 0x30
 80039fc:	4b24      	ldr	r3, [pc, #144]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	4b20      	ldr	r3, [pc, #128]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	4a1f      	ldr	r2, [pc, #124]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	6313      	str	r3, [r2, #48]	; 0x30
 8003a18:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a2a:	2312      	movs	r3, #18
 8003a2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a32:	2303      	movs	r3, #3
 8003a34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003a36:	2304      	movs	r3, #4
 8003a38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4817      	ldr	r0, [pc, #92]	; (8003aa0 <HAL_I2C_MspInit+0x1c0>)
 8003a42:	f001 f9d7 	bl	8004df4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a4c:	2312      	movs	r3, #18
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a54:	2303      	movs	r3, #3
 8003a56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003a58:	2304      	movs	r3, #4
 8003a5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a60:	4619      	mov	r1, r3
 8003a62:	4810      	ldr	r0, [pc, #64]	; (8003aa4 <HAL_I2C_MspInit+0x1c4>)
 8003a64:	f001 f9c6 	bl	8004df4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60bb      	str	r3, [r7, #8]
 8003a6c:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	4a07      	ldr	r2, [pc, #28]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 8003a72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a76:	6413      	str	r3, [r2, #64]	; 0x40
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_I2C_MspInit+0x1b0>)
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	68bb      	ldr	r3, [r7, #8]
}
 8003a84:	bf00      	nop
 8003a86:	3738      	adds	r7, #56	; 0x38
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40005400 	.word	0x40005400
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40020400 	.word	0x40020400
 8003a98:	40005800 	.word	0x40005800
 8003a9c:	40005c00 	.word	0x40005c00
 8003aa0:	40020800 	.word	0x40020800
 8003aa4:	40020000 	.word	0x40020000

08003aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab8:	d10e      	bne.n	8003ad8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <HAL_TIM_Base_MspInit+0x64>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	4a12      	ldr	r2, [pc, #72]	; (8003b0c <HAL_TIM_Base_MspInit+0x64>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aca:	4b10      	ldr	r3, [pc, #64]	; (8003b0c <HAL_TIM_Base_MspInit+0x64>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003ad6:	e012      	b.n	8003afe <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a0c      	ldr	r2, [pc, #48]	; (8003b10 <HAL_TIM_Base_MspInit+0x68>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d10d      	bne.n	8003afe <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <HAL_TIM_Base_MspInit+0x64>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	4a08      	ldr	r2, [pc, #32]	; (8003b0c <HAL_TIM_Base_MspInit+0x64>)
 8003aec:	f043 0304 	orr.w	r3, r3, #4
 8003af0:	6413      	str	r3, [r2, #64]	; 0x40
 8003af2:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <HAL_TIM_Base_MspInit+0x64>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	60bb      	str	r3, [r7, #8]
 8003afc:	68bb      	ldr	r3, [r7, #8]
}
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	40000800 	.word	0x40000800

08003b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b18:	e7fe      	b.n	8003b18 <NMI_Handler+0x4>

08003b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b1e:	e7fe      	b.n	8003b1e <HardFault_Handler+0x4>

08003b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b24:	e7fe      	b.n	8003b24 <MemManage_Handler+0x4>

08003b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b26:	b480      	push	{r7}
 8003b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b2a:	e7fe      	b.n	8003b2a <BusFault_Handler+0x4>

08003b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b30:	e7fe      	b.n	8003b30 <UsageFault_Handler+0x4>

08003b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b52:	bf00      	nop
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b60:	f000 f89a 	bl	8003c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b64:	bf00      	nop
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b6c:	4802      	ldr	r0, [pc, #8]	; (8003b78 <DMA2_Stream0_IRQHandler+0x10>)
 8003b6e:	f000 fed7 	bl	8004920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20007180 	.word	0x20007180

08003b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b80:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <SystemInit+0x20>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	4a05      	ldr	r2, [pc, #20]	; (8003b9c <SystemInit+0x20>)
 8003b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	e000ed00 	.word	0xe000ed00

08003ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ba4:	480d      	ldr	r0, [pc, #52]	; (8003bdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ba6:	490e      	ldr	r1, [pc, #56]	; (8003be0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ba8:	4a0e      	ldr	r2, [pc, #56]	; (8003be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bac:	e002      	b.n	8003bb4 <LoopCopyDataInit>

08003bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bb2:	3304      	adds	r3, #4

08003bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bb8:	d3f9      	bcc.n	8003bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bba:	4a0b      	ldr	r2, [pc, #44]	; (8003be8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003bbc:	4c0b      	ldr	r4, [pc, #44]	; (8003bec <LoopFillZerobss+0x26>)
  movs r3, #0
 8003bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bc0:	e001      	b.n	8003bc6 <LoopFillZerobss>

08003bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bc4:	3204      	adds	r2, #4

08003bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bc8:	d3fb      	bcc.n	8003bc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003bca:	f7ff ffd7 	bl	8003b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bce:	f003 f9bb 	bl	8006f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bd2:	f7fd fbb7 	bl	8001344 <main>
  bx  lr    
 8003bd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bd8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003be0:	200070fc 	.word	0x200070fc
  ldr r2, =_sidata
 8003be4:	080074f8 	.word	0x080074f8
  ldr r2, =_sbss
 8003be8:	200070fc 	.word	0x200070fc
  ldr r4, =_ebss
 8003bec:	200075b8 	.word	0x200075b8

08003bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bf0:	e7fe      	b.n	8003bf0 <ADC_IRQHandler>
	...

08003bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bf8:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <HAL_Init+0x40>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a0d      	ldr	r2, [pc, #52]	; (8003c34 <HAL_Init+0x40>)
 8003bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c04:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <HAL_Init+0x40>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a0a      	ldr	r2, [pc, #40]	; (8003c34 <HAL_Init+0x40>)
 8003c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c10:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <HAL_Init+0x40>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a07      	ldr	r2, [pc, #28]	; (8003c34 <HAL_Init+0x40>)
 8003c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c1c:	2003      	movs	r0, #3
 8003c1e:	f000 fd37 	bl	8004690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c22:	200f      	movs	r0, #15
 8003c24:	f000 f808 	bl	8003c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c28:	f7ff fd82 	bl	8003730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40023c00 	.word	0x40023c00

08003c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c40:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <HAL_InitTick+0x54>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b12      	ldr	r3, [pc, #72]	; (8003c90 <HAL_InitTick+0x58>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fd4f 	bl	80046fa <HAL_SYSTICK_Config>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e00e      	b.n	8003c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b0f      	cmp	r3, #15
 8003c6a:	d80a      	bhi.n	8003c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	f04f 30ff 	mov.w	r0, #4294967295
 8003c74:	f000 fd17 	bl	80046a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c78:	4a06      	ldr	r2, [pc, #24]	; (8003c94 <HAL_InitTick+0x5c>)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	e000      	b.n	8003c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	200070a0 	.word	0x200070a0
 8003c90:	200070a8 	.word	0x200070a8
 8003c94:	200070a4 	.word	0x200070a4

08003c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <HAL_IncTick+0x20>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <HAL_IncTick+0x24>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <HAL_IncTick+0x24>)
 8003caa:	6013      	str	r3, [r2, #0]
}
 8003cac:	bf00      	nop
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	200070a8 	.word	0x200070a8
 8003cbc:	2000747c 	.word	0x2000747c

08003cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8003cc4:	4b03      	ldr	r3, [pc, #12]	; (8003cd4 <HAL_GetTick+0x14>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	2000747c 	.word	0x2000747c

08003cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ce0:	f7ff ffee 	bl	8003cc0 <HAL_GetTick>
 8003ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf0:	d005      	beq.n	8003cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <HAL_Delay+0x44>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cfe:	bf00      	nop
 8003d00:	f7ff ffde 	bl	8003cc0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d8f7      	bhi.n	8003d00 <HAL_Delay+0x28>
  {
  }
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	200070a8 	.word	0x200070a8

08003d20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e033      	b.n	8003d9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff fd1e 	bl	8003780 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d118      	bne.n	8003d90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d66:	f023 0302 	bic.w	r3, r3, #2
 8003d6a:	f043 0202 	orr.w	r2, r3, #2
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fa3e 	bl	80041f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f023 0303 	bic.w	r3, r3, #3
 8003d86:	f043 0201 	orr.w	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40
 8003d8e:	e001      	b.n	8003d94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_ADC_Start_DMA+0x1e>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e0ce      	b.n	8003f64 <HAL_ADC_Start_DMA+0x1bc>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d018      	beq.n	8003e0e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003dec:	4b5f      	ldr	r3, [pc, #380]	; (8003f6c <HAL_ADC_Start_DMA+0x1c4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a5f      	ldr	r2, [pc, #380]	; (8003f70 <HAL_ADC_Start_DMA+0x1c8>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	0c9a      	lsrs	r2, r3, #18
 8003df8:	4613      	mov	r3, r2
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	4413      	add	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e00:	e002      	b.n	8003e08 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f9      	bne.n	8003e02 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1c:	d107      	bne.n	8003e2e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	f040 8086 	bne.w	8003f4a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e46:	f023 0301 	bic.w	r3, r3, #1
 8003e4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d007      	beq.n	8003e70 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7c:	d106      	bne.n	8003e8c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	f023 0206 	bic.w	r2, r3, #6
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	645a      	str	r2, [r3, #68]	; 0x44
 8003e8a:	e002      	b.n	8003e92 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e9a:	4b36      	ldr	r3, [pc, #216]	; (8003f74 <HAL_ADC_Start_DMA+0x1cc>)
 8003e9c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	4a35      	ldr	r2, [pc, #212]	; (8003f78 <HAL_ADC_Start_DMA+0x1d0>)
 8003ea4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	4a34      	ldr	r2, [pc, #208]	; (8003f7c <HAL_ADC_Start_DMA+0x1d4>)
 8003eac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	4a33      	ldr	r2, [pc, #204]	; (8003f80 <HAL_ADC_Start_DMA+0x1d8>)
 8003eb4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ebe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003ece:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ede:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	334c      	adds	r3, #76	; 0x4c
 8003eea:	4619      	mov	r1, r3
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f000 fcbe 	bl	8004870 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 031f 	and.w	r3, r3, #31
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10f      	bne.n	8003f20 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d129      	bne.n	8003f62 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f1c:	609a      	str	r2, [r3, #8]
 8003f1e:	e020      	b.n	8003f62 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a17      	ldr	r2, [pc, #92]	; (8003f84 <HAL_ADC_Start_DMA+0x1dc>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d11b      	bne.n	8003f62 <HAL_ADC_Start_DMA+0x1ba>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d114      	bne.n	8003f62 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	e00b      	b.n	8003f62 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f043 0210 	orr.w	r2, r3, #16
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5a:	f043 0201 	orr.w	r2, r3, #1
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	200070a0 	.word	0x200070a0
 8003f70:	431bde83 	.word	0x431bde83
 8003f74:	40012300 	.word	0x40012300
 8003f78:	080043ed 	.word	0x080043ed
 8003f7c:	080044a7 	.word	0x080044a7
 8003f80:	080044c3 	.word	0x080044c3
 8003f84:	40012000 	.word	0x40012000

08003f88 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x1c>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e105      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x228>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b09      	cmp	r3, #9
 8003fda:	d925      	bls.n	8004028 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68d9      	ldr	r1, [r3, #12]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4613      	mov	r3, r2
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	4413      	add	r3, r2
 8003ff0:	3b1e      	subs	r3, #30
 8003ff2:	2207      	movs	r2, #7
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	43da      	mvns	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	400a      	ands	r2, r1
 8004000:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68d9      	ldr	r1, [r3, #12]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	b29b      	uxth	r3, r3
 8004012:	4618      	mov	r0, r3
 8004014:	4603      	mov	r3, r0
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	4403      	add	r3, r0
 800401a:	3b1e      	subs	r3, #30
 800401c:	409a      	lsls	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	60da      	str	r2, [r3, #12]
 8004026:	e022      	b.n	800406e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6919      	ldr	r1, [r3, #16]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	b29b      	uxth	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	4613      	mov	r3, r2
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	4413      	add	r3, r2
 800403c:	2207      	movs	r2, #7
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43da      	mvns	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	400a      	ands	r2, r1
 800404a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6919      	ldr	r1, [r3, #16]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	b29b      	uxth	r3, r3
 800405c:	4618      	mov	r0, r3
 800405e:	4603      	mov	r3, r0
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	4403      	add	r3, r0
 8004064:	409a      	lsls	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b06      	cmp	r3, #6
 8004074:	d824      	bhi.n	80040c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	3b05      	subs	r3, #5
 8004088:	221f      	movs	r2, #31
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	43da      	mvns	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	400a      	ands	r2, r1
 8004096:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	4618      	mov	r0, r3
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	3b05      	subs	r3, #5
 80040b2:	fa00 f203 	lsl.w	r2, r0, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	635a      	str	r2, [r3, #52]	; 0x34
 80040be:	e04c      	b.n	800415a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b0c      	cmp	r3, #12
 80040c6:	d824      	bhi.n	8004112 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	3b23      	subs	r3, #35	; 0x23
 80040da:	221f      	movs	r2, #31
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43da      	mvns	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	400a      	ands	r2, r1
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	4618      	mov	r0, r3
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	3b23      	subs	r3, #35	; 0x23
 8004104:	fa00 f203 	lsl.w	r2, r0, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	631a      	str	r2, [r3, #48]	; 0x30
 8004110:	e023      	b.n	800415a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	3b41      	subs	r3, #65	; 0x41
 8004124:	221f      	movs	r2, #31
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43da      	mvns	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	400a      	ands	r2, r1
 8004132:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	b29b      	uxth	r3, r3
 8004140:	4618      	mov	r0, r3
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	3b41      	subs	r3, #65	; 0x41
 800414e:	fa00 f203 	lsl.w	r2, r0, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800415a:	4b22      	ldr	r3, [pc, #136]	; (80041e4 <HAL_ADC_ConfigChannel+0x234>)
 800415c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a21      	ldr	r2, [pc, #132]	; (80041e8 <HAL_ADC_ConfigChannel+0x238>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d109      	bne.n	800417c <HAL_ADC_ConfigChannel+0x1cc>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b12      	cmp	r3, #18
 800416e:	d105      	bne.n	800417c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a19      	ldr	r2, [pc, #100]	; (80041e8 <HAL_ADC_ConfigChannel+0x238>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d123      	bne.n	80041ce <HAL_ADC_ConfigChannel+0x21e>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b10      	cmp	r3, #16
 800418c:	d003      	beq.n	8004196 <HAL_ADC_ConfigChannel+0x1e6>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b11      	cmp	r3, #17
 8004194:	d11b      	bne.n	80041ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b10      	cmp	r3, #16
 80041a8:	d111      	bne.n	80041ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041aa:	4b10      	ldr	r3, [pc, #64]	; (80041ec <HAL_ADC_ConfigChannel+0x23c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a10      	ldr	r2, [pc, #64]	; (80041f0 <HAL_ADC_ConfigChannel+0x240>)
 80041b0:	fba2 2303 	umull	r2, r3, r2, r3
 80041b4:	0c9a      	lsrs	r2, r3, #18
 80041b6:	4613      	mov	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80041c0:	e002      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f9      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	40012300 	.word	0x40012300
 80041e8:	40012000 	.word	0x40012000
 80041ec:	200070a0 	.word	0x200070a0
 80041f0:	431bde83 	.word	0x431bde83

080041f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041fc:	4b79      	ldr	r3, [pc, #484]	; (80043e4 <ADC_Init+0x1f0>)
 80041fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	431a      	orrs	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004228:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6859      	ldr	r1, [r3, #4]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	021a      	lsls	r2, r3, #8
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800424c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6859      	ldr	r1, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800426e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6899      	ldr	r1, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	4a58      	ldr	r2, [pc, #352]	; (80043e8 <ADC_Init+0x1f4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d022      	beq.n	80042d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800429a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6899      	ldr	r1, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6899      	ldr	r1, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	609a      	str	r2, [r3, #8]
 80042d0:	e00f      	b.n	80042f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0202 	bic.w	r2, r2, #2
 8004300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6899      	ldr	r1, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	7e1b      	ldrb	r3, [r3, #24]
 800430c:	005a      	lsls	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3020 	ldrb.w	r3, [r3, #32]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01b      	beq.n	8004358 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800432e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800433e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6859      	ldr	r1, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	3b01      	subs	r3, #1
 800434c:	035a      	lsls	r2, r3, #13
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
 8004356:	e007      	b.n	8004368 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004366:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004376:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	3b01      	subs	r3, #1
 8004384:	051a      	lsls	r2, r3, #20
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800439c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6899      	ldr	r1, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043aa:	025a      	lsls	r2, r3, #9
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6899      	ldr	r1, [r3, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	029a      	lsls	r2, r3, #10
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	609a      	str	r2, [r3, #8]
}
 80043d8:	bf00      	nop
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	40012300 	.word	0x40012300
 80043e8:	0f000001 	.word	0x0f000001

080043ec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004402:	2b00      	cmp	r3, #0
 8004404:	d13c      	bne.n	8004480 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d12b      	bne.n	8004478 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004424:	2b00      	cmp	r3, #0
 8004426:	d127      	bne.n	8004478 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004432:	2b00      	cmp	r3, #0
 8004434:	d006      	beq.n	8004444 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004440:	2b00      	cmp	r3, #0
 8004442:	d119      	bne.n	8004478 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0220 	bic.w	r2, r2, #32
 8004452:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	f043 0201 	orr.w	r2, r3, #1
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f7fe ffa9 	bl	80033d0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800447e:	e00e      	b.n	800449e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f7ff fd85 	bl	8003f9c <HAL_ADC_ErrorCallback>
}
 8004492:	e004      	b.n	800449e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	4798      	blx	r3
}
 800449e:	bf00      	nop
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b084      	sub	sp, #16
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7ff fd67 	bl	8003f88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2240      	movs	r2, #64	; 0x40
 80044d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	f043 0204 	orr.w	r2, r3, #4
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f7ff fd5a 	bl	8003f9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <__NVIC_SetPriorityGrouping+0x44>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800450c:	4013      	ands	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800451c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004522:	4a04      	ldr	r2, [pc, #16]	; (8004534 <__NVIC_SetPriorityGrouping+0x44>)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	60d3      	str	r3, [r2, #12]
}
 8004528:	bf00      	nop
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800453c:	4b04      	ldr	r3, [pc, #16]	; (8004550 <__NVIC_GetPriorityGrouping+0x18>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	0a1b      	lsrs	r3, r3, #8
 8004542:	f003 0307 	and.w	r3, r3, #7
}
 8004546:	4618      	mov	r0, r3
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	e000ed00 	.word	0xe000ed00

08004554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004562:	2b00      	cmp	r3, #0
 8004564:	db0b      	blt.n	800457e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	f003 021f 	and.w	r2, r3, #31
 800456c:	4907      	ldr	r1, [pc, #28]	; (800458c <__NVIC_EnableIRQ+0x38>)
 800456e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2001      	movs	r0, #1
 8004576:	fa00 f202 	lsl.w	r2, r0, r2
 800457a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	e000e100 	.word	0xe000e100

08004590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	6039      	str	r1, [r7, #0]
 800459a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800459c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	db0a      	blt.n	80045ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	490c      	ldr	r1, [pc, #48]	; (80045dc <__NVIC_SetPriority+0x4c>)
 80045aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ae:	0112      	lsls	r2, r2, #4
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	440b      	add	r3, r1
 80045b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045b8:	e00a      	b.n	80045d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	4908      	ldr	r1, [pc, #32]	; (80045e0 <__NVIC_SetPriority+0x50>)
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	3b04      	subs	r3, #4
 80045c8:	0112      	lsls	r2, r2, #4
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	440b      	add	r3, r1
 80045ce:	761a      	strb	r2, [r3, #24]
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	e000e100 	.word	0xe000e100
 80045e0:	e000ed00 	.word	0xe000ed00

080045e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b089      	sub	sp, #36	; 0x24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f1c3 0307 	rsb	r3, r3, #7
 80045fe:	2b04      	cmp	r3, #4
 8004600:	bf28      	it	cs
 8004602:	2304      	movcs	r3, #4
 8004604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3304      	adds	r3, #4
 800460a:	2b06      	cmp	r3, #6
 800460c:	d902      	bls.n	8004614 <NVIC_EncodePriority+0x30>
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	3b03      	subs	r3, #3
 8004612:	e000      	b.n	8004616 <NVIC_EncodePriority+0x32>
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004618:	f04f 32ff 	mov.w	r2, #4294967295
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43da      	mvns	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	401a      	ands	r2, r3
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800462c:	f04f 31ff 	mov.w	r1, #4294967295
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	fa01 f303 	lsl.w	r3, r1, r3
 8004636:	43d9      	mvns	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800463c:	4313      	orrs	r3, r2
         );
}
 800463e:	4618      	mov	r0, r3
 8004640:	3724      	adds	r7, #36	; 0x24
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
	...

0800464c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3b01      	subs	r3, #1
 8004658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800465c:	d301      	bcc.n	8004662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800465e:	2301      	movs	r3, #1
 8004660:	e00f      	b.n	8004682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004662:	4a0a      	ldr	r2, [pc, #40]	; (800468c <SysTick_Config+0x40>)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3b01      	subs	r3, #1
 8004668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800466a:	210f      	movs	r1, #15
 800466c:	f04f 30ff 	mov.w	r0, #4294967295
 8004670:	f7ff ff8e 	bl	8004590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <SysTick_Config+0x40>)
 8004676:	2200      	movs	r2, #0
 8004678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800467a:	4b04      	ldr	r3, [pc, #16]	; (800468c <SysTick_Config+0x40>)
 800467c:	2207      	movs	r2, #7
 800467e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	e000e010 	.word	0xe000e010

08004690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7ff ff29 	bl	80044f0 <__NVIC_SetPriorityGrouping>
}
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b086      	sub	sp, #24
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	4603      	mov	r3, r0
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	607a      	str	r2, [r7, #4]
 80046b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046b8:	f7ff ff3e 	bl	8004538 <__NVIC_GetPriorityGrouping>
 80046bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	6978      	ldr	r0, [r7, #20]
 80046c4:	f7ff ff8e 	bl	80045e4 <NVIC_EncodePriority>
 80046c8:	4602      	mov	r2, r0
 80046ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ff5d 	bl	8004590 <__NVIC_SetPriority>
}
 80046d6:	bf00      	nop
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	4603      	mov	r3, r0
 80046e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff ff31 	bl	8004554 <__NVIC_EnableIRQ>
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff ffa2 	bl	800464c <SysTick_Config>
 8004708:	4603      	mov	r3, r0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004720:	f7ff face 	bl	8003cc0 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e099      	b.n	8004864 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0201 	bic.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004750:	e00f      	b.n	8004772 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004752:	f7ff fab5 	bl	8003cc0 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b05      	cmp	r3, #5
 800475e:	d908      	bls.n	8004772 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2203      	movs	r2, #3
 800476a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e078      	b.n	8004864 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1e8      	bne.n	8004752 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4b38      	ldr	r3, [pc, #224]	; (800486c <HAL_DMA_Init+0x158>)
 800478c:	4013      	ands	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800479e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d107      	bne.n	80047dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	4313      	orrs	r3, r2
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f023 0307 	bic.w	r3, r3, #7
 80047f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	2b04      	cmp	r3, #4
 8004804:	d117      	bne.n	8004836 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	4313      	orrs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00e      	beq.n	8004836 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fa6f 	bl	8004cfc <DMA_CheckFifoParam>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2240      	movs	r2, #64	; 0x40
 8004828:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004832:	2301      	movs	r3, #1
 8004834:	e016      	b.n	8004864 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fa26 	bl	8004c90 <DMA_CalcBaseAndBitshift>
 8004844:	4603      	mov	r3, r0
 8004846:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484c:	223f      	movs	r2, #63	; 0x3f
 800484e:	409a      	lsls	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	f010803f 	.word	0xf010803f

08004870 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004886:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_DMA_Start_IT+0x26>
 8004892:	2302      	movs	r3, #2
 8004894:	e040      	b.n	8004918 <HAL_DMA_Start_IT+0xa8>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d12f      	bne.n	800490a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2202      	movs	r2, #2
 80048ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 f9b8 	bl	8004c34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c8:	223f      	movs	r2, #63	; 0x3f
 80048ca:	409a      	lsls	r2, r3
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0216 	orr.w	r2, r2, #22
 80048de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d007      	beq.n	80048f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0208 	orr.w	r2, r2, #8
 80048f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	e005      	b.n	8004916 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004912:	2302      	movs	r3, #2
 8004914:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004916:	7dfb      	ldrb	r3, [r7, #23]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800492c:	4b8e      	ldr	r3, [pc, #568]	; (8004b68 <HAL_DMA_IRQHandler+0x248>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a8e      	ldr	r2, [pc, #568]	; (8004b6c <HAL_DMA_IRQHandler+0x24c>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	0a9b      	lsrs	r3, r3, #10
 8004938:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494a:	2208      	movs	r2, #8
 800494c:	409a      	lsls	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4013      	ands	r3, r2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d01a      	beq.n	800498c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d013      	beq.n	800498c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0204 	bic.w	r2, r2, #4
 8004972:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004978:	2208      	movs	r2, #8
 800497a:	409a      	lsls	r2, r3
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004984:	f043 0201 	orr.w	r2, r3, #1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004990:	2201      	movs	r2, #1
 8004992:	409a      	lsls	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4013      	ands	r3, r2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d012      	beq.n	80049c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00b      	beq.n	80049c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ae:	2201      	movs	r2, #1
 80049b0:	409a      	lsls	r2, r3
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ba:	f043 0202 	orr.w	r2, r3, #2
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c6:	2204      	movs	r2, #4
 80049c8:	409a      	lsls	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d012      	beq.n	80049f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00b      	beq.n	80049f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e4:	2204      	movs	r2, #4
 80049e6:	409a      	lsls	r2, r3
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f0:	f043 0204 	orr.w	r2, r3, #4
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fc:	2210      	movs	r2, #16
 80049fe:	409a      	lsls	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4013      	ands	r3, r2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d043      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d03c      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1a:	2210      	movs	r2, #16
 8004a1c:	409a      	lsls	r2, r3
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d018      	beq.n	8004a62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d108      	bne.n	8004a50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d024      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	4798      	blx	r3
 8004a4e:	e01f      	b.n	8004a90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01b      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	4798      	blx	r3
 8004a60:	e016      	b.n	8004a90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d107      	bne.n	8004a80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0208 	bic.w	r2, r2, #8
 8004a7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a94:	2220      	movs	r2, #32
 8004a96:	409a      	lsls	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 808f 	beq.w	8004bc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0310 	and.w	r3, r3, #16
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8087 	beq.w	8004bc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	409a      	lsls	r2, r3
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b05      	cmp	r3, #5
 8004ac8:	d136      	bne.n	8004b38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0216 	bic.w	r2, r2, #22
 8004ad8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695a      	ldr	r2, [r3, #20]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ae8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d103      	bne.n	8004afa <HAL_DMA_IRQHandler+0x1da>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0208 	bic.w	r2, r2, #8
 8004b08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0e:	223f      	movs	r2, #63	; 0x3f
 8004b10:	409a      	lsls	r2, r3
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d07e      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	4798      	blx	r3
        }
        return;
 8004b36:	e079      	b.n	8004c2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d01d      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10d      	bne.n	8004b70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d031      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	4798      	blx	r3
 8004b64:	e02c      	b.n	8004bc0 <HAL_DMA_IRQHandler+0x2a0>
 8004b66:	bf00      	nop
 8004b68:	200070a0 	.word	0x200070a0
 8004b6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d023      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	4798      	blx	r3
 8004b80:	e01e      	b.n	8004bc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10f      	bne.n	8004bb0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0210 	bic.w	r2, r2, #16
 8004b9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d032      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d022      	beq.n	8004c1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2205      	movs	r2, #5
 8004bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0201 	bic.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	60bb      	str	r3, [r7, #8]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d307      	bcc.n	8004c08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f2      	bne.n	8004bec <HAL_DMA_IRQHandler+0x2cc>
 8004c06:	e000      	b.n	8004c0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	4798      	blx	r3
 8004c2a:	e000      	b.n	8004c2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c2c:	bf00      	nop
    }
  }
}
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b40      	cmp	r3, #64	; 0x40
 8004c60:	d108      	bne.n	8004c74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c72:	e007      	b.n	8004c84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	60da      	str	r2, [r3, #12]
}
 8004c84:	bf00      	nop
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	3b10      	subs	r3, #16
 8004ca0:	4a14      	ldr	r2, [pc, #80]	; (8004cf4 <DMA_CalcBaseAndBitshift+0x64>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	091b      	lsrs	r3, r3, #4
 8004ca8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004caa:	4a13      	ldr	r2, [pc, #76]	; (8004cf8 <DMA_CalcBaseAndBitshift+0x68>)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4413      	add	r3, r2
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d909      	bls.n	8004cd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cc6:	f023 0303 	bic.w	r3, r3, #3
 8004cca:	1d1a      	adds	r2, r3, #4
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	659a      	str	r2, [r3, #88]	; 0x58
 8004cd0:	e007      	b.n	8004ce2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cda:	f023 0303 	bic.w	r3, r3, #3
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	aaaaaaab 	.word	0xaaaaaaab
 8004cf8:	080074dc 	.word	0x080074dc

08004cfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d11f      	bne.n	8004d56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d856      	bhi.n	8004dca <DMA_CheckFifoParam+0xce>
 8004d1c:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <DMA_CheckFifoParam+0x28>)
 8004d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d22:	bf00      	nop
 8004d24:	08004d35 	.word	0x08004d35
 8004d28:	08004d47 	.word	0x08004d47
 8004d2c:	08004d35 	.word	0x08004d35
 8004d30:	08004dcb 	.word	0x08004dcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d046      	beq.n	8004dce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d44:	e043      	b.n	8004dce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d4e:	d140      	bne.n	8004dd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d54:	e03d      	b.n	8004dd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d5e:	d121      	bne.n	8004da4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b03      	cmp	r3, #3
 8004d64:	d837      	bhi.n	8004dd6 <DMA_CheckFifoParam+0xda>
 8004d66:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <DMA_CheckFifoParam+0x70>)
 8004d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6c:	08004d7d 	.word	0x08004d7d
 8004d70:	08004d83 	.word	0x08004d83
 8004d74:	08004d7d 	.word	0x08004d7d
 8004d78:	08004d95 	.word	0x08004d95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d80:	e030      	b.n	8004de4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d025      	beq.n	8004dda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d92:	e022      	b.n	8004dda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d9c:	d11f      	bne.n	8004dde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004da2:	e01c      	b.n	8004dde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d903      	bls.n	8004db2 <DMA_CheckFifoParam+0xb6>
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d003      	beq.n	8004db8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004db0:	e018      	b.n	8004de4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
      break;
 8004db6:	e015      	b.n	8004de4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00e      	beq.n	8004de2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc8:	e00b      	b.n	8004de2 <DMA_CheckFifoParam+0xe6>
      break;
 8004dca:	bf00      	nop
 8004dcc:	e00a      	b.n	8004de4 <DMA_CheckFifoParam+0xe8>
      break;
 8004dce:	bf00      	nop
 8004dd0:	e008      	b.n	8004de4 <DMA_CheckFifoParam+0xe8>
      break;
 8004dd2:	bf00      	nop
 8004dd4:	e006      	b.n	8004de4 <DMA_CheckFifoParam+0xe8>
      break;
 8004dd6:	bf00      	nop
 8004dd8:	e004      	b.n	8004de4 <DMA_CheckFifoParam+0xe8>
      break;
 8004dda:	bf00      	nop
 8004ddc:	e002      	b.n	8004de4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004dde:	bf00      	nop
 8004de0:	e000      	b.n	8004de4 <DMA_CheckFifoParam+0xe8>
      break;
 8004de2:	bf00      	nop
    }
  } 
  
  return status; 
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop

08004df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b089      	sub	sp, #36	; 0x24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61fb      	str	r3, [r7, #28]
 8004e0e:	e159      	b.n	80050c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e10:	2201      	movs	r2, #1
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	4013      	ands	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	f040 8148 	bne.w	80050be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d005      	beq.n	8004e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d130      	bne.n	8004ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	2203      	movs	r2, #3
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	43db      	mvns	r3, r3
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	43db      	mvns	r3, r3
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	091b      	lsrs	r3, r3, #4
 8004e92:	f003 0201 	and.w	r2, r3, #1
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d017      	beq.n	8004ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f003 0303 	and.w	r3, r3, #3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d123      	bne.n	8004f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	08da      	lsrs	r2, r3, #3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3208      	adds	r2, #8
 8004ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	220f      	movs	r2, #15
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4013      	ands	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	08da      	lsrs	r2, r3, #3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3208      	adds	r2, #8
 8004f32:	69b9      	ldr	r1, [r7, #24]
 8004f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	2203      	movs	r2, #3
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f003 0203 	and.w	r2, r3, #3
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80a2 	beq.w	80050be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	4b57      	ldr	r3, [pc, #348]	; (80050dc <HAL_GPIO_Init+0x2e8>)
 8004f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f82:	4a56      	ldr	r2, [pc, #344]	; (80050dc <HAL_GPIO_Init+0x2e8>)
 8004f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f88:	6453      	str	r3, [r2, #68]	; 0x44
 8004f8a:	4b54      	ldr	r3, [pc, #336]	; (80050dc <HAL_GPIO_Init+0x2e8>)
 8004f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f96:	4a52      	ldr	r2, [pc, #328]	; (80050e0 <HAL_GPIO_Init+0x2ec>)
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	089b      	lsrs	r3, r3, #2
 8004f9c:	3302      	adds	r3, #2
 8004f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	220f      	movs	r2, #15
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a49      	ldr	r2, [pc, #292]	; (80050e4 <HAL_GPIO_Init+0x2f0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d019      	beq.n	8004ff6 <HAL_GPIO_Init+0x202>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a48      	ldr	r2, [pc, #288]	; (80050e8 <HAL_GPIO_Init+0x2f4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d013      	beq.n	8004ff2 <HAL_GPIO_Init+0x1fe>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a47      	ldr	r2, [pc, #284]	; (80050ec <HAL_GPIO_Init+0x2f8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00d      	beq.n	8004fee <HAL_GPIO_Init+0x1fa>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a46      	ldr	r2, [pc, #280]	; (80050f0 <HAL_GPIO_Init+0x2fc>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d007      	beq.n	8004fea <HAL_GPIO_Init+0x1f6>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a45      	ldr	r2, [pc, #276]	; (80050f4 <HAL_GPIO_Init+0x300>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d101      	bne.n	8004fe6 <HAL_GPIO_Init+0x1f2>
 8004fe2:	2304      	movs	r3, #4
 8004fe4:	e008      	b.n	8004ff8 <HAL_GPIO_Init+0x204>
 8004fe6:	2307      	movs	r3, #7
 8004fe8:	e006      	b.n	8004ff8 <HAL_GPIO_Init+0x204>
 8004fea:	2303      	movs	r3, #3
 8004fec:	e004      	b.n	8004ff8 <HAL_GPIO_Init+0x204>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e002      	b.n	8004ff8 <HAL_GPIO_Init+0x204>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e000      	b.n	8004ff8 <HAL_GPIO_Init+0x204>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	f002 0203 	and.w	r2, r2, #3
 8004ffe:	0092      	lsls	r2, r2, #2
 8005000:	4093      	lsls	r3, r2
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4313      	orrs	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005008:	4935      	ldr	r1, [pc, #212]	; (80050e0 <HAL_GPIO_Init+0x2ec>)
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	089b      	lsrs	r3, r3, #2
 800500e:	3302      	adds	r3, #2
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005016:	4b38      	ldr	r3, [pc, #224]	; (80050f8 <HAL_GPIO_Init+0x304>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	43db      	mvns	r3, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	4013      	ands	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800503a:	4a2f      	ldr	r2, [pc, #188]	; (80050f8 <HAL_GPIO_Init+0x304>)
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005040:	4b2d      	ldr	r3, [pc, #180]	; (80050f8 <HAL_GPIO_Init+0x304>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	43db      	mvns	r3, r3
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	4013      	ands	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	4313      	orrs	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005064:	4a24      	ldr	r2, [pc, #144]	; (80050f8 <HAL_GPIO_Init+0x304>)
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800506a:	4b23      	ldr	r3, [pc, #140]	; (80050f8 <HAL_GPIO_Init+0x304>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	43db      	mvns	r3, r3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4013      	ands	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800508e:	4a1a      	ldr	r2, [pc, #104]	; (80050f8 <HAL_GPIO_Init+0x304>)
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005094:	4b18      	ldr	r3, [pc, #96]	; (80050f8 <HAL_GPIO_Init+0x304>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	43db      	mvns	r3, r3
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	4013      	ands	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050b8:	4a0f      	ldr	r2, [pc, #60]	; (80050f8 <HAL_GPIO_Init+0x304>)
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	3301      	adds	r3, #1
 80050c2:	61fb      	str	r3, [r7, #28]
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	2b0f      	cmp	r3, #15
 80050c8:	f67f aea2 	bls.w	8004e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050cc:	bf00      	nop
 80050ce:	bf00      	nop
 80050d0:	3724      	adds	r7, #36	; 0x24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40023800 	.word	0x40023800
 80050e0:	40013800 	.word	0x40013800
 80050e4:	40020000 	.word	0x40020000
 80050e8:	40020400 	.word	0x40020400
 80050ec:	40020800 	.word	0x40020800
 80050f0:	40020c00 	.word	0x40020c00
 80050f4:	40021000 	.word	0x40021000
 80050f8:	40013c00 	.word	0x40013c00

080050fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	807b      	strh	r3, [r7, #2]
 8005108:	4613      	mov	r3, r2
 800510a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800510c:	787b      	ldrb	r3, [r7, #1]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005112:	887a      	ldrh	r2, [r7, #2]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005118:	e003      	b.n	8005122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800511a:	887b      	ldrh	r3, [r7, #2]
 800511c:	041a      	lsls	r2, r3, #16
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	619a      	str	r2, [r3, #24]
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e12b      	b.n	800539a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fe fbc2 	bl	80038e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2224      	movs	r2, #36	; 0x24
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0201 	bic.w	r2, r2, #1
 8005172:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005182:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005192:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005194:	f001 fbbc 	bl	8006910 <HAL_RCC_GetPCLK1Freq>
 8005198:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	4a81      	ldr	r2, [pc, #516]	; (80053a4 <HAL_I2C_Init+0x274>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d807      	bhi.n	80051b4 <HAL_I2C_Init+0x84>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4a80      	ldr	r2, [pc, #512]	; (80053a8 <HAL_I2C_Init+0x278>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	bf94      	ite	ls
 80051ac:	2301      	movls	r3, #1
 80051ae:	2300      	movhi	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	e006      	b.n	80051c2 <HAL_I2C_Init+0x92>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4a7d      	ldr	r2, [pc, #500]	; (80053ac <HAL_I2C_Init+0x27c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	bf94      	ite	ls
 80051bc:	2301      	movls	r3, #1
 80051be:	2300      	movhi	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e0e7      	b.n	800539a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4a78      	ldr	r2, [pc, #480]	; (80053b0 <HAL_I2C_Init+0x280>)
 80051ce:	fba2 2303 	umull	r2, r3, r2, r3
 80051d2:	0c9b      	lsrs	r3, r3, #18
 80051d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	4a6a      	ldr	r2, [pc, #424]	; (80053a4 <HAL_I2C_Init+0x274>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d802      	bhi.n	8005204 <HAL_I2C_Init+0xd4>
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	3301      	adds	r3, #1
 8005202:	e009      	b.n	8005218 <HAL_I2C_Init+0xe8>
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800520a:	fb02 f303 	mul.w	r3, r2, r3
 800520e:	4a69      	ldr	r2, [pc, #420]	; (80053b4 <HAL_I2C_Init+0x284>)
 8005210:	fba2 2303 	umull	r2, r3, r2, r3
 8005214:	099b      	lsrs	r3, r3, #6
 8005216:	3301      	adds	r3, #1
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6812      	ldr	r2, [r2, #0]
 800521c:	430b      	orrs	r3, r1
 800521e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800522a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	495c      	ldr	r1, [pc, #368]	; (80053a4 <HAL_I2C_Init+0x274>)
 8005234:	428b      	cmp	r3, r1
 8005236:	d819      	bhi.n	800526c <HAL_I2C_Init+0x13c>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	1e59      	subs	r1, r3, #1
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	fbb1 f3f3 	udiv	r3, r1, r3
 8005246:	1c59      	adds	r1, r3, #1
 8005248:	f640 73fc 	movw	r3, #4092	; 0xffc
 800524c:	400b      	ands	r3, r1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <HAL_I2C_Init+0x138>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	1e59      	subs	r1, r3, #1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005260:	3301      	adds	r3, #1
 8005262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005266:	e051      	b.n	800530c <HAL_I2C_Init+0x1dc>
 8005268:	2304      	movs	r3, #4
 800526a:	e04f      	b.n	800530c <HAL_I2C_Init+0x1dc>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d111      	bne.n	8005298 <HAL_I2C_Init+0x168>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	1e58      	subs	r0, r3, #1
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6859      	ldr	r1, [r3, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	440b      	add	r3, r1
 8005282:	fbb0 f3f3 	udiv	r3, r0, r3
 8005286:	3301      	adds	r3, #1
 8005288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800528c:	2b00      	cmp	r3, #0
 800528e:	bf0c      	ite	eq
 8005290:	2301      	moveq	r3, #1
 8005292:	2300      	movne	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	e012      	b.n	80052be <HAL_I2C_Init+0x18e>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	1e58      	subs	r0, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6859      	ldr	r1, [r3, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	0099      	lsls	r1, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ae:	3301      	adds	r3, #1
 80052b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	bf0c      	ite	eq
 80052b8:	2301      	moveq	r3, #1
 80052ba:	2300      	movne	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <HAL_I2C_Init+0x196>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e022      	b.n	800530c <HAL_I2C_Init+0x1dc>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10e      	bne.n	80052ec <HAL_I2C_Init+0x1bc>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1e58      	subs	r0, r3, #1
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6859      	ldr	r1, [r3, #4]
 80052d6:	460b      	mov	r3, r1
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	440b      	add	r3, r1
 80052dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80052e0:	3301      	adds	r3, #1
 80052e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ea:	e00f      	b.n	800530c <HAL_I2C_Init+0x1dc>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	1e58      	subs	r0, r3, #1
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6859      	ldr	r1, [r3, #4]
 80052f4:	460b      	mov	r3, r1
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	0099      	lsls	r1, r3, #2
 80052fc:	440b      	add	r3, r1
 80052fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005302:	3301      	adds	r3, #1
 8005304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005308:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	6809      	ldr	r1, [r1, #0]
 8005310:	4313      	orrs	r3, r2
 8005312:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	69da      	ldr	r2, [r3, #28]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800533a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6911      	ldr	r1, [r2, #16]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	68d2      	ldr	r2, [r2, #12]
 8005346:	4311      	orrs	r1, r2
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6812      	ldr	r2, [r2, #0]
 800534c:	430b      	orrs	r3, r1
 800534e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695a      	ldr	r2, [r3, #20]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0201 	orr.w	r2, r2, #1
 800537a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2220      	movs	r2, #32
 8005386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	000186a0 	.word	0x000186a0
 80053a8:	001e847f 	.word	0x001e847f
 80053ac:	003d08ff 	.word	0x003d08ff
 80053b0:	431bde83 	.word	0x431bde83
 80053b4:	10624dd3 	.word	0x10624dd3

080053b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af02      	add	r7, sp, #8
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	4608      	mov	r0, r1
 80053c2:	4611      	mov	r1, r2
 80053c4:	461a      	mov	r2, r3
 80053c6:	4603      	mov	r3, r0
 80053c8:	817b      	strh	r3, [r7, #10]
 80053ca:	460b      	mov	r3, r1
 80053cc:	813b      	strh	r3, [r7, #8]
 80053ce:	4613      	mov	r3, r2
 80053d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053d2:	f7fe fc75 	bl	8003cc0 <HAL_GetTick>
 80053d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	f040 80d9 	bne.w	8005598 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	2319      	movs	r3, #25
 80053ec:	2201      	movs	r2, #1
 80053ee:	496d      	ldr	r1, [pc, #436]	; (80055a4 <HAL_I2C_Mem_Write+0x1ec>)
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 fc7f 	bl	8005cf4 <I2C_WaitOnFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80053fc:	2302      	movs	r3, #2
 80053fe:	e0cc      	b.n	800559a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_I2C_Mem_Write+0x56>
 800540a:	2302      	movs	r3, #2
 800540c:	e0c5      	b.n	800559a <HAL_I2C_Mem_Write+0x1e2>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b01      	cmp	r3, #1
 8005422:	d007      	beq.n	8005434 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0201 	orr.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005442:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2221      	movs	r2, #33	; 0x21
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2240      	movs	r2, #64	; 0x40
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a3a      	ldr	r2, [r7, #32]
 800545e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005464:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4a4d      	ldr	r2, [pc, #308]	; (80055a8 <HAL_I2C_Mem_Write+0x1f0>)
 8005474:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005476:	88f8      	ldrh	r0, [r7, #6]
 8005478:	893a      	ldrh	r2, [r7, #8]
 800547a:	8979      	ldrh	r1, [r7, #10]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	4603      	mov	r3, r0
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 fab6 	bl	80059f8 <I2C_RequestMemoryWrite>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d052      	beq.n	8005538 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e081      	b.n	800559a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 fd00 	bl	8005ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00d      	beq.n	80054c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d107      	bne.n	80054be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e06b      	b.n	800559a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	781a      	ldrb	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b04      	cmp	r3, #4
 80054fe:	d11b      	bne.n	8005538 <HAL_I2C_Mem_Write+0x180>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005504:	2b00      	cmp	r3, #0
 8005506:	d017      	beq.n	8005538 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	781a      	ldrb	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005522:	3b01      	subs	r3, #1
 8005524:	b29a      	uxth	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800552e:	b29b      	uxth	r3, r3
 8005530:	3b01      	subs	r3, #1
 8005532:	b29a      	uxth	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1aa      	bne.n	8005496 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 fcec 	bl	8005f22 <I2C_WaitOnBTFFlagUntilTimeout>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00d      	beq.n	800556c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005554:	2b04      	cmp	r3, #4
 8005556:	d107      	bne.n	8005568 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005566:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e016      	b.n	800559a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800557a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	e000      	b.n	800559a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005598:	2302      	movs	r3, #2
  }
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	00100002 	.word	0x00100002
 80055a8:	ffff0000 	.word	0xffff0000

080055ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08c      	sub	sp, #48	; 0x30
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	4608      	mov	r0, r1
 80055b6:	4611      	mov	r1, r2
 80055b8:	461a      	mov	r2, r3
 80055ba:	4603      	mov	r3, r0
 80055bc:	817b      	strh	r3, [r7, #10]
 80055be:	460b      	mov	r3, r1
 80055c0:	813b      	strh	r3, [r7, #8]
 80055c2:	4613      	mov	r3, r2
 80055c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055c6:	f7fe fb7b 	bl	8003cc0 <HAL_GetTick>
 80055ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	f040 8208 	bne.w	80059ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	2319      	movs	r3, #25
 80055e0:	2201      	movs	r2, #1
 80055e2:	497b      	ldr	r1, [pc, #492]	; (80057d0 <HAL_I2C_Mem_Read+0x224>)
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 fb85 	bl	8005cf4 <I2C_WaitOnFlagUntilTimeout>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80055f0:	2302      	movs	r3, #2
 80055f2:	e1fb      	b.n	80059ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d101      	bne.n	8005602 <HAL_I2C_Mem_Read+0x56>
 80055fe:	2302      	movs	r3, #2
 8005600:	e1f4      	b.n	80059ec <HAL_I2C_Mem_Read+0x440>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b01      	cmp	r3, #1
 8005616:	d007      	beq.n	8005628 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0201 	orr.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005636:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2222      	movs	r2, #34	; 0x22
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2240      	movs	r2, #64	; 0x40
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005652:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005658:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800565e:	b29a      	uxth	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4a5b      	ldr	r2, [pc, #364]	; (80057d4 <HAL_I2C_Mem_Read+0x228>)
 8005668:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800566a:	88f8      	ldrh	r0, [r7, #6]
 800566c:	893a      	ldrh	r2, [r7, #8]
 800566e:	8979      	ldrh	r1, [r7, #10]
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	4603      	mov	r3, r0
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 fa52 	bl	8005b24 <I2C_RequestMemoryRead>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e1b0      	b.n	80059ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568e:	2b00      	cmp	r3, #0
 8005690:	d113      	bne.n	80056ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005692:	2300      	movs	r3, #0
 8005694:	623b      	str	r3, [r7, #32]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	623b      	str	r3, [r7, #32]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	623b      	str	r3, [r7, #32]
 80056a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	e184      	b.n	80059c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d11b      	bne.n	80056fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056d2:	2300      	movs	r3, #0
 80056d4:	61fb      	str	r3, [r7, #28]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	61fb      	str	r3, [r7, #28]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	61fb      	str	r3, [r7, #28]
 80056e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	e164      	b.n	80059c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d11b      	bne.n	800573a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005710:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005720:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005722:	2300      	movs	r3, #0
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	61bb      	str	r3, [r7, #24]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	61bb      	str	r3, [r7, #24]
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	e144      	b.n	80059c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005750:	e138      	b.n	80059c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005756:	2b03      	cmp	r3, #3
 8005758:	f200 80f1 	bhi.w	800593e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005760:	2b01      	cmp	r3, #1
 8005762:	d123      	bne.n	80057ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005766:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 fc1b 	bl	8005fa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e139      	b.n	80059ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005794:	3b01      	subs	r3, #1
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	3b01      	subs	r3, #1
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057aa:	e10b      	b.n	80059c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d14e      	bne.n	8005852 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ba:	2200      	movs	r2, #0
 80057bc:	4906      	ldr	r1, [pc, #24]	; (80057d8 <HAL_I2C_Mem_Read+0x22c>)
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 fa98 	bl	8005cf4 <I2C_WaitOnFlagUntilTimeout>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d008      	beq.n	80057dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e10e      	b.n	80059ec <HAL_I2C_Mem_Read+0x440>
 80057ce:	bf00      	nop
 80057d0:	00100002 	.word	0x00100002
 80057d4:	ffff0000 	.word	0xffff0000
 80057d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691a      	ldr	r2, [r3, #16]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b01      	subs	r3, #1
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583a:	3b01      	subs	r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005850:	e0b8      	b.n	80059c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	2200      	movs	r2, #0
 800585a:	4966      	ldr	r1, [pc, #408]	; (80059f4 <HAL_I2C_Mem_Read+0x448>)
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 fa49 	bl	8005cf4 <I2C_WaitOnFlagUntilTimeout>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0bf      	b.n	80059ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800587a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	2200      	movs	r2, #0
 80058b6:	494f      	ldr	r1, [pc, #316]	; (80059f4 <HAL_I2C_Mem_Read+0x448>)
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 fa1b 	bl	8005cf4 <I2C_WaitOnFlagUntilTimeout>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e091      	b.n	80059ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	691a      	ldr	r2, [r3, #16]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005900:	b29b      	uxth	r3, r3
 8005902:	3b01      	subs	r3, #1
 8005904:	b29a      	uxth	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	1c5a      	adds	r2, r3, #1
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005932:	b29b      	uxth	r3, r3
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800593c:	e042      	b.n	80059c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800593e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005940:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 fb2e 	bl	8005fa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e04c      	b.n	80059ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800596e:	3b01      	subs	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b04      	cmp	r3, #4
 8005990:	d118      	bne.n	80059c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f47f aec2 	bne.w	8005752 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	e000      	b.n	80059ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80059ea:	2302      	movs	r3, #2
  }
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3728      	adds	r7, #40	; 0x28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	00010004 	.word	0x00010004

080059f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	4608      	mov	r0, r1
 8005a02:	4611      	mov	r1, r2
 8005a04:	461a      	mov	r2, r3
 8005a06:	4603      	mov	r3, r0
 8005a08:	817b      	strh	r3, [r7, #10]
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	813b      	strh	r3, [r7, #8]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 f960 	bl	8005cf4 <I2C_WaitOnFlagUntilTimeout>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00d      	beq.n	8005a56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a48:	d103      	bne.n	8005a52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e05f      	b.n	8005b16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a56:	897b      	ldrh	r3, [r7, #10]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	6a3a      	ldr	r2, [r7, #32]
 8005a6a:	492d      	ldr	r1, [pc, #180]	; (8005b20 <I2C_RequestMemoryWrite+0x128>)
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f998 	bl	8005da2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e04c      	b.n	8005b16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a94:	6a39      	ldr	r1, [r7, #32]
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 fa02 	bl	8005ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00d      	beq.n	8005abe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d107      	bne.n	8005aba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ab8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e02b      	b.n	8005b16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005abe:	88fb      	ldrh	r3, [r7, #6]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d105      	bne.n	8005ad0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ac4:	893b      	ldrh	r3, [r7, #8]
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	611a      	str	r2, [r3, #16]
 8005ace:	e021      	b.n	8005b14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ad0:	893b      	ldrh	r3, [r7, #8]
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae0:	6a39      	ldr	r1, [r7, #32]
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 f9dc 	bl	8005ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00d      	beq.n	8005b0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d107      	bne.n	8005b06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e005      	b.n	8005b16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b0a:	893b      	ldrh	r3, [r7, #8]
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	00010002 	.word	0x00010002

08005b24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b088      	sub	sp, #32
 8005b28:	af02      	add	r7, sp, #8
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	4608      	mov	r0, r1
 8005b2e:	4611      	mov	r1, r2
 8005b30:	461a      	mov	r2, r3
 8005b32:	4603      	mov	r3, r0
 8005b34:	817b      	strh	r3, [r7, #10]
 8005b36:	460b      	mov	r3, r1
 8005b38:	813b      	strh	r3, [r7, #8]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 f8c2 	bl	8005cf4 <I2C_WaitOnFlagUntilTimeout>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00d      	beq.n	8005b92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b84:	d103      	bne.n	8005b8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e0aa      	b.n	8005ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b92:	897b      	ldrh	r3, [r7, #10]
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ba0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	6a3a      	ldr	r2, [r7, #32]
 8005ba6:	4952      	ldr	r1, [pc, #328]	; (8005cf0 <I2C_RequestMemoryRead+0x1cc>)
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 f8fa 	bl	8005da2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e097      	b.n	8005ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bb8:	2300      	movs	r3, #0
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd0:	6a39      	ldr	r1, [r7, #32]
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 f964 	bl	8005ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00d      	beq.n	8005bfa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d107      	bne.n	8005bf6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e076      	b.n	8005ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d105      	bne.n	8005c0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c00:	893b      	ldrh	r3, [r7, #8]
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	611a      	str	r2, [r3, #16]
 8005c0a:	e021      	b.n	8005c50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c0c:	893b      	ldrh	r3, [r7, #8]
 8005c0e:	0a1b      	lsrs	r3, r3, #8
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1c:	6a39      	ldr	r1, [r7, #32]
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 f93e 	bl	8005ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00d      	beq.n	8005c46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d107      	bne.n	8005c42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e050      	b.n	8005ce8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c46:	893b      	ldrh	r3, [r7, #8]
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c52:	6a39      	ldr	r1, [r7, #32]
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 f923 	bl	8005ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00d      	beq.n	8005c7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d107      	bne.n	8005c78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e035      	b.n	8005ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f82b 	bl	8005cf4 <I2C_WaitOnFlagUntilTimeout>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00d      	beq.n	8005cc0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb2:	d103      	bne.n	8005cbc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e013      	b.n	8005ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cc0:	897b      	ldrh	r3, [r7, #10]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	f043 0301 	orr.w	r3, r3, #1
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	6a3a      	ldr	r2, [r7, #32]
 8005cd4:	4906      	ldr	r1, [pc, #24]	; (8005cf0 <I2C_RequestMemoryRead+0x1cc>)
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 f863 	bl	8005da2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e000      	b.n	8005ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	00010002 	.word	0x00010002

08005cf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	4613      	mov	r3, r2
 8005d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d04:	e025      	b.n	8005d52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0c:	d021      	beq.n	8005d52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d0e:	f7fd ffd7 	bl	8003cc0 <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d302      	bcc.n	8005d24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d116      	bne.n	8005d52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	f043 0220 	orr.w	r2, r3, #32
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e023      	b.n	8005d9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	0c1b      	lsrs	r3, r3, #16
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d10d      	bne.n	8005d78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	43da      	mvns	r2, r3
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	4013      	ands	r3, r2
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	bf0c      	ite	eq
 8005d6e:	2301      	moveq	r3, #1
 8005d70:	2300      	movne	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	461a      	mov	r2, r3
 8005d76:	e00c      	b.n	8005d92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	43da      	mvns	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4013      	ands	r3, r2
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	bf0c      	ite	eq
 8005d8a:	2301      	moveq	r3, #1
 8005d8c:	2300      	movne	r3, #0
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	79fb      	ldrb	r3, [r7, #7]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d0b6      	beq.n	8005d06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	607a      	str	r2, [r7, #4]
 8005dae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005db0:	e051      	b.n	8005e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc0:	d123      	bne.n	8005e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005dda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	f043 0204 	orr.w	r2, r3, #4
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e046      	b.n	8005e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e10:	d021      	beq.n	8005e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e12:	f7fd ff55 	bl	8003cc0 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d302      	bcc.n	8005e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d116      	bne.n	8005e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2220      	movs	r2, #32
 8005e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	f043 0220 	orr.w	r2, r3, #32
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e020      	b.n	8005e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	0c1b      	lsrs	r3, r3, #16
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d10c      	bne.n	8005e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	43da      	mvns	r2, r3
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	bf14      	ite	ne
 8005e72:	2301      	movne	r3, #1
 8005e74:	2300      	moveq	r3, #0
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	e00b      	b.n	8005e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	43da      	mvns	r2, r3
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	4013      	ands	r3, r2
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	bf14      	ite	ne
 8005e8c:	2301      	movne	r3, #1
 8005e8e:	2300      	moveq	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d18d      	bne.n	8005db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eac:	e02d      	b.n	8005f0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 f8ce 	bl	8006050 <I2C_IsAcknowledgeFailed>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e02d      	b.n	8005f1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec4:	d021      	beq.n	8005f0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec6:	f7fd fefb 	bl	8003cc0 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d302      	bcc.n	8005edc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d116      	bne.n	8005f0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	f043 0220 	orr.w	r2, r3, #32
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e007      	b.n	8005f1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f14:	2b80      	cmp	r3, #128	; 0x80
 8005f16:	d1ca      	bne.n	8005eae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f2e:	e02d      	b.n	8005f8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 f88d 	bl	8006050 <I2C_IsAcknowledgeFailed>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e02d      	b.n	8005f9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f46:	d021      	beq.n	8005f8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f48:	f7fd feba 	bl	8003cc0 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d302      	bcc.n	8005f5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d116      	bne.n	8005f8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	f043 0220 	orr.w	r2, r3, #32
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e007      	b.n	8005f9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d1ca      	bne.n	8005f30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fb0:	e042      	b.n	8006038 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	f003 0310 	and.w	r3, r3, #16
 8005fbc:	2b10      	cmp	r3, #16
 8005fbe:	d119      	bne.n	8005ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0210 	mvn.w	r2, #16
 8005fc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e029      	b.n	8006048 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff4:	f7fd fe64 	bl	8003cc0 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	429a      	cmp	r2, r3
 8006002:	d302      	bcc.n	800600a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d116      	bne.n	8006038 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2220      	movs	r2, #32
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006024:	f043 0220 	orr.w	r2, r3, #32
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e007      	b.n	8006048 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006042:	2b40      	cmp	r3, #64	; 0x40
 8006044:	d1b5      	bne.n	8005fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006066:	d11b      	bne.n	80060a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006070:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608c:	f043 0204 	orr.w	r2, r3, #4
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e000      	b.n	80060a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
	...

080060b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e267      	b.n	8006592 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d075      	beq.n	80061ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060ce:	4b88      	ldr	r3, [pc, #544]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f003 030c 	and.w	r3, r3, #12
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	d00c      	beq.n	80060f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060da:	4b85      	ldr	r3, [pc, #532]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d112      	bne.n	800610c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060e6:	4b82      	ldr	r3, [pc, #520]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060f2:	d10b      	bne.n	800610c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060f4:	4b7e      	ldr	r3, [pc, #504]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d05b      	beq.n	80061b8 <HAL_RCC_OscConfig+0x108>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d157      	bne.n	80061b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e242      	b.n	8006592 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006114:	d106      	bne.n	8006124 <HAL_RCC_OscConfig+0x74>
 8006116:	4b76      	ldr	r3, [pc, #472]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a75      	ldr	r2, [pc, #468]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 800611c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	e01d      	b.n	8006160 <HAL_RCC_OscConfig+0xb0>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800612c:	d10c      	bne.n	8006148 <HAL_RCC_OscConfig+0x98>
 800612e:	4b70      	ldr	r3, [pc, #448]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a6f      	ldr	r2, [pc, #444]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 8006134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	4b6d      	ldr	r3, [pc, #436]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a6c      	ldr	r2, [pc, #432]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 8006140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	e00b      	b.n	8006160 <HAL_RCC_OscConfig+0xb0>
 8006148:	4b69      	ldr	r3, [pc, #420]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a68      	ldr	r2, [pc, #416]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 800614e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	4b66      	ldr	r3, [pc, #408]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a65      	ldr	r2, [pc, #404]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 800615a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800615e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d013      	beq.n	8006190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006168:	f7fd fdaa 	bl	8003cc0 <HAL_GetTick>
 800616c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006170:	f7fd fda6 	bl	8003cc0 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b64      	cmp	r3, #100	; 0x64
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e207      	b.n	8006592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006182:	4b5b      	ldr	r3, [pc, #364]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0f0      	beq.n	8006170 <HAL_RCC_OscConfig+0xc0>
 800618e:	e014      	b.n	80061ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006190:	f7fd fd96 	bl	8003cc0 <HAL_GetTick>
 8006194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006198:	f7fd fd92 	bl	8003cc0 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b64      	cmp	r3, #100	; 0x64
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e1f3      	b.n	8006592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061aa:	4b51      	ldr	r3, [pc, #324]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1f0      	bne.n	8006198 <HAL_RCC_OscConfig+0xe8>
 80061b6:	e000      	b.n	80061ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d063      	beq.n	800628e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061c6:	4b4a      	ldr	r3, [pc, #296]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 030c 	and.w	r3, r3, #12
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00b      	beq.n	80061ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061d2:	4b47      	ldr	r3, [pc, #284]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061da:	2b08      	cmp	r3, #8
 80061dc:	d11c      	bne.n	8006218 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061de:	4b44      	ldr	r3, [pc, #272]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d116      	bne.n	8006218 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061ea:	4b41      	ldr	r3, [pc, #260]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d005      	beq.n	8006202 <HAL_RCC_OscConfig+0x152>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d001      	beq.n	8006202 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e1c7      	b.n	8006592 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006202:	4b3b      	ldr	r3, [pc, #236]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	4937      	ldr	r1, [pc, #220]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 8006212:	4313      	orrs	r3, r2
 8006214:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006216:	e03a      	b.n	800628e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d020      	beq.n	8006262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006220:	4b34      	ldr	r3, [pc, #208]	; (80062f4 <HAL_RCC_OscConfig+0x244>)
 8006222:	2201      	movs	r2, #1
 8006224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006226:	f7fd fd4b 	bl	8003cc0 <HAL_GetTick>
 800622a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800622c:	e008      	b.n	8006240 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800622e:	f7fd fd47 	bl	8003cc0 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d901      	bls.n	8006240 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e1a8      	b.n	8006592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006240:	4b2b      	ldr	r3, [pc, #172]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0f0      	beq.n	800622e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800624c:	4b28      	ldr	r3, [pc, #160]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	4925      	ldr	r1, [pc, #148]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 800625c:	4313      	orrs	r3, r2
 800625e:	600b      	str	r3, [r1, #0]
 8006260:	e015      	b.n	800628e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006262:	4b24      	ldr	r3, [pc, #144]	; (80062f4 <HAL_RCC_OscConfig+0x244>)
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006268:	f7fd fd2a 	bl	8003cc0 <HAL_GetTick>
 800626c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006270:	f7fd fd26 	bl	8003cc0 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e187      	b.n	8006592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006282:	4b1b      	ldr	r3, [pc, #108]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1f0      	bne.n	8006270 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0308 	and.w	r3, r3, #8
 8006296:	2b00      	cmp	r3, #0
 8006298:	d036      	beq.n	8006308 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d016      	beq.n	80062d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062a2:	4b15      	ldr	r3, [pc, #84]	; (80062f8 <HAL_RCC_OscConfig+0x248>)
 80062a4:	2201      	movs	r2, #1
 80062a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a8:	f7fd fd0a 	bl	8003cc0 <HAL_GetTick>
 80062ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062b0:	f7fd fd06 	bl	8003cc0 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e167      	b.n	8006592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062c2:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <HAL_RCC_OscConfig+0x240>)
 80062c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0f0      	beq.n	80062b0 <HAL_RCC_OscConfig+0x200>
 80062ce:	e01b      	b.n	8006308 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062d0:	4b09      	ldr	r3, [pc, #36]	; (80062f8 <HAL_RCC_OscConfig+0x248>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062d6:	f7fd fcf3 	bl	8003cc0 <HAL_GetTick>
 80062da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062dc:	e00e      	b.n	80062fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062de:	f7fd fcef 	bl	8003cc0 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d907      	bls.n	80062fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e150      	b.n	8006592 <HAL_RCC_OscConfig+0x4e2>
 80062f0:	40023800 	.word	0x40023800
 80062f4:	42470000 	.word	0x42470000
 80062f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062fc:	4b88      	ldr	r3, [pc, #544]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 80062fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1ea      	bne.n	80062de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 8097 	beq.w	8006444 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006316:	2300      	movs	r3, #0
 8006318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800631a:	4b81      	ldr	r3, [pc, #516]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10f      	bne.n	8006346 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006326:	2300      	movs	r3, #0
 8006328:	60bb      	str	r3, [r7, #8]
 800632a:	4b7d      	ldr	r3, [pc, #500]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	4a7c      	ldr	r2, [pc, #496]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 8006330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006334:	6413      	str	r3, [r2, #64]	; 0x40
 8006336:	4b7a      	ldr	r3, [pc, #488]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800633e:	60bb      	str	r3, [r7, #8]
 8006340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006342:	2301      	movs	r3, #1
 8006344:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006346:	4b77      	ldr	r3, [pc, #476]	; (8006524 <HAL_RCC_OscConfig+0x474>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800634e:	2b00      	cmp	r3, #0
 8006350:	d118      	bne.n	8006384 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006352:	4b74      	ldr	r3, [pc, #464]	; (8006524 <HAL_RCC_OscConfig+0x474>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a73      	ldr	r2, [pc, #460]	; (8006524 <HAL_RCC_OscConfig+0x474>)
 8006358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800635c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800635e:	f7fd fcaf 	bl	8003cc0 <HAL_GetTick>
 8006362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006364:	e008      	b.n	8006378 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006366:	f7fd fcab 	bl	8003cc0 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d901      	bls.n	8006378 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e10c      	b.n	8006592 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006378:	4b6a      	ldr	r3, [pc, #424]	; (8006524 <HAL_RCC_OscConfig+0x474>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0f0      	beq.n	8006366 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d106      	bne.n	800639a <HAL_RCC_OscConfig+0x2ea>
 800638c:	4b64      	ldr	r3, [pc, #400]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 800638e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006390:	4a63      	ldr	r2, [pc, #396]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 8006392:	f043 0301 	orr.w	r3, r3, #1
 8006396:	6713      	str	r3, [r2, #112]	; 0x70
 8006398:	e01c      	b.n	80063d4 <HAL_RCC_OscConfig+0x324>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	2b05      	cmp	r3, #5
 80063a0:	d10c      	bne.n	80063bc <HAL_RCC_OscConfig+0x30c>
 80063a2:	4b5f      	ldr	r3, [pc, #380]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 80063a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a6:	4a5e      	ldr	r2, [pc, #376]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 80063a8:	f043 0304 	orr.w	r3, r3, #4
 80063ac:	6713      	str	r3, [r2, #112]	; 0x70
 80063ae:	4b5c      	ldr	r3, [pc, #368]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 80063b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b2:	4a5b      	ldr	r2, [pc, #364]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 80063b4:	f043 0301 	orr.w	r3, r3, #1
 80063b8:	6713      	str	r3, [r2, #112]	; 0x70
 80063ba:	e00b      	b.n	80063d4 <HAL_RCC_OscConfig+0x324>
 80063bc:	4b58      	ldr	r3, [pc, #352]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 80063be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c0:	4a57      	ldr	r2, [pc, #348]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 80063c2:	f023 0301 	bic.w	r3, r3, #1
 80063c6:	6713      	str	r3, [r2, #112]	; 0x70
 80063c8:	4b55      	ldr	r3, [pc, #340]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 80063ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063cc:	4a54      	ldr	r2, [pc, #336]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 80063ce:	f023 0304 	bic.w	r3, r3, #4
 80063d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d015      	beq.n	8006408 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063dc:	f7fd fc70 	bl	8003cc0 <HAL_GetTick>
 80063e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063e2:	e00a      	b.n	80063fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063e4:	f7fd fc6c 	bl	8003cc0 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e0cb      	b.n	8006592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063fa:	4b49      	ldr	r3, [pc, #292]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 80063fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0ee      	beq.n	80063e4 <HAL_RCC_OscConfig+0x334>
 8006406:	e014      	b.n	8006432 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006408:	f7fd fc5a 	bl	8003cc0 <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800640e:	e00a      	b.n	8006426 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006410:	f7fd fc56 	bl	8003cc0 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	f241 3288 	movw	r2, #5000	; 0x1388
 800641e:	4293      	cmp	r3, r2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e0b5      	b.n	8006592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006426:	4b3e      	ldr	r3, [pc, #248]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 8006428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1ee      	bne.n	8006410 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006432:	7dfb      	ldrb	r3, [r7, #23]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d105      	bne.n	8006444 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006438:	4b39      	ldr	r3, [pc, #228]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 800643a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643c:	4a38      	ldr	r2, [pc, #224]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 800643e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006442:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 80a1 	beq.w	8006590 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800644e:	4b34      	ldr	r3, [pc, #208]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f003 030c 	and.w	r3, r3, #12
 8006456:	2b08      	cmp	r3, #8
 8006458:	d05c      	beq.n	8006514 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	2b02      	cmp	r3, #2
 8006460:	d141      	bne.n	80064e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006462:	4b31      	ldr	r3, [pc, #196]	; (8006528 <HAL_RCC_OscConfig+0x478>)
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006468:	f7fd fc2a 	bl	8003cc0 <HAL_GetTick>
 800646c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800646e:	e008      	b.n	8006482 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006470:	f7fd fc26 	bl	8003cc0 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b02      	cmp	r3, #2
 800647c:	d901      	bls.n	8006482 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e087      	b.n	8006592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006482:	4b27      	ldr	r3, [pc, #156]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1f0      	bne.n	8006470 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69da      	ldr	r2, [r3, #28]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	431a      	orrs	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	019b      	lsls	r3, r3, #6
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	085b      	lsrs	r3, r3, #1
 80064a6:	3b01      	subs	r3, #1
 80064a8:	041b      	lsls	r3, r3, #16
 80064aa:	431a      	orrs	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	061b      	lsls	r3, r3, #24
 80064b2:	491b      	ldr	r1, [pc, #108]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064b8:	4b1b      	ldr	r3, [pc, #108]	; (8006528 <HAL_RCC_OscConfig+0x478>)
 80064ba:	2201      	movs	r2, #1
 80064bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064be:	f7fd fbff 	bl	8003cc0 <HAL_GetTick>
 80064c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064c4:	e008      	b.n	80064d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064c6:	f7fd fbfb 	bl	8003cc0 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d901      	bls.n	80064d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e05c      	b.n	8006592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064d8:	4b11      	ldr	r3, [pc, #68]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d0f0      	beq.n	80064c6 <HAL_RCC_OscConfig+0x416>
 80064e4:	e054      	b.n	8006590 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064e6:	4b10      	ldr	r3, [pc, #64]	; (8006528 <HAL_RCC_OscConfig+0x478>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ec:	f7fd fbe8 	bl	8003cc0 <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064f4:	f7fd fbe4 	bl	8003cc0 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e045      	b.n	8006592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006506:	4b06      	ldr	r3, [pc, #24]	; (8006520 <HAL_RCC_OscConfig+0x470>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1f0      	bne.n	80064f4 <HAL_RCC_OscConfig+0x444>
 8006512:	e03d      	b.n	8006590 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d107      	bne.n	800652c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e038      	b.n	8006592 <HAL_RCC_OscConfig+0x4e2>
 8006520:	40023800 	.word	0x40023800
 8006524:	40007000 	.word	0x40007000
 8006528:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800652c:	4b1b      	ldr	r3, [pc, #108]	; (800659c <HAL_RCC_OscConfig+0x4ec>)
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d028      	beq.n	800658c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006544:	429a      	cmp	r2, r3
 8006546:	d121      	bne.n	800658c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006552:	429a      	cmp	r2, r3
 8006554:	d11a      	bne.n	800658c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800655c:	4013      	ands	r3, r2
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006562:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006564:	4293      	cmp	r3, r2
 8006566:	d111      	bne.n	800658c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006572:	085b      	lsrs	r3, r3, #1
 8006574:	3b01      	subs	r3, #1
 8006576:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006578:	429a      	cmp	r2, r3
 800657a:	d107      	bne.n	800658c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006586:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006588:	429a      	cmp	r2, r3
 800658a:	d001      	beq.n	8006590 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3718      	adds	r7, #24
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	40023800 	.word	0x40023800

080065a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e0cc      	b.n	800674e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065b4:	4b68      	ldr	r3, [pc, #416]	; (8006758 <HAL_RCC_ClockConfig+0x1b8>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d90c      	bls.n	80065dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065c2:	4b65      	ldr	r3, [pc, #404]	; (8006758 <HAL_RCC_ClockConfig+0x1b8>)
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	b2d2      	uxtb	r2, r2
 80065c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ca:	4b63      	ldr	r3, [pc, #396]	; (8006758 <HAL_RCC_ClockConfig+0x1b8>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d001      	beq.n	80065dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e0b8      	b.n	800674e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d020      	beq.n	800662a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0304 	and.w	r3, r3, #4
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d005      	beq.n	8006600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065f4:	4b59      	ldr	r3, [pc, #356]	; (800675c <HAL_RCC_ClockConfig+0x1bc>)
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	4a58      	ldr	r2, [pc, #352]	; (800675c <HAL_RCC_ClockConfig+0x1bc>)
 80065fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80065fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b00      	cmp	r3, #0
 800660a:	d005      	beq.n	8006618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800660c:	4b53      	ldr	r3, [pc, #332]	; (800675c <HAL_RCC_ClockConfig+0x1bc>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	4a52      	ldr	r2, [pc, #328]	; (800675c <HAL_RCC_ClockConfig+0x1bc>)
 8006612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006618:	4b50      	ldr	r3, [pc, #320]	; (800675c <HAL_RCC_ClockConfig+0x1bc>)
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	494d      	ldr	r1, [pc, #308]	; (800675c <HAL_RCC_ClockConfig+0x1bc>)
 8006626:	4313      	orrs	r3, r2
 8006628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d044      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d107      	bne.n	800664e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800663e:	4b47      	ldr	r3, [pc, #284]	; (800675c <HAL_RCC_ClockConfig+0x1bc>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d119      	bne.n	800667e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e07f      	b.n	800674e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	2b02      	cmp	r3, #2
 8006654:	d003      	beq.n	800665e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800665a:	2b03      	cmp	r3, #3
 800665c:	d107      	bne.n	800666e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800665e:	4b3f      	ldr	r3, [pc, #252]	; (800675c <HAL_RCC_ClockConfig+0x1bc>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d109      	bne.n	800667e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e06f      	b.n	800674e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800666e:	4b3b      	ldr	r3, [pc, #236]	; (800675c <HAL_RCC_ClockConfig+0x1bc>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e067      	b.n	800674e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800667e:	4b37      	ldr	r3, [pc, #220]	; (800675c <HAL_RCC_ClockConfig+0x1bc>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f023 0203 	bic.w	r2, r3, #3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	4934      	ldr	r1, [pc, #208]	; (800675c <HAL_RCC_ClockConfig+0x1bc>)
 800668c:	4313      	orrs	r3, r2
 800668e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006690:	f7fd fb16 	bl	8003cc0 <HAL_GetTick>
 8006694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006696:	e00a      	b.n	80066ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006698:	f7fd fb12 	bl	8003cc0 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e04f      	b.n	800674e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ae:	4b2b      	ldr	r3, [pc, #172]	; (800675c <HAL_RCC_ClockConfig+0x1bc>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 020c 	and.w	r2, r3, #12
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	429a      	cmp	r2, r3
 80066be:	d1eb      	bne.n	8006698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066c0:	4b25      	ldr	r3, [pc, #148]	; (8006758 <HAL_RCC_ClockConfig+0x1b8>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	683a      	ldr	r2, [r7, #0]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d20c      	bcs.n	80066e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ce:	4b22      	ldr	r3, [pc, #136]	; (8006758 <HAL_RCC_ClockConfig+0x1b8>)
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066d6:	4b20      	ldr	r3, [pc, #128]	; (8006758 <HAL_RCC_ClockConfig+0x1b8>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0307 	and.w	r3, r3, #7
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d001      	beq.n	80066e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e032      	b.n	800674e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0304 	and.w	r3, r3, #4
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d008      	beq.n	8006706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066f4:	4b19      	ldr	r3, [pc, #100]	; (800675c <HAL_RCC_ClockConfig+0x1bc>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	4916      	ldr	r1, [pc, #88]	; (800675c <HAL_RCC_ClockConfig+0x1bc>)
 8006702:	4313      	orrs	r3, r2
 8006704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0308 	and.w	r3, r3, #8
 800670e:	2b00      	cmp	r3, #0
 8006710:	d009      	beq.n	8006726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006712:	4b12      	ldr	r3, [pc, #72]	; (800675c <HAL_RCC_ClockConfig+0x1bc>)
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	00db      	lsls	r3, r3, #3
 8006720:	490e      	ldr	r1, [pc, #56]	; (800675c <HAL_RCC_ClockConfig+0x1bc>)
 8006722:	4313      	orrs	r3, r2
 8006724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006726:	f000 f821 	bl	800676c <HAL_RCC_GetSysClockFreq>
 800672a:	4602      	mov	r2, r0
 800672c:	4b0b      	ldr	r3, [pc, #44]	; (800675c <HAL_RCC_ClockConfig+0x1bc>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	091b      	lsrs	r3, r3, #4
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	490a      	ldr	r1, [pc, #40]	; (8006760 <HAL_RCC_ClockConfig+0x1c0>)
 8006738:	5ccb      	ldrb	r3, [r1, r3]
 800673a:	fa22 f303 	lsr.w	r3, r2, r3
 800673e:	4a09      	ldr	r2, [pc, #36]	; (8006764 <HAL_RCC_ClockConfig+0x1c4>)
 8006740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006742:	4b09      	ldr	r3, [pc, #36]	; (8006768 <HAL_RCC_ClockConfig+0x1c8>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4618      	mov	r0, r3
 8006748:	f7fd fa76 	bl	8003c38 <HAL_InitTick>

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	40023c00 	.word	0x40023c00
 800675c:	40023800 	.word	0x40023800
 8006760:	080074c4 	.word	0x080074c4
 8006764:	200070a0 	.word	0x200070a0
 8006768:	200070a4 	.word	0x200070a4

0800676c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800676c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006770:	b090      	sub	sp, #64	; 0x40
 8006772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	637b      	str	r3, [r7, #52]	; 0x34
 8006778:	2300      	movs	r3, #0
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800677c:	2300      	movs	r3, #0
 800677e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006784:	4b59      	ldr	r3, [pc, #356]	; (80068ec <HAL_RCC_GetSysClockFreq+0x180>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f003 030c 	and.w	r3, r3, #12
 800678c:	2b08      	cmp	r3, #8
 800678e:	d00d      	beq.n	80067ac <HAL_RCC_GetSysClockFreq+0x40>
 8006790:	2b08      	cmp	r3, #8
 8006792:	f200 80a1 	bhi.w	80068d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <HAL_RCC_GetSysClockFreq+0x34>
 800679a:	2b04      	cmp	r3, #4
 800679c:	d003      	beq.n	80067a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800679e:	e09b      	b.n	80068d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067a0:	4b53      	ldr	r3, [pc, #332]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80067a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80067a4:	e09b      	b.n	80068de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067a6:	4b53      	ldr	r3, [pc, #332]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80067a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80067aa:	e098      	b.n	80068de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067ac:	4b4f      	ldr	r3, [pc, #316]	; (80068ec <HAL_RCC_GetSysClockFreq+0x180>)
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067b6:	4b4d      	ldr	r3, [pc, #308]	; (80068ec <HAL_RCC_GetSysClockFreq+0x180>)
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d028      	beq.n	8006814 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067c2:	4b4a      	ldr	r3, [pc, #296]	; (80068ec <HAL_RCC_GetSysClockFreq+0x180>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	099b      	lsrs	r3, r3, #6
 80067c8:	2200      	movs	r2, #0
 80067ca:	623b      	str	r3, [r7, #32]
 80067cc:	627a      	str	r2, [r7, #36]	; 0x24
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80067d4:	2100      	movs	r1, #0
 80067d6:	4b47      	ldr	r3, [pc, #284]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80067d8:	fb03 f201 	mul.w	r2, r3, r1
 80067dc:	2300      	movs	r3, #0
 80067de:	fb00 f303 	mul.w	r3, r0, r3
 80067e2:	4413      	add	r3, r2
 80067e4:	4a43      	ldr	r2, [pc, #268]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80067e6:	fba0 1202 	umull	r1, r2, r0, r2
 80067ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067ec:	460a      	mov	r2, r1
 80067ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80067f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067f2:	4413      	add	r3, r2
 80067f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f8:	2200      	movs	r2, #0
 80067fa:	61bb      	str	r3, [r7, #24]
 80067fc:	61fa      	str	r2, [r7, #28]
 80067fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006802:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006806:	f7fa f973 	bl	8000af0 <__aeabi_uldivmod>
 800680a:	4602      	mov	r2, r0
 800680c:	460b      	mov	r3, r1
 800680e:	4613      	mov	r3, r2
 8006810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006812:	e053      	b.n	80068bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006814:	4b35      	ldr	r3, [pc, #212]	; (80068ec <HAL_RCC_GetSysClockFreq+0x180>)
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	099b      	lsrs	r3, r3, #6
 800681a:	2200      	movs	r2, #0
 800681c:	613b      	str	r3, [r7, #16]
 800681e:	617a      	str	r2, [r7, #20]
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006826:	f04f 0b00 	mov.w	fp, #0
 800682a:	4652      	mov	r2, sl
 800682c:	465b      	mov	r3, fp
 800682e:	f04f 0000 	mov.w	r0, #0
 8006832:	f04f 0100 	mov.w	r1, #0
 8006836:	0159      	lsls	r1, r3, #5
 8006838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800683c:	0150      	lsls	r0, r2, #5
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	ebb2 080a 	subs.w	r8, r2, sl
 8006846:	eb63 090b 	sbc.w	r9, r3, fp
 800684a:	f04f 0200 	mov.w	r2, #0
 800684e:	f04f 0300 	mov.w	r3, #0
 8006852:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006856:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800685a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800685e:	ebb2 0408 	subs.w	r4, r2, r8
 8006862:	eb63 0509 	sbc.w	r5, r3, r9
 8006866:	f04f 0200 	mov.w	r2, #0
 800686a:	f04f 0300 	mov.w	r3, #0
 800686e:	00eb      	lsls	r3, r5, #3
 8006870:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006874:	00e2      	lsls	r2, r4, #3
 8006876:	4614      	mov	r4, r2
 8006878:	461d      	mov	r5, r3
 800687a:	eb14 030a 	adds.w	r3, r4, sl
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	eb45 030b 	adc.w	r3, r5, fp
 8006884:	607b      	str	r3, [r7, #4]
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006892:	4629      	mov	r1, r5
 8006894:	028b      	lsls	r3, r1, #10
 8006896:	4621      	mov	r1, r4
 8006898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800689c:	4621      	mov	r1, r4
 800689e:	028a      	lsls	r2, r1, #10
 80068a0:	4610      	mov	r0, r2
 80068a2:	4619      	mov	r1, r3
 80068a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a6:	2200      	movs	r2, #0
 80068a8:	60bb      	str	r3, [r7, #8]
 80068aa:	60fa      	str	r2, [r7, #12]
 80068ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068b0:	f7fa f91e 	bl	8000af0 <__aeabi_uldivmod>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4613      	mov	r3, r2
 80068ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068bc:	4b0b      	ldr	r3, [pc, #44]	; (80068ec <HAL_RCC_GetSysClockFreq+0x180>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	0c1b      	lsrs	r3, r3, #16
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	3301      	adds	r3, #1
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80068cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80068d6:	e002      	b.n	80068de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068d8:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80068da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80068dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3740      	adds	r7, #64	; 0x40
 80068e4:	46bd      	mov	sp, r7
 80068e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068ea:	bf00      	nop
 80068ec:	40023800 	.word	0x40023800
 80068f0:	00f42400 	.word	0x00f42400
 80068f4:	017d7840 	.word	0x017d7840

080068f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068f8:	b480      	push	{r7}
 80068fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068fc:	4b03      	ldr	r3, [pc, #12]	; (800690c <HAL_RCC_GetHCLKFreq+0x14>)
 80068fe:	681b      	ldr	r3, [r3, #0]
}
 8006900:	4618      	mov	r0, r3
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	200070a0 	.word	0x200070a0

08006910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006914:	f7ff fff0 	bl	80068f8 <HAL_RCC_GetHCLKFreq>
 8006918:	4602      	mov	r2, r0
 800691a:	4b05      	ldr	r3, [pc, #20]	; (8006930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	0a9b      	lsrs	r3, r3, #10
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	4903      	ldr	r1, [pc, #12]	; (8006934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006926:	5ccb      	ldrb	r3, [r1, r3]
 8006928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800692c:	4618      	mov	r0, r3
 800692e:	bd80      	pop	{r7, pc}
 8006930:	40023800 	.word	0x40023800
 8006934:	080074d4 	.word	0x080074d4

08006938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e041      	b.n	80069ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d106      	bne.n	8006964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7fd f8a2 	bl	8003aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	3304      	adds	r3, #4
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f000 f950 	bl	8006c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
	...

080069d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d001      	beq.n	80069f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e03c      	b.n	8006a6a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a1e      	ldr	r2, [pc, #120]	; (8006a78 <HAL_TIM_Base_Start+0xa0>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d018      	beq.n	8006a34 <HAL_TIM_Base_Start+0x5c>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a0a:	d013      	beq.n	8006a34 <HAL_TIM_Base_Start+0x5c>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a1a      	ldr	r2, [pc, #104]	; (8006a7c <HAL_TIM_Base_Start+0xa4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d00e      	beq.n	8006a34 <HAL_TIM_Base_Start+0x5c>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a19      	ldr	r2, [pc, #100]	; (8006a80 <HAL_TIM_Base_Start+0xa8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d009      	beq.n	8006a34 <HAL_TIM_Base_Start+0x5c>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a17      	ldr	r2, [pc, #92]	; (8006a84 <HAL_TIM_Base_Start+0xac>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d004      	beq.n	8006a34 <HAL_TIM_Base_Start+0x5c>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a16      	ldr	r2, [pc, #88]	; (8006a88 <HAL_TIM_Base_Start+0xb0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d111      	bne.n	8006a58 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f003 0307 	and.w	r3, r3, #7
 8006a3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b06      	cmp	r3, #6
 8006a44:	d010      	beq.n	8006a68 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f042 0201 	orr.w	r2, r2, #1
 8006a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a56:	e007      	b.n	8006a68 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	40010000 	.word	0x40010000
 8006a7c:	40000400 	.word	0x40000400
 8006a80:	40000800 	.word	0x40000800
 8006a84:	40000c00 	.word	0x40000c00
 8006a88:	40014000 	.word	0x40014000

08006a8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e0b4      	b.n	8006c12 <HAL_TIM_ConfigClockSource+0x186>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ace:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae0:	d03e      	beq.n	8006b60 <HAL_TIM_ConfigClockSource+0xd4>
 8006ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae6:	f200 8087 	bhi.w	8006bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aee:	f000 8086 	beq.w	8006bfe <HAL_TIM_ConfigClockSource+0x172>
 8006af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af6:	d87f      	bhi.n	8006bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006af8:	2b70      	cmp	r3, #112	; 0x70
 8006afa:	d01a      	beq.n	8006b32 <HAL_TIM_ConfigClockSource+0xa6>
 8006afc:	2b70      	cmp	r3, #112	; 0x70
 8006afe:	d87b      	bhi.n	8006bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006b00:	2b60      	cmp	r3, #96	; 0x60
 8006b02:	d050      	beq.n	8006ba6 <HAL_TIM_ConfigClockSource+0x11a>
 8006b04:	2b60      	cmp	r3, #96	; 0x60
 8006b06:	d877      	bhi.n	8006bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006b08:	2b50      	cmp	r3, #80	; 0x50
 8006b0a:	d03c      	beq.n	8006b86 <HAL_TIM_ConfigClockSource+0xfa>
 8006b0c:	2b50      	cmp	r3, #80	; 0x50
 8006b0e:	d873      	bhi.n	8006bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006b10:	2b40      	cmp	r3, #64	; 0x40
 8006b12:	d058      	beq.n	8006bc6 <HAL_TIM_ConfigClockSource+0x13a>
 8006b14:	2b40      	cmp	r3, #64	; 0x40
 8006b16:	d86f      	bhi.n	8006bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006b18:	2b30      	cmp	r3, #48	; 0x30
 8006b1a:	d064      	beq.n	8006be6 <HAL_TIM_ConfigClockSource+0x15a>
 8006b1c:	2b30      	cmp	r3, #48	; 0x30
 8006b1e:	d86b      	bhi.n	8006bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006b20:	2b20      	cmp	r3, #32
 8006b22:	d060      	beq.n	8006be6 <HAL_TIM_ConfigClockSource+0x15a>
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d867      	bhi.n	8006bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d05c      	beq.n	8006be6 <HAL_TIM_ConfigClockSource+0x15a>
 8006b2c:	2b10      	cmp	r3, #16
 8006b2e:	d05a      	beq.n	8006be6 <HAL_TIM_ConfigClockSource+0x15a>
 8006b30:	e062      	b.n	8006bf8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6818      	ldr	r0, [r3, #0]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	6899      	ldr	r1, [r3, #8]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	f000 f965 	bl	8006e10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	609a      	str	r2, [r3, #8]
      break;
 8006b5e:	e04f      	b.n	8006c00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6818      	ldr	r0, [r3, #0]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	6899      	ldr	r1, [r3, #8]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	f000 f94e 	bl	8006e10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689a      	ldr	r2, [r3, #8]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b82:	609a      	str	r2, [r3, #8]
      break;
 8006b84:	e03c      	b.n	8006c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6818      	ldr	r0, [r3, #0]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	6859      	ldr	r1, [r3, #4]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	461a      	mov	r2, r3
 8006b94:	f000 f8c2 	bl	8006d1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2150      	movs	r1, #80	; 0x50
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 f91b 	bl	8006dda <TIM_ITRx_SetConfig>
      break;
 8006ba4:	e02c      	b.n	8006c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6818      	ldr	r0, [r3, #0]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	6859      	ldr	r1, [r3, #4]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	f000 f8e1 	bl	8006d7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2160      	movs	r1, #96	; 0x60
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 f90b 	bl	8006dda <TIM_ITRx_SetConfig>
      break;
 8006bc4:	e01c      	b.n	8006c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6818      	ldr	r0, [r3, #0]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	6859      	ldr	r1, [r3, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f000 f8a2 	bl	8006d1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2140      	movs	r1, #64	; 0x40
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 f8fb 	bl	8006dda <TIM_ITRx_SetConfig>
      break;
 8006be4:	e00c      	b.n	8006c00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4619      	mov	r1, r3
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	f000 f8f2 	bl	8006dda <TIM_ITRx_SetConfig>
      break;
 8006bf6:	e003      	b.n	8006c00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8006bfc:	e000      	b.n	8006c00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a34      	ldr	r2, [pc, #208]	; (8006d00 <TIM_Base_SetConfig+0xe4>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d00f      	beq.n	8006c54 <TIM_Base_SetConfig+0x38>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3a:	d00b      	beq.n	8006c54 <TIM_Base_SetConfig+0x38>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a31      	ldr	r2, [pc, #196]	; (8006d04 <TIM_Base_SetConfig+0xe8>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d007      	beq.n	8006c54 <TIM_Base_SetConfig+0x38>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a30      	ldr	r2, [pc, #192]	; (8006d08 <TIM_Base_SetConfig+0xec>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d003      	beq.n	8006c54 <TIM_Base_SetConfig+0x38>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a2f      	ldr	r2, [pc, #188]	; (8006d0c <TIM_Base_SetConfig+0xf0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d108      	bne.n	8006c66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a25      	ldr	r2, [pc, #148]	; (8006d00 <TIM_Base_SetConfig+0xe4>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d01b      	beq.n	8006ca6 <TIM_Base_SetConfig+0x8a>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c74:	d017      	beq.n	8006ca6 <TIM_Base_SetConfig+0x8a>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a22      	ldr	r2, [pc, #136]	; (8006d04 <TIM_Base_SetConfig+0xe8>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d013      	beq.n	8006ca6 <TIM_Base_SetConfig+0x8a>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a21      	ldr	r2, [pc, #132]	; (8006d08 <TIM_Base_SetConfig+0xec>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d00f      	beq.n	8006ca6 <TIM_Base_SetConfig+0x8a>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a20      	ldr	r2, [pc, #128]	; (8006d0c <TIM_Base_SetConfig+0xf0>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d00b      	beq.n	8006ca6 <TIM_Base_SetConfig+0x8a>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a1f      	ldr	r2, [pc, #124]	; (8006d10 <TIM_Base_SetConfig+0xf4>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d007      	beq.n	8006ca6 <TIM_Base_SetConfig+0x8a>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a1e      	ldr	r2, [pc, #120]	; (8006d14 <TIM_Base_SetConfig+0xf8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d003      	beq.n	8006ca6 <TIM_Base_SetConfig+0x8a>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a1d      	ldr	r2, [pc, #116]	; (8006d18 <TIM_Base_SetConfig+0xfc>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d108      	bne.n	8006cb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	689a      	ldr	r2, [r3, #8]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a08      	ldr	r2, [pc, #32]	; (8006d00 <TIM_Base_SetConfig+0xe4>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d103      	bne.n	8006cec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	691a      	ldr	r2, [r3, #16]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	615a      	str	r2, [r3, #20]
}
 8006cf2:	bf00      	nop
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	40010000 	.word	0x40010000
 8006d04:	40000400 	.word	0x40000400
 8006d08:	40000800 	.word	0x40000800
 8006d0c:	40000c00 	.word	0x40000c00
 8006d10:	40014000 	.word	0x40014000
 8006d14:	40014400 	.word	0x40014400
 8006d18:	40014800 	.word	0x40014800

08006d1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	f023 0201 	bic.w	r2, r3, #1
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	011b      	lsls	r3, r3, #4
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f023 030a 	bic.w	r3, r3, #10
 8006d58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	621a      	str	r2, [r3, #32]
}
 8006d6e:	bf00      	nop
 8006d70:	371c      	adds	r7, #28
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b087      	sub	sp, #28
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	60f8      	str	r0, [r7, #12]
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	f023 0210 	bic.w	r2, r3, #16
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006da4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	031b      	lsls	r3, r3, #12
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006db6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	621a      	str	r2, [r3, #32]
}
 8006dce:	bf00      	nop
 8006dd0:	371c      	adds	r7, #28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b085      	sub	sp, #20
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
 8006de2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	f043 0307 	orr.w	r3, r3, #7
 8006dfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	609a      	str	r2, [r3, #8]
}
 8006e04:	bf00      	nop
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	021a      	lsls	r2, r3, #8
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	431a      	orrs	r2, r3
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	609a      	str	r2, [r3, #8]
}
 8006e44:	bf00      	nop
 8006e46:	371c      	adds	r7, #28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d101      	bne.n	8006e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e64:	2302      	movs	r3, #2
 8006e66:	e050      	b.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a1c      	ldr	r2, [pc, #112]	; (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d018      	beq.n	8006ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb4:	d013      	beq.n	8006ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00e      	beq.n	8006ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a16      	ldr	r2, [pc, #88]	; (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d009      	beq.n	8006ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a15      	ldr	r2, [pc, #84]	; (8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d004      	beq.n	8006ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a13      	ldr	r2, [pc, #76]	; (8006f28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d10c      	bne.n	8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	40010000 	.word	0x40010000
 8006f1c:	40000400 	.word	0x40000400
 8006f20:	40000800 	.word	0x40000800
 8006f24:	40000c00 	.word	0x40000c00
 8006f28:	40014000 	.word	0x40014000

08006f2c <memset>:
 8006f2c:	4402      	add	r2, r0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d100      	bne.n	8006f36 <memset+0xa>
 8006f34:	4770      	bx	lr
 8006f36:	f803 1b01 	strb.w	r1, [r3], #1
 8006f3a:	e7f9      	b.n	8006f30 <memset+0x4>

08006f3c <__errno>:
 8006f3c:	4b01      	ldr	r3, [pc, #4]	; (8006f44 <__errno+0x8>)
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	200070f8 	.word	0x200070f8

08006f48 <__libc_init_array>:
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	4d0d      	ldr	r5, [pc, #52]	; (8006f80 <__libc_init_array+0x38>)
 8006f4c:	4c0d      	ldr	r4, [pc, #52]	; (8006f84 <__libc_init_array+0x3c>)
 8006f4e:	1b64      	subs	r4, r4, r5
 8006f50:	10a4      	asrs	r4, r4, #2
 8006f52:	2600      	movs	r6, #0
 8006f54:	42a6      	cmp	r6, r4
 8006f56:	d109      	bne.n	8006f6c <__libc_init_array+0x24>
 8006f58:	4d0b      	ldr	r5, [pc, #44]	; (8006f88 <__libc_init_array+0x40>)
 8006f5a:	4c0c      	ldr	r4, [pc, #48]	; (8006f8c <__libc_init_array+0x44>)
 8006f5c:	f000 faa6 	bl	80074ac <_init>
 8006f60:	1b64      	subs	r4, r4, r5
 8006f62:	10a4      	asrs	r4, r4, #2
 8006f64:	2600      	movs	r6, #0
 8006f66:	42a6      	cmp	r6, r4
 8006f68:	d105      	bne.n	8006f76 <__libc_init_array+0x2e>
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}
 8006f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f70:	4798      	blx	r3
 8006f72:	3601      	adds	r6, #1
 8006f74:	e7ee      	b.n	8006f54 <__libc_init_array+0xc>
 8006f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f7a:	4798      	blx	r3
 8006f7c:	3601      	adds	r6, #1
 8006f7e:	e7f2      	b.n	8006f66 <__libc_init_array+0x1e>
 8006f80:	080074f0 	.word	0x080074f0
 8006f84:	080074f0 	.word	0x080074f0
 8006f88:	080074f0 	.word	0x080074f0
 8006f8c:	080074f4 	.word	0x080074f4

08006f90 <log10>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	ed2d 8b02 	vpush	{d8}
 8006f96:	ec55 4b10 	vmov	r4, r5, d0
 8006f9a:	f000 f841 	bl	8007020 <__ieee754_log10>
 8006f9e:	4622      	mov	r2, r4
 8006fa0:	462b      	mov	r3, r5
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	eeb0 8a40 	vmov.f32	s16, s0
 8006faa:	eef0 8a60 	vmov.f32	s17, s1
 8006fae:	f7f9 fd69 	bl	8000a84 <__aeabi_dcmpun>
 8006fb2:	b998      	cbnz	r0, 8006fdc <log10+0x4c>
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	4620      	mov	r0, r4
 8006fba:	4629      	mov	r1, r5
 8006fbc:	f7f9 fd44 	bl	8000a48 <__aeabi_dcmple>
 8006fc0:	b160      	cbz	r0, 8006fdc <log10+0x4c>
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	4629      	mov	r1, r5
 8006fca:	f7f9 fd29 	bl	8000a20 <__aeabi_dcmpeq>
 8006fce:	b160      	cbz	r0, 8006fea <log10+0x5a>
 8006fd0:	f7ff ffb4 	bl	8006f3c <__errno>
 8006fd4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8007000 <log10+0x70>
 8006fd8:	2322      	movs	r3, #34	; 0x22
 8006fda:	6003      	str	r3, [r0, #0]
 8006fdc:	eeb0 0a48 	vmov.f32	s0, s16
 8006fe0:	eef0 0a68 	vmov.f32	s1, s17
 8006fe4:	ecbd 8b02 	vpop	{d8}
 8006fe8:	bd38      	pop	{r3, r4, r5, pc}
 8006fea:	f7ff ffa7 	bl	8006f3c <__errno>
 8006fee:	ecbd 8b02 	vpop	{d8}
 8006ff2:	2321      	movs	r3, #33	; 0x21
 8006ff4:	6003      	str	r3, [r0, #0]
 8006ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ffa:	4803      	ldr	r0, [pc, #12]	; (8007008 <log10+0x78>)
 8006ffc:	f000 b808 	b.w	8007010 <nan>
 8007000:	00000000 	.word	0x00000000
 8007004:	fff00000 	.word	0xfff00000
 8007008:	080074e4 	.word	0x080074e4
 800700c:	00000000 	.word	0x00000000

08007010 <nan>:
 8007010:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007018 <nan+0x8>
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	00000000 	.word	0x00000000
 800701c:	7ff80000 	.word	0x7ff80000

08007020 <__ieee754_log10>:
 8007020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007024:	ec55 4b10 	vmov	r4, r5, d0
 8007028:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800702c:	462b      	mov	r3, r5
 800702e:	da2f      	bge.n	8007090 <__ieee754_log10+0x70>
 8007030:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8007034:	4322      	orrs	r2, r4
 8007036:	d109      	bne.n	800704c <__ieee754_log10+0x2c>
 8007038:	493b      	ldr	r1, [pc, #236]	; (8007128 <__ieee754_log10+0x108>)
 800703a:	2200      	movs	r2, #0
 800703c:	2300      	movs	r3, #0
 800703e:	2000      	movs	r0, #0
 8007040:	f7f9 fbb0 	bl	80007a4 <__aeabi_ddiv>
 8007044:	ec41 0b10 	vmov	d0, r0, r1
 8007048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800704c:	2d00      	cmp	r5, #0
 800704e:	da09      	bge.n	8007064 <__ieee754_log10+0x44>
 8007050:	ee10 2a10 	vmov	r2, s0
 8007054:	ee10 0a10 	vmov	r0, s0
 8007058:	4629      	mov	r1, r5
 800705a:	f7f9 f8c1 	bl	80001e0 <__aeabi_dsub>
 800705e:	2200      	movs	r2, #0
 8007060:	2300      	movs	r3, #0
 8007062:	e7ed      	b.n	8007040 <__ieee754_log10+0x20>
 8007064:	4b31      	ldr	r3, [pc, #196]	; (800712c <__ieee754_log10+0x10c>)
 8007066:	2200      	movs	r2, #0
 8007068:	4629      	mov	r1, r5
 800706a:	ee10 0a10 	vmov	r0, s0
 800706e:	f7f9 fa6f 	bl	8000550 <__aeabi_dmul>
 8007072:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8007076:	4604      	mov	r4, r0
 8007078:	460d      	mov	r5, r1
 800707a:	460b      	mov	r3, r1
 800707c:	492c      	ldr	r1, [pc, #176]	; (8007130 <__ieee754_log10+0x110>)
 800707e:	428b      	cmp	r3, r1
 8007080:	dd08      	ble.n	8007094 <__ieee754_log10+0x74>
 8007082:	4622      	mov	r2, r4
 8007084:	462b      	mov	r3, r5
 8007086:	4620      	mov	r0, r4
 8007088:	4629      	mov	r1, r5
 800708a:	f7f9 f8ab 	bl	80001e4 <__adddf3>
 800708e:	e7d9      	b.n	8007044 <__ieee754_log10+0x24>
 8007090:	2200      	movs	r2, #0
 8007092:	e7f3      	b.n	800707c <__ieee754_log10+0x5c>
 8007094:	1518      	asrs	r0, r3, #20
 8007096:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800709a:	4410      	add	r0, r2
 800709c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80070a0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80070a4:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80070a8:	f7f9 f9e8 	bl	800047c <__aeabi_i2d>
 80070ac:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80070b0:	3303      	adds	r3, #3
 80070b2:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80070b6:	ec45 4b10 	vmov	d0, r4, r5
 80070ba:	4606      	mov	r6, r0
 80070bc:	460f      	mov	r7, r1
 80070be:	f000 f83b 	bl	8007138 <__ieee754_log>
 80070c2:	a313      	add	r3, pc, #76	; (adr r3, 8007110 <__ieee754_log10+0xf0>)
 80070c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c8:	4630      	mov	r0, r6
 80070ca:	4639      	mov	r1, r7
 80070cc:	ec59 8b10 	vmov	r8, r9, d0
 80070d0:	f7f9 fa3e 	bl	8000550 <__aeabi_dmul>
 80070d4:	a310      	add	r3, pc, #64	; (adr r3, 8007118 <__ieee754_log10+0xf8>)
 80070d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070da:	4604      	mov	r4, r0
 80070dc:	460d      	mov	r5, r1
 80070de:	4640      	mov	r0, r8
 80070e0:	4649      	mov	r1, r9
 80070e2:	f7f9 fa35 	bl	8000550 <__aeabi_dmul>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	4620      	mov	r0, r4
 80070ec:	4629      	mov	r1, r5
 80070ee:	f7f9 f879 	bl	80001e4 <__adddf3>
 80070f2:	a30b      	add	r3, pc, #44	; (adr r3, 8007120 <__ieee754_log10+0x100>)
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	4604      	mov	r4, r0
 80070fa:	460d      	mov	r5, r1
 80070fc:	4630      	mov	r0, r6
 80070fe:	4639      	mov	r1, r7
 8007100:	f7f9 fa26 	bl	8000550 <__aeabi_dmul>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4620      	mov	r0, r4
 800710a:	4629      	mov	r1, r5
 800710c:	e7bd      	b.n	800708a <__ieee754_log10+0x6a>
 800710e:	bf00      	nop
 8007110:	11f12b36 	.word	0x11f12b36
 8007114:	3d59fef3 	.word	0x3d59fef3
 8007118:	1526e50e 	.word	0x1526e50e
 800711c:	3fdbcb7b 	.word	0x3fdbcb7b
 8007120:	509f6000 	.word	0x509f6000
 8007124:	3fd34413 	.word	0x3fd34413
 8007128:	c3500000 	.word	0xc3500000
 800712c:	43500000 	.word	0x43500000
 8007130:	7fefffff 	.word	0x7fefffff
 8007134:	00000000 	.word	0x00000000

08007138 <__ieee754_log>:
 8007138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713c:	ec51 0b10 	vmov	r0, r1, d0
 8007140:	ed2d 8b04 	vpush	{d8-d9}
 8007144:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007148:	b083      	sub	sp, #12
 800714a:	460d      	mov	r5, r1
 800714c:	da29      	bge.n	80071a2 <__ieee754_log+0x6a>
 800714e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007152:	4303      	orrs	r3, r0
 8007154:	ee10 2a10 	vmov	r2, s0
 8007158:	d10c      	bne.n	8007174 <__ieee754_log+0x3c>
 800715a:	49cf      	ldr	r1, [pc, #828]	; (8007498 <__ieee754_log+0x360>)
 800715c:	2200      	movs	r2, #0
 800715e:	2300      	movs	r3, #0
 8007160:	2000      	movs	r0, #0
 8007162:	f7f9 fb1f 	bl	80007a4 <__aeabi_ddiv>
 8007166:	ec41 0b10 	vmov	d0, r0, r1
 800716a:	b003      	add	sp, #12
 800716c:	ecbd 8b04 	vpop	{d8-d9}
 8007170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007174:	2900      	cmp	r1, #0
 8007176:	da05      	bge.n	8007184 <__ieee754_log+0x4c>
 8007178:	460b      	mov	r3, r1
 800717a:	f7f9 f831 	bl	80001e0 <__aeabi_dsub>
 800717e:	2200      	movs	r2, #0
 8007180:	2300      	movs	r3, #0
 8007182:	e7ee      	b.n	8007162 <__ieee754_log+0x2a>
 8007184:	4bc5      	ldr	r3, [pc, #788]	; (800749c <__ieee754_log+0x364>)
 8007186:	2200      	movs	r2, #0
 8007188:	f7f9 f9e2 	bl	8000550 <__aeabi_dmul>
 800718c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8007190:	460d      	mov	r5, r1
 8007192:	4ac3      	ldr	r2, [pc, #780]	; (80074a0 <__ieee754_log+0x368>)
 8007194:	4295      	cmp	r5, r2
 8007196:	dd06      	ble.n	80071a6 <__ieee754_log+0x6e>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	f7f9 f822 	bl	80001e4 <__adddf3>
 80071a0:	e7e1      	b.n	8007166 <__ieee754_log+0x2e>
 80071a2:	2300      	movs	r3, #0
 80071a4:	e7f5      	b.n	8007192 <__ieee754_log+0x5a>
 80071a6:	152c      	asrs	r4, r5, #20
 80071a8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80071ac:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80071b0:	441c      	add	r4, r3
 80071b2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80071b6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80071ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071be:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80071c2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80071c6:	ea42 0105 	orr.w	r1, r2, r5
 80071ca:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80071ce:	2200      	movs	r2, #0
 80071d0:	4bb4      	ldr	r3, [pc, #720]	; (80074a4 <__ieee754_log+0x36c>)
 80071d2:	f7f9 f805 	bl	80001e0 <__aeabi_dsub>
 80071d6:	1cab      	adds	r3, r5, #2
 80071d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071dc:	2b02      	cmp	r3, #2
 80071de:	4682      	mov	sl, r0
 80071e0:	468b      	mov	fp, r1
 80071e2:	f04f 0200 	mov.w	r2, #0
 80071e6:	dc53      	bgt.n	8007290 <__ieee754_log+0x158>
 80071e8:	2300      	movs	r3, #0
 80071ea:	f7f9 fc19 	bl	8000a20 <__aeabi_dcmpeq>
 80071ee:	b1d0      	cbz	r0, 8007226 <__ieee754_log+0xee>
 80071f0:	2c00      	cmp	r4, #0
 80071f2:	f000 8122 	beq.w	800743a <__ieee754_log+0x302>
 80071f6:	4620      	mov	r0, r4
 80071f8:	f7f9 f940 	bl	800047c <__aeabi_i2d>
 80071fc:	a390      	add	r3, pc, #576	; (adr r3, 8007440 <__ieee754_log+0x308>)
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	4606      	mov	r6, r0
 8007204:	460f      	mov	r7, r1
 8007206:	f7f9 f9a3 	bl	8000550 <__aeabi_dmul>
 800720a:	a38f      	add	r3, pc, #572	; (adr r3, 8007448 <__ieee754_log+0x310>)
 800720c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007210:	4604      	mov	r4, r0
 8007212:	460d      	mov	r5, r1
 8007214:	4630      	mov	r0, r6
 8007216:	4639      	mov	r1, r7
 8007218:	f7f9 f99a 	bl	8000550 <__aeabi_dmul>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	4620      	mov	r0, r4
 8007222:	4629      	mov	r1, r5
 8007224:	e7ba      	b.n	800719c <__ieee754_log+0x64>
 8007226:	a38a      	add	r3, pc, #552	; (adr r3, 8007450 <__ieee754_log+0x318>)
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	4650      	mov	r0, sl
 800722e:	4659      	mov	r1, fp
 8007230:	f7f9 f98e 	bl	8000550 <__aeabi_dmul>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	2000      	movs	r0, #0
 800723a:	499b      	ldr	r1, [pc, #620]	; (80074a8 <__ieee754_log+0x370>)
 800723c:	f7f8 ffd0 	bl	80001e0 <__aeabi_dsub>
 8007240:	4652      	mov	r2, sl
 8007242:	4606      	mov	r6, r0
 8007244:	460f      	mov	r7, r1
 8007246:	465b      	mov	r3, fp
 8007248:	4650      	mov	r0, sl
 800724a:	4659      	mov	r1, fp
 800724c:	f7f9 f980 	bl	8000550 <__aeabi_dmul>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	4630      	mov	r0, r6
 8007256:	4639      	mov	r1, r7
 8007258:	f7f9 f97a 	bl	8000550 <__aeabi_dmul>
 800725c:	4606      	mov	r6, r0
 800725e:	460f      	mov	r7, r1
 8007260:	b914      	cbnz	r4, 8007268 <__ieee754_log+0x130>
 8007262:	4632      	mov	r2, r6
 8007264:	463b      	mov	r3, r7
 8007266:	e0a2      	b.n	80073ae <__ieee754_log+0x276>
 8007268:	4620      	mov	r0, r4
 800726a:	f7f9 f907 	bl	800047c <__aeabi_i2d>
 800726e:	a374      	add	r3, pc, #464	; (adr r3, 8007440 <__ieee754_log+0x308>)
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	4680      	mov	r8, r0
 8007276:	4689      	mov	r9, r1
 8007278:	f7f9 f96a 	bl	8000550 <__aeabi_dmul>
 800727c:	a372      	add	r3, pc, #456	; (adr r3, 8007448 <__ieee754_log+0x310>)
 800727e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007282:	4604      	mov	r4, r0
 8007284:	460d      	mov	r5, r1
 8007286:	4640      	mov	r0, r8
 8007288:	4649      	mov	r1, r9
 800728a:	f7f9 f961 	bl	8000550 <__aeabi_dmul>
 800728e:	e0a7      	b.n	80073e0 <__ieee754_log+0x2a8>
 8007290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007294:	f7f8 ffa6 	bl	80001e4 <__adddf3>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4650      	mov	r0, sl
 800729e:	4659      	mov	r1, fp
 80072a0:	f7f9 fa80 	bl	80007a4 <__aeabi_ddiv>
 80072a4:	ec41 0b18 	vmov	d8, r0, r1
 80072a8:	4620      	mov	r0, r4
 80072aa:	f7f9 f8e7 	bl	800047c <__aeabi_i2d>
 80072ae:	ec53 2b18 	vmov	r2, r3, d8
 80072b2:	ec41 0b19 	vmov	d9, r0, r1
 80072b6:	ec51 0b18 	vmov	r0, r1, d8
 80072ba:	f7f9 f949 	bl	8000550 <__aeabi_dmul>
 80072be:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80072c2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	4680      	mov	r8, r0
 80072ce:	4689      	mov	r9, r1
 80072d0:	f7f9 f93e 	bl	8000550 <__aeabi_dmul>
 80072d4:	a360      	add	r3, pc, #384	; (adr r3, 8007458 <__ieee754_log+0x320>)
 80072d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072da:	4606      	mov	r6, r0
 80072dc:	460f      	mov	r7, r1
 80072de:	f7f9 f937 	bl	8000550 <__aeabi_dmul>
 80072e2:	a35f      	add	r3, pc, #380	; (adr r3, 8007460 <__ieee754_log+0x328>)
 80072e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e8:	f7f8 ff7c 	bl	80001e4 <__adddf3>
 80072ec:	4632      	mov	r2, r6
 80072ee:	463b      	mov	r3, r7
 80072f0:	f7f9 f92e 	bl	8000550 <__aeabi_dmul>
 80072f4:	a35c      	add	r3, pc, #368	; (adr r3, 8007468 <__ieee754_log+0x330>)
 80072f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fa:	f7f8 ff73 	bl	80001e4 <__adddf3>
 80072fe:	4632      	mov	r2, r6
 8007300:	463b      	mov	r3, r7
 8007302:	f7f9 f925 	bl	8000550 <__aeabi_dmul>
 8007306:	a35a      	add	r3, pc, #360	; (adr r3, 8007470 <__ieee754_log+0x338>)
 8007308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730c:	f7f8 ff6a 	bl	80001e4 <__adddf3>
 8007310:	4642      	mov	r2, r8
 8007312:	464b      	mov	r3, r9
 8007314:	f7f9 f91c 	bl	8000550 <__aeabi_dmul>
 8007318:	a357      	add	r3, pc, #348	; (adr r3, 8007478 <__ieee754_log+0x340>)
 800731a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731e:	4680      	mov	r8, r0
 8007320:	4689      	mov	r9, r1
 8007322:	4630      	mov	r0, r6
 8007324:	4639      	mov	r1, r7
 8007326:	f7f9 f913 	bl	8000550 <__aeabi_dmul>
 800732a:	a355      	add	r3, pc, #340	; (adr r3, 8007480 <__ieee754_log+0x348>)
 800732c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007330:	f7f8 ff58 	bl	80001e4 <__adddf3>
 8007334:	4632      	mov	r2, r6
 8007336:	463b      	mov	r3, r7
 8007338:	f7f9 f90a 	bl	8000550 <__aeabi_dmul>
 800733c:	a352      	add	r3, pc, #328	; (adr r3, 8007488 <__ieee754_log+0x350>)
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	f7f8 ff4f 	bl	80001e4 <__adddf3>
 8007346:	4632      	mov	r2, r6
 8007348:	463b      	mov	r3, r7
 800734a:	f7f9 f901 	bl	8000550 <__aeabi_dmul>
 800734e:	460b      	mov	r3, r1
 8007350:	4602      	mov	r2, r0
 8007352:	4649      	mov	r1, r9
 8007354:	4640      	mov	r0, r8
 8007356:	f7f8 ff45 	bl	80001e4 <__adddf3>
 800735a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800735e:	9b01      	ldr	r3, [sp, #4]
 8007360:	3551      	adds	r5, #81	; 0x51
 8007362:	431d      	orrs	r5, r3
 8007364:	2d00      	cmp	r5, #0
 8007366:	4680      	mov	r8, r0
 8007368:	4689      	mov	r9, r1
 800736a:	dd48      	ble.n	80073fe <__ieee754_log+0x2c6>
 800736c:	4b4e      	ldr	r3, [pc, #312]	; (80074a8 <__ieee754_log+0x370>)
 800736e:	2200      	movs	r2, #0
 8007370:	4650      	mov	r0, sl
 8007372:	4659      	mov	r1, fp
 8007374:	f7f9 f8ec 	bl	8000550 <__aeabi_dmul>
 8007378:	4652      	mov	r2, sl
 800737a:	465b      	mov	r3, fp
 800737c:	f7f9 f8e8 	bl	8000550 <__aeabi_dmul>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	4606      	mov	r6, r0
 8007386:	460f      	mov	r7, r1
 8007388:	4640      	mov	r0, r8
 800738a:	4649      	mov	r1, r9
 800738c:	f7f8 ff2a 	bl	80001e4 <__adddf3>
 8007390:	ec53 2b18 	vmov	r2, r3, d8
 8007394:	f7f9 f8dc 	bl	8000550 <__aeabi_dmul>
 8007398:	4680      	mov	r8, r0
 800739a:	4689      	mov	r9, r1
 800739c:	b964      	cbnz	r4, 80073b8 <__ieee754_log+0x280>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4630      	mov	r0, r6
 80073a4:	4639      	mov	r1, r7
 80073a6:	f7f8 ff1b 	bl	80001e0 <__aeabi_dsub>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	4650      	mov	r0, sl
 80073b0:	4659      	mov	r1, fp
 80073b2:	f7f8 ff15 	bl	80001e0 <__aeabi_dsub>
 80073b6:	e6d6      	b.n	8007166 <__ieee754_log+0x2e>
 80073b8:	a321      	add	r3, pc, #132	; (adr r3, 8007440 <__ieee754_log+0x308>)
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	ec51 0b19 	vmov	r0, r1, d9
 80073c2:	f7f9 f8c5 	bl	8000550 <__aeabi_dmul>
 80073c6:	a320      	add	r3, pc, #128	; (adr r3, 8007448 <__ieee754_log+0x310>)
 80073c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073cc:	4604      	mov	r4, r0
 80073ce:	460d      	mov	r5, r1
 80073d0:	ec51 0b19 	vmov	r0, r1, d9
 80073d4:	f7f9 f8bc 	bl	8000550 <__aeabi_dmul>
 80073d8:	4642      	mov	r2, r8
 80073da:	464b      	mov	r3, r9
 80073dc:	f7f8 ff02 	bl	80001e4 <__adddf3>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4630      	mov	r0, r6
 80073e6:	4639      	mov	r1, r7
 80073e8:	f7f8 fefa 	bl	80001e0 <__aeabi_dsub>
 80073ec:	4652      	mov	r2, sl
 80073ee:	465b      	mov	r3, fp
 80073f0:	f7f8 fef6 	bl	80001e0 <__aeabi_dsub>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4620      	mov	r0, r4
 80073fa:	4629      	mov	r1, r5
 80073fc:	e7d9      	b.n	80073b2 <__ieee754_log+0x27a>
 80073fe:	4602      	mov	r2, r0
 8007400:	460b      	mov	r3, r1
 8007402:	4650      	mov	r0, sl
 8007404:	4659      	mov	r1, fp
 8007406:	f7f8 feeb 	bl	80001e0 <__aeabi_dsub>
 800740a:	ec53 2b18 	vmov	r2, r3, d8
 800740e:	f7f9 f89f 	bl	8000550 <__aeabi_dmul>
 8007412:	4606      	mov	r6, r0
 8007414:	460f      	mov	r7, r1
 8007416:	2c00      	cmp	r4, #0
 8007418:	f43f af23 	beq.w	8007262 <__ieee754_log+0x12a>
 800741c:	a308      	add	r3, pc, #32	; (adr r3, 8007440 <__ieee754_log+0x308>)
 800741e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007422:	ec51 0b19 	vmov	r0, r1, d9
 8007426:	f7f9 f893 	bl	8000550 <__aeabi_dmul>
 800742a:	a307      	add	r3, pc, #28	; (adr r3, 8007448 <__ieee754_log+0x310>)
 800742c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007430:	4604      	mov	r4, r0
 8007432:	460d      	mov	r5, r1
 8007434:	ec51 0b19 	vmov	r0, r1, d9
 8007438:	e727      	b.n	800728a <__ieee754_log+0x152>
 800743a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8007490 <__ieee754_log+0x358>
 800743e:	e694      	b.n	800716a <__ieee754_log+0x32>
 8007440:	fee00000 	.word	0xfee00000
 8007444:	3fe62e42 	.word	0x3fe62e42
 8007448:	35793c76 	.word	0x35793c76
 800744c:	3dea39ef 	.word	0x3dea39ef
 8007450:	55555555 	.word	0x55555555
 8007454:	3fd55555 	.word	0x3fd55555
 8007458:	df3e5244 	.word	0xdf3e5244
 800745c:	3fc2f112 	.word	0x3fc2f112
 8007460:	96cb03de 	.word	0x96cb03de
 8007464:	3fc74664 	.word	0x3fc74664
 8007468:	94229359 	.word	0x94229359
 800746c:	3fd24924 	.word	0x3fd24924
 8007470:	55555593 	.word	0x55555593
 8007474:	3fe55555 	.word	0x3fe55555
 8007478:	d078c69f 	.word	0xd078c69f
 800747c:	3fc39a09 	.word	0x3fc39a09
 8007480:	1d8e78af 	.word	0x1d8e78af
 8007484:	3fcc71c5 	.word	0x3fcc71c5
 8007488:	9997fa04 	.word	0x9997fa04
 800748c:	3fd99999 	.word	0x3fd99999
	...
 8007498:	c3500000 	.word	0xc3500000
 800749c:	43500000 	.word	0x43500000
 80074a0:	7fefffff 	.word	0x7fefffff
 80074a4:	3ff00000 	.word	0x3ff00000
 80074a8:	3fe00000 	.word	0x3fe00000

080074ac <_init>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	bf00      	nop
 80074b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074b2:	bc08      	pop	{r3}
 80074b4:	469e      	mov	lr, r3
 80074b6:	4770      	bx	lr

080074b8 <_fini>:
 80074b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ba:	bf00      	nop
 80074bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074be:	bc08      	pop	{r3}
 80074c0:	469e      	mov	lr, r3
 80074c2:	4770      	bx	lr
