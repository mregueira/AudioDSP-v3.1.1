
AudioDSP-v3.1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000720c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080073a4  080073a4  000173a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073c8  080073c8  000270b8  2**0
                  CONTENTS
  4 .ARM          00000008  080073c8  080073c8  000173c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073d0  080073d0  000270b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073d0  080073d0  000173d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073d4  080073d4  000173d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000070b8  20000000  080073d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  200070b8  0800e490  000270b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007578  0800e490  00027578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000270b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000270e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d5e5  00000000  00000000  0002712b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001de1  00000000  00000000  00034710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  000364f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aed  00000000  00000000  000372d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e35c  00000000  00000000  00037dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ef7  00000000  00000000  00066121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013d276  00000000  00000000  00077018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fd4  00000000  00000000  001b4290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  001b8264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200070b8 	.word	0x200070b8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800738c 	.word	0x0800738c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200070bc 	.word	0x200070bc
 80001d4:	0800738c 	.word	0x0800738c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b970 	b.w	8000de8 <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9e08      	ldr	r6, [sp, #32]
 8000b26:	460d      	mov	r5, r1
 8000b28:	4604      	mov	r4, r0
 8000b2a:	460f      	mov	r7, r1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d14a      	bne.n	8000bc6 <__udivmoddi4+0xa6>
 8000b30:	428a      	cmp	r2, r1
 8000b32:	4694      	mov	ip, r2
 8000b34:	d965      	bls.n	8000c02 <__udivmoddi4+0xe2>
 8000b36:	fab2 f382 	clz	r3, r2
 8000b3a:	b143      	cbz	r3, 8000b4e <__udivmoddi4+0x2e>
 8000b3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b40:	f1c3 0220 	rsb	r2, r3, #32
 8000b44:	409f      	lsls	r7, r3
 8000b46:	fa20 f202 	lsr.w	r2, r0, r2
 8000b4a:	4317      	orrs	r7, r2
 8000b4c:	409c      	lsls	r4, r3
 8000b4e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b52:	fa1f f58c 	uxth.w	r5, ip
 8000b56:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b5a:	0c22      	lsrs	r2, r4, #16
 8000b5c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b60:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b64:	fb01 f005 	mul.w	r0, r1, r5
 8000b68:	4290      	cmp	r0, r2
 8000b6a:	d90a      	bls.n	8000b82 <__udivmoddi4+0x62>
 8000b6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b70:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b74:	f080 811c 	bcs.w	8000db0 <__udivmoddi4+0x290>
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	f240 8119 	bls.w	8000db0 <__udivmoddi4+0x290>
 8000b7e:	3902      	subs	r1, #2
 8000b80:	4462      	add	r2, ip
 8000b82:	1a12      	subs	r2, r2, r0
 8000b84:	b2a4      	uxth	r4, r4
 8000b86:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b8a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b92:	fb00 f505 	mul.w	r5, r0, r5
 8000b96:	42a5      	cmp	r5, r4
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x90>
 8000b9a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ba2:	f080 8107 	bcs.w	8000db4 <__udivmoddi4+0x294>
 8000ba6:	42a5      	cmp	r5, r4
 8000ba8:	f240 8104 	bls.w	8000db4 <__udivmoddi4+0x294>
 8000bac:	4464      	add	r4, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb4:	1b64      	subs	r4, r4, r5
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11e      	cbz	r6, 8000bc2 <__udivmoddi4+0xa2>
 8000bba:	40dc      	lsrs	r4, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e9c6 4300 	strd	r4, r3, [r6]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d908      	bls.n	8000bdc <__udivmoddi4+0xbc>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	f000 80ed 	beq.w	8000daa <__udivmoddi4+0x28a>
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bdc:	fab3 f183 	clz	r1, r3
 8000be0:	2900      	cmp	r1, #0
 8000be2:	d149      	bne.n	8000c78 <__udivmoddi4+0x158>
 8000be4:	42ab      	cmp	r3, r5
 8000be6:	d302      	bcc.n	8000bee <__udivmoddi4+0xce>
 8000be8:	4282      	cmp	r2, r0
 8000bea:	f200 80f8 	bhi.w	8000dde <__udivmoddi4+0x2be>
 8000bee:	1a84      	subs	r4, r0, r2
 8000bf0:	eb65 0203 	sbc.w	r2, r5, r3
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	4617      	mov	r7, r2
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d0e2      	beq.n	8000bc2 <__udivmoddi4+0xa2>
 8000bfc:	e9c6 4700 	strd	r4, r7, [r6]
 8000c00:	e7df      	b.n	8000bc2 <__udivmoddi4+0xa2>
 8000c02:	b902      	cbnz	r2, 8000c06 <__udivmoddi4+0xe6>
 8000c04:	deff      	udf	#255	; 0xff
 8000c06:	fab2 f382 	clz	r3, r2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f040 8090 	bne.w	8000d30 <__udivmoddi4+0x210>
 8000c10:	1a8a      	subs	r2, r1, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c20:	fb07 2015 	mls	r0, r7, r5, r2
 8000c24:	0c22      	lsrs	r2, r4, #16
 8000c26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c2a:	fb0e f005 	mul.w	r0, lr, r5
 8000c2e:	4290      	cmp	r0, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x124>
 8000c32:	eb1c 0202 	adds.w	r2, ip, r2
 8000c36:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x122>
 8000c3c:	4290      	cmp	r0, r2
 8000c3e:	f200 80cb 	bhi.w	8000dd8 <__udivmoddi4+0x2b8>
 8000c42:	4645      	mov	r5, r8
 8000c44:	1a12      	subs	r2, r2, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c4c:	fb07 2210 	mls	r2, r7, r0, r2
 8000c50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c54:	fb0e fe00 	mul.w	lr, lr, r0
 8000c58:	45a6      	cmp	lr, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x14e>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0x14c>
 8000c66:	45a6      	cmp	lr, r4
 8000c68:	f200 80bb 	bhi.w	8000de2 <__udivmoddi4+0x2c2>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c76:	e79f      	b.n	8000bb8 <__udivmoddi4+0x98>
 8000c78:	f1c1 0720 	rsb	r7, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c86:	fa05 f401 	lsl.w	r4, r5, r1
 8000c8a:	fa20 f307 	lsr.w	r3, r0, r7
 8000c8e:	40fd      	lsrs	r5, r7
 8000c90:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	fb09 5518 	mls	r5, r9, r8, r5
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cac:	42a5      	cmp	r5, r4
 8000cae:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb2:	fa00 f001 	lsl.w	r0, r0, r1
 8000cb6:	d90b      	bls.n	8000cd0 <__udivmoddi4+0x1b0>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc0:	f080 8088 	bcs.w	8000dd4 <__udivmoddi4+0x2b4>
 8000cc4:	42a5      	cmp	r5, r4
 8000cc6:	f240 8085 	bls.w	8000dd4 <__udivmoddi4+0x2b4>
 8000cca:	f1a8 0802 	sub.w	r8, r8, #2
 8000cce:	4464      	add	r4, ip
 8000cd0:	1b64      	subs	r4, r4, r5
 8000cd2:	b29d      	uxth	r5, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ce0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1da>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cf0:	d26c      	bcs.n	8000dcc <__udivmoddi4+0x2ac>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	d96a      	bls.n	8000dcc <__udivmoddi4+0x2ac>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fba3 9502 	umull	r9, r5, r3, r2
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	42ac      	cmp	r4, r5
 8000d08:	46c8      	mov	r8, r9
 8000d0a:	46ae      	mov	lr, r5
 8000d0c:	d356      	bcc.n	8000dbc <__udivmoddi4+0x29c>
 8000d0e:	d053      	beq.n	8000db8 <__udivmoddi4+0x298>
 8000d10:	b156      	cbz	r6, 8000d28 <__udivmoddi4+0x208>
 8000d12:	ebb0 0208 	subs.w	r2, r0, r8
 8000d16:	eb64 040e 	sbc.w	r4, r4, lr
 8000d1a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d1e:	40ca      	lsrs	r2, r1
 8000d20:	40cc      	lsrs	r4, r1
 8000d22:	4317      	orrs	r7, r2
 8000d24:	e9c6 7400 	strd	r7, r4, [r6]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d30:	f1c3 0120 	rsb	r1, r3, #32
 8000d34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d38:	fa20 f201 	lsr.w	r2, r0, r1
 8000d3c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d40:	409d      	lsls	r5, r3
 8000d42:	432a      	orrs	r2, r5
 8000d44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d50:	fb07 1510 	mls	r5, r7, r0, r1
 8000d54:	0c11      	lsrs	r1, r2, #16
 8000d56:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d5a:	fb00 f50e 	mul.w	r5, r0, lr
 8000d5e:	428d      	cmp	r5, r1
 8000d60:	fa04 f403 	lsl.w	r4, r4, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x258>
 8000d66:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6e:	d22f      	bcs.n	8000dd0 <__udivmoddi4+0x2b0>
 8000d70:	428d      	cmp	r5, r1
 8000d72:	d92d      	bls.n	8000dd0 <__udivmoddi4+0x2b0>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1b49      	subs	r1, r1, r5
 8000d7a:	b292      	uxth	r2, r2
 8000d7c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d80:	fb07 1115 	mls	r1, r7, r5, r1
 8000d84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d88:	fb05 f10e 	mul.w	r1, r5, lr
 8000d8c:	4291      	cmp	r1, r2
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x282>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d98:	d216      	bcs.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d9a:	4291      	cmp	r1, r2
 8000d9c:	d914      	bls.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d9e:	3d02      	subs	r5, #2
 8000da0:	4462      	add	r2, ip
 8000da2:	1a52      	subs	r2, r2, r1
 8000da4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000da8:	e738      	b.n	8000c1c <__udivmoddi4+0xfc>
 8000daa:	4631      	mov	r1, r6
 8000dac:	4630      	mov	r0, r6
 8000dae:	e708      	b.n	8000bc2 <__udivmoddi4+0xa2>
 8000db0:	4639      	mov	r1, r7
 8000db2:	e6e6      	b.n	8000b82 <__udivmoddi4+0x62>
 8000db4:	4610      	mov	r0, r2
 8000db6:	e6fb      	b.n	8000bb0 <__udivmoddi4+0x90>
 8000db8:	4548      	cmp	r0, r9
 8000dba:	d2a9      	bcs.n	8000d10 <__udivmoddi4+0x1f0>
 8000dbc:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	e7a3      	b.n	8000d10 <__udivmoddi4+0x1f0>
 8000dc8:	4645      	mov	r5, r8
 8000dca:	e7ea      	b.n	8000da2 <__udivmoddi4+0x282>
 8000dcc:	462b      	mov	r3, r5
 8000dce:	e794      	b.n	8000cfa <__udivmoddi4+0x1da>
 8000dd0:	4640      	mov	r0, r8
 8000dd2:	e7d1      	b.n	8000d78 <__udivmoddi4+0x258>
 8000dd4:	46d0      	mov	r8, sl
 8000dd6:	e77b      	b.n	8000cd0 <__udivmoddi4+0x1b0>
 8000dd8:	3d02      	subs	r5, #2
 8000dda:	4462      	add	r2, ip
 8000ddc:	e732      	b.n	8000c44 <__udivmoddi4+0x124>
 8000dde:	4608      	mov	r0, r1
 8000de0:	e70a      	b.n	8000bf8 <__udivmoddi4+0xd8>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	e742      	b.n	8000c6e <__udivmoddi4+0x14e>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <default_download_IC_1>:
/*
 * Default Download
 */
#define DEFAULT_DOWNLOAD_SIZE_IC_1 59

void default_download_IC_1(uint16_t devAddress) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	80fb      	strh	r3, [r7, #6]
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOFT_RESET_IC_1_ADDR, REG_SOFT_RESET_IC_1_BYTE, R0_SOFT_RESET_IC_1_Default );
 8000df6:	88f8      	ldrh	r0, [r7, #6]
 8000df8:	4bc5      	ldr	r3, [pc, #788]	; (8001110 <default_download_IC_1+0x324>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	f64f 0190 	movw	r1, #63632	; 0xf890
 8000e00:	f002 fa22 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOFT_RESET_IC_1_ADDR, REG_SOFT_RESET_IC_1_BYTE, R1_SOFT_RESET_IC_1_Default );
 8000e04:	88f8      	ldrh	r0, [r7, #6]
 8000e06:	4bc3      	ldr	r3, [pc, #780]	; (8001114 <default_download_IC_1+0x328>)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	f64f 0190 	movw	r1, #63632	; 0xf890
 8000e0e:	f002 fa1b 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( devAddress, R2_RESET_DELAY_IC_1_SIZE, R2_RESET_DELAY_IC_1_Default );
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	4ac0      	ldr	r2, [pc, #768]	; (8001118 <default_download_IC_1+0x32c>)
 8000e16:	2102      	movs	r1, #2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 fa39 	bl	8003290 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R3_HIBERNATE_IC_1_Default );
 8000e1e:	88f8      	ldrh	r0, [r7, #6]
 8000e20:	4bbe      	ldr	r3, [pc, #760]	; (800111c <default_download_IC_1+0x330>)
 8000e22:	2202      	movs	r2, #2
 8000e24:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8000e28:	f002 fa0e 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R4_HIBERNATE_IC_1_Default );
 8000e2c:	88f8      	ldrh	r0, [r7, #6]
 8000e2e:	4bbc      	ldr	r3, [pc, #752]	; (8001120 <default_download_IC_1+0x334>)
 8000e30:	2202      	movs	r2, #2
 8000e32:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8000e36:	f002 fa07 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( devAddress, R5_HIBERNATE_DELAY_IC_1_SIZE, R5_HIBERNATE_DELAY_IC_1_Default );
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	4ab9      	ldr	r2, [pc, #740]	; (8001124 <default_download_IC_1+0x338>)
 8000e3e:	2102      	movs	r1, #2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 fa25 	bl	8003290 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R6_KILL_CORE_IC_1_Default );
 8000e46:	88f8      	ldrh	r0, [r7, #6]
 8000e48:	4bb7      	ldr	r3, [pc, #732]	; (8001128 <default_download_IC_1+0x33c>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	f24f 4103 	movw	r1, #62467	; 0xf403
 8000e50:	f002 f9fa 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R7_KILL_CORE_IC_1_Default );
 8000e54:	88f8      	ldrh	r0, [r7, #6]
 8000e56:	4bb5      	ldr	r3, [pc, #724]	; (800112c <default_download_IC_1+0x340>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	f24f 4103 	movw	r1, #62467	; 0xf403
 8000e5e:	f002 f9f3 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_PLL_ENABLE_IC_1_ADDR, REG_PLL_ENABLE_IC_1_BYTE, R8_PLL_ENABLE_IC_1_Default );
 8000e62:	88f8      	ldrh	r0, [r7, #6]
 8000e64:	4bb2      	ldr	r3, [pc, #712]	; (8001130 <default_download_IC_1+0x344>)
 8000e66:	2202      	movs	r2, #2
 8000e68:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000e6c:	f002 f9ec 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_PLL_CTRL1_IC_1_ADDR, REG_PLL_CTRL1_IC_1_BYTE, R9_PLL_CTRL1_IC_1_Default );
 8000e70:	88f8      	ldrh	r0, [r7, #6]
 8000e72:	4bb0      	ldr	r3, [pc, #704]	; (8001134 <default_download_IC_1+0x348>)
 8000e74:	2202      	movs	r2, #2
 8000e76:	f24f 0101 	movw	r1, #61441	; 0xf001
 8000e7a:	f002 f9e5 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_PLL_CLK_SRC_IC_1_ADDR, REG_PLL_CLK_SRC_IC_1_BYTE, R10_PLL_CLK_SRC_IC_1_Default );
 8000e7e:	88f8      	ldrh	r0, [r7, #6]
 8000e80:	4bad      	ldr	r3, [pc, #692]	; (8001138 <default_download_IC_1+0x34c>)
 8000e82:	2202      	movs	r2, #2
 8000e84:	f24f 0102 	movw	r1, #61442	; 0xf002
 8000e88:	f002 f9de 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MCLK_OUT_IC_1_ADDR, REG_MCLK_OUT_IC_1_BYTE, R11_MCLK_OUT_IC_1_Default );
 8000e8c:	88f8      	ldrh	r0, [r7, #6]
 8000e8e:	4bab      	ldr	r3, [pc, #684]	; (800113c <default_download_IC_1+0x350>)
 8000e90:	2202      	movs	r2, #2
 8000e92:	f24f 0105 	movw	r1, #61445	; 0xf005
 8000e96:	f002 f9d7 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_PLL_ENABLE_IC_1_ADDR, REG_PLL_ENABLE_IC_1_BYTE, R12_PLL_ENABLE_IC_1_Default );
 8000e9a:	88f8      	ldrh	r0, [r7, #6]
 8000e9c:	4ba8      	ldr	r3, [pc, #672]	; (8001140 <default_download_IC_1+0x354>)
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000ea4:	f002 f9d0 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( devAddress, R13_PLL_LOCK_DELAY_IC_1_SIZE, R13_PLL_LOCK_DELAY_IC_1_Default );
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	4aa6      	ldr	r2, [pc, #664]	; (8001144 <default_download_IC_1+0x358>)
 8000eac:	2102      	movs	r1, #2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 f9ee 	bl	8003290 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_POWER_ENABLE0_IC_1_ADDR, REG_POWER_ENABLE0_IC_1_BYTE, R14_POWER_ENABLE0_IC_1_Default );
 8000eb4:	88f8      	ldrh	r0, [r7, #6]
 8000eb6:	4ba4      	ldr	r3, [pc, #656]	; (8001148 <default_download_IC_1+0x35c>)
 8000eb8:	2202      	movs	r2, #2
 8000eba:	f24f 0150 	movw	r1, #61520	; 0xf050
 8000ebe:	f002 f9c3 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_POWER_ENABLE1_IC_1_ADDR, REG_POWER_ENABLE1_IC_1_BYTE, R15_POWER_ENABLE1_IC_1_Default );
 8000ec2:	88f8      	ldrh	r0, [r7, #6]
 8000ec4:	4ba1      	ldr	r3, [pc, #644]	; (800114c <default_download_IC_1+0x360>)
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	f24f 0151 	movw	r1, #61521	; 0xf051
 8000ecc:	f002 f9bc 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_ASRC_MUTE_IC_1_ADDR, REG_ASRC_MUTE_IC_1_BYTE, R16_ASRC_MUTE_IC_1_Default );
 8000ed0:	88f8      	ldrh	r0, [r7, #6]
 8000ed2:	4b9f      	ldr	r3, [pc, #636]	; (8001150 <default_download_IC_1+0x364>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	f24f 5181 	movw	r1, #62849	; 0xf581
 8000eda:	f002 f9b5 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_CLK_GEN1_M_IC_1_ADDR, REG_CLK_GEN1_M_IC_1_BYTE, R17_CLK_GEN1_M_IC_1_Default );
 8000ede:	88f8      	ldrh	r0, [r7, #6]
 8000ee0:	4b9c      	ldr	r3, [pc, #624]	; (8001154 <default_download_IC_1+0x368>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	f24f 0120 	movw	r1, #61472	; 0xf020
 8000ee8:	f002 f9ae 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_CLK_GEN1_N_IC_1_ADDR, REG_CLK_GEN1_N_IC_1_BYTE, R18_CLK_GEN1_N_IC_1_Default );
 8000eec:	88f8      	ldrh	r0, [r7, #6]
 8000eee:	4b9a      	ldr	r3, [pc, #616]	; (8001158 <default_download_IC_1+0x36c>)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	f24f 0121 	movw	r1, #61473	; 0xf021
 8000ef6:	f002 f9a7 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_CLK_GEN2_M_IC_1_ADDR, REG_CLK_GEN2_M_IC_1_BYTE, R19_CLK_GEN2_M_IC_1_Default );
 8000efa:	88f8      	ldrh	r0, [r7, #6]
 8000efc:	4b97      	ldr	r3, [pc, #604]	; (800115c <default_download_IC_1+0x370>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	f24f 0122 	movw	r1, #61474	; 0xf022
 8000f04:	f002 f9a0 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_CLK_GEN2_N_IC_1_ADDR, REG_CLK_GEN2_N_IC_1_BYTE, R20_CLK_GEN2_N_IC_1_Default );
 8000f08:	88f8      	ldrh	r0, [r7, #6]
 8000f0a:	4b95      	ldr	r3, [pc, #596]	; (8001160 <default_download_IC_1+0x374>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	f24f 0123 	movw	r1, #61475	; 0xf023
 8000f12:	f002 f999 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_CLK_GEN3_M_IC_1_ADDR, REG_CLK_GEN3_M_IC_1_BYTE, R21_CLK_GEN3_M_IC_1_Default );
 8000f16:	88f8      	ldrh	r0, [r7, #6]
 8000f18:	4b92      	ldr	r3, [pc, #584]	; (8001164 <default_download_IC_1+0x378>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	f24f 0124 	movw	r1, #61476	; 0xf024
 8000f20:	f002 f992 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_CLK_GEN3_N_IC_1_ADDR, REG_CLK_GEN3_N_IC_1_BYTE, R22_CLK_GEN3_N_IC_1_Default );
 8000f24:	88f8      	ldrh	r0, [r7, #6]
 8000f26:	4b90      	ldr	r3, [pc, #576]	; (8001168 <default_download_IC_1+0x37c>)
 8000f28:	2202      	movs	r2, #2
 8000f2a:	f24f 0125 	movw	r1, #61477	; 0xf025
 8000f2e:	f002 f98b 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP0_MODE_IC_1_ADDR, REG_MP0_MODE_IC_1_BYTE, R23_MP0_MODE_IC_1_Default );
 8000f32:	88f8      	ldrh	r0, [r7, #6]
 8000f34:	4b8d      	ldr	r3, [pc, #564]	; (800116c <default_download_IC_1+0x380>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	f24f 5110 	movw	r1, #62736	; 0xf510
 8000f3c:	f002 f984 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP1_MODE_IC_1_ADDR, REG_MP1_MODE_IC_1_BYTE, R24_MP1_MODE_IC_1_Default );
 8000f40:	88f8      	ldrh	r0, [r7, #6]
 8000f42:	4b8b      	ldr	r3, [pc, #556]	; (8001170 <default_download_IC_1+0x384>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	f24f 5111 	movw	r1, #62737	; 0xf511
 8000f4a:	f002 f97d 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP2_MODE_IC_1_ADDR, REG_MP2_MODE_IC_1_BYTE, R25_MP2_MODE_IC_1_Default );
 8000f4e:	88f8      	ldrh	r0, [r7, #6]
 8000f50:	4b88      	ldr	r3, [pc, #544]	; (8001174 <default_download_IC_1+0x388>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	f24f 5112 	movw	r1, #62738	; 0xf512
 8000f58:	f002 f976 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP3_MODE_IC_1_ADDR, REG_MP3_MODE_IC_1_BYTE, R26_MP3_MODE_IC_1_Default );
 8000f5c:	88f8      	ldrh	r0, [r7, #6]
 8000f5e:	4b86      	ldr	r3, [pc, #536]	; (8001178 <default_download_IC_1+0x38c>)
 8000f60:	2202      	movs	r2, #2
 8000f62:	f24f 5113 	movw	r1, #62739	; 0xf513
 8000f66:	f002 f96f 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP6_MODE_IC_1_ADDR, REG_MP6_MODE_IC_1_BYTE, R27_MP6_MODE_IC_1_Default );
 8000f6a:	88f8      	ldrh	r0, [r7, #6]
 8000f6c:	4b83      	ldr	r3, [pc, #524]	; (800117c <default_download_IC_1+0x390>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	f24f 5116 	movw	r1, #62742	; 0xf516
 8000f74:	f002 f968 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP7_MODE_IC_1_ADDR, REG_MP7_MODE_IC_1_BYTE, R28_MP7_MODE_IC_1_Default );
 8000f78:	88f8      	ldrh	r0, [r7, #6]
 8000f7a:	4b81      	ldr	r3, [pc, #516]	; (8001180 <default_download_IC_1+0x394>)
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	f24f 5117 	movw	r1, #62743	; 0xf517
 8000f82:	f002 f961 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SCLK_SCL_PIN_IC_1_ADDR, REG_SCLK_SCL_PIN_IC_1_BYTE, R29_SCLK_SCL_PIN_IC_1_Default );
 8000f86:	88f8      	ldrh	r0, [r7, #6]
 8000f88:	4b7e      	ldr	r3, [pc, #504]	; (8001184 <default_download_IC_1+0x398>)
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	f24f 7199 	movw	r1, #63385	; 0xf799
 8000f90:	f002 f95a 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MISO_SDA_PIN_IC_1_ADDR, REG_MISO_SDA_PIN_IC_1_BYTE, R30_MISO_SDA_PIN_IC_1_Default );
 8000f94:	88f8      	ldrh	r0, [r7, #6]
 8000f96:	4b7c      	ldr	r3, [pc, #496]	; (8001188 <default_download_IC_1+0x39c>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	f24f 719a 	movw	r1, #63386	; 0xf79a
 8000f9e:	f002 f953 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SS_PIN_IC_1_ADDR, REG_SS_PIN_IC_1_BYTE, R31_SS_PIN_IC_1_Default );
 8000fa2:	88f8      	ldrh	r0, [r7, #6]
 8000fa4:	4b79      	ldr	r3, [pc, #484]	; (800118c <default_download_IC_1+0x3a0>)
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	f24f 719b 	movw	r1, #63387	; 0xf79b
 8000fac:	f002 f94c 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MOSI_ADDR1_PIN_IC_1_ADDR, REG_MOSI_ADDR1_PIN_IC_1_BYTE, R32_MOSI_ADDR1_PIN_IC_1_Default );
 8000fb0:	88f8      	ldrh	r0, [r7, #6]
 8000fb2:	4b77      	ldr	r3, [pc, #476]	; (8001190 <default_download_IC_1+0x3a4>)
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f24f 719c 	movw	r1, #63388	; 0xf79c
 8000fba:	f002 f945 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE0_IC_1_ADDR, REG_SOUT_SOURCE0_IC_1_BYTE, R33_SOUT_SOURCE0_IC_1_Default );
 8000fbe:	88f8      	ldrh	r0, [r7, #6]
 8000fc0:	4b74      	ldr	r3, [pc, #464]	; (8001194 <default_download_IC_1+0x3a8>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	f24f 1180 	movw	r1, #61824	; 0xf180
 8000fc8:	f002 f93e 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_0_0_IC_1_ADDR, REG_SERIAL_BYTE_0_0_IC_1_BYTE, R34_SERIAL_BYTE_0_0_IC_1_Default );
 8000fcc:	88f8      	ldrh	r0, [r7, #6]
 8000fce:	4b72      	ldr	r3, [pc, #456]	; (8001198 <default_download_IC_1+0x3ac>)
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	f44f 4172 	mov.w	r1, #61952	; 0xf200
 8000fd6:	f002 f937 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_1_0_IC_1_ADDR, REG_SERIAL_BYTE_1_0_IC_1_BYTE, R35_SERIAL_BYTE_1_0_IC_1_Default );
 8000fda:	88f8      	ldrh	r0, [r7, #6]
 8000fdc:	4b6f      	ldr	r3, [pc, #444]	; (800119c <default_download_IC_1+0x3b0>)
 8000fde:	2202      	movs	r2, #2
 8000fe0:	f24f 2104 	movw	r1, #61956	; 0xf204
 8000fe4:	f002 f930 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_1_1_IC_1_ADDR, REG_SERIAL_BYTE_1_1_IC_1_BYTE, R36_SERIAL_BYTE_1_1_IC_1_Default );
 8000fe8:	88f8      	ldrh	r0, [r7, #6]
 8000fea:	4b6d      	ldr	r3, [pc, #436]	; (80011a0 <default_download_IC_1+0x3b4>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	f24f 2105 	movw	r1, #61957	; 0xf205
 8000ff2:	f002 f929 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_2_0_IC_1_ADDR, REG_SERIAL_BYTE_2_0_IC_1_BYTE, R37_SERIAL_BYTE_2_0_IC_1_Default );
 8000ff6:	88f8      	ldrh	r0, [r7, #6]
 8000ff8:	4b6a      	ldr	r3, [pc, #424]	; (80011a4 <default_download_IC_1+0x3b8>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	f24f 2108 	movw	r1, #61960	; 0xf208
 8001000:	f002 f922 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_2_1_IC_1_ADDR, REG_SERIAL_BYTE_2_1_IC_1_BYTE, R38_SERIAL_BYTE_2_1_IC_1_Default );
 8001004:	88f8      	ldrh	r0, [r7, #6]
 8001006:	4b68      	ldr	r3, [pc, #416]	; (80011a8 <default_download_IC_1+0x3bc>)
 8001008:	2202      	movs	r2, #2
 800100a:	f24f 2109 	movw	r1, #61961	; 0xf209
 800100e:	f002 f91b 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_3_0_IC_1_ADDR, REG_SERIAL_BYTE_3_0_IC_1_BYTE, R39_SERIAL_BYTE_3_0_IC_1_Default );
 8001012:	88f8      	ldrh	r0, [r7, #6]
 8001014:	4b65      	ldr	r3, [pc, #404]	; (80011ac <default_download_IC_1+0x3c0>)
 8001016:	2202      	movs	r2, #2
 8001018:	f24f 210c 	movw	r1, #61964	; 0xf20c
 800101c:	f002 f914 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_3_1_IC_1_ADDR, REG_SERIAL_BYTE_3_1_IC_1_BYTE, R40_SERIAL_BYTE_3_1_IC_1_Default );
 8001020:	88f8      	ldrh	r0, [r7, #6]
 8001022:	4b63      	ldr	r3, [pc, #396]	; (80011b0 <default_download_IC_1+0x3c4>)
 8001024:	2202      	movs	r2, #2
 8001026:	f24f 210d 	movw	r1, #61965	; 0xf20d
 800102a:	f002 f90d 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_4_0_IC_1_ADDR, REG_SERIAL_BYTE_4_0_IC_1_BYTE, R41_SERIAL_BYTE_4_0_IC_1_Default );
 800102e:	88f8      	ldrh	r0, [r7, #6]
 8001030:	4b60      	ldr	r3, [pc, #384]	; (80011b4 <default_download_IC_1+0x3c8>)
 8001032:	2202      	movs	r2, #2
 8001034:	f24f 2110 	movw	r1, #61968	; 0xf210
 8001038:	f002 f906 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_5_0_IC_1_ADDR, REG_SERIAL_BYTE_5_0_IC_1_BYTE, R42_SERIAL_BYTE_5_0_IC_1_Default );
 800103c:	88f8      	ldrh	r0, [r7, #6]
 800103e:	4b5e      	ldr	r3, [pc, #376]	; (80011b8 <default_download_IC_1+0x3cc>)
 8001040:	2202      	movs	r2, #2
 8001042:	f24f 2114 	movw	r1, #61972	; 0xf214
 8001046:	f002 f8ff 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_5_1_IC_1_ADDR, REG_SERIAL_BYTE_5_1_IC_1_BYTE, R43_SERIAL_BYTE_5_1_IC_1_Default );
 800104a:	88f8      	ldrh	r0, [r7, #6]
 800104c:	4b5b      	ldr	r3, [pc, #364]	; (80011bc <default_download_IC_1+0x3d0>)
 800104e:	2202      	movs	r2, #2
 8001050:	f24f 2115 	movw	r1, #61973	; 0xf215
 8001054:	f002 f8f8 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_6_0_IC_1_ADDR, REG_SERIAL_BYTE_6_0_IC_1_BYTE, R44_SERIAL_BYTE_6_0_IC_1_Default );
 8001058:	88f8      	ldrh	r0, [r7, #6]
 800105a:	4b59      	ldr	r3, [pc, #356]	; (80011c0 <default_download_IC_1+0x3d4>)
 800105c:	2202      	movs	r2, #2
 800105e:	f24f 2118 	movw	r1, #61976	; 0xf218
 8001062:	f002 f8f1 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_6_1_IC_1_ADDR, REG_SERIAL_BYTE_6_1_IC_1_BYTE, R45_SERIAL_BYTE_6_1_IC_1_Default );
 8001066:	88f8      	ldrh	r0, [r7, #6]
 8001068:	4b56      	ldr	r3, [pc, #344]	; (80011c4 <default_download_IC_1+0x3d8>)
 800106a:	2202      	movs	r2, #2
 800106c:	f24f 2119 	movw	r1, #61977	; 0xf219
 8001070:	f002 f8ea 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_7_0_IC_1_ADDR, REG_SERIAL_BYTE_7_0_IC_1_BYTE, R46_SERIAL_BYTE_7_0_IC_1_Default );
 8001074:	88f8      	ldrh	r0, [r7, #6]
 8001076:	4b54      	ldr	r3, [pc, #336]	; (80011c8 <default_download_IC_1+0x3dc>)
 8001078:	2202      	movs	r2, #2
 800107a:	f24f 211c 	movw	r1, #61980	; 0xf21c
 800107e:	f002 f8e3 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_7_1_IC_1_ADDR, REG_SERIAL_BYTE_7_1_IC_1_BYTE, R47_SERIAL_BYTE_7_1_IC_1_Default );
 8001082:	88f8      	ldrh	r0, [r7, #6]
 8001084:	4b51      	ldr	r3, [pc, #324]	; (80011cc <default_download_IC_1+0x3e0>)
 8001086:	2202      	movs	r2, #2
 8001088:	f24f 211d 	movw	r1, #61981	; 0xf21d
 800108c:	f002 f8dc 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP7_MODE1_IC_1_ADDR, REG_MP7_MODE1_IC_1_BYTE, R48_MP7_MODE1_IC_1_Default );
 8001090:	88f8      	ldrh	r0, [r7, #6]
 8001092:	4b4f      	ldr	r3, [pc, #316]	; (80011d0 <default_download_IC_1+0x3e4>)
 8001094:	2202      	movs	r2, #2
 8001096:	f24f 51c7 	movw	r1, #62919	; 0xf5c7
 800109a:	f002 f8d5 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
 800109e:	88f8      	ldrh	r0, [r7, #6]
 80010a0:	4b4c      	ldr	r3, [pc, #304]	; (80011d4 <default_download_IC_1+0x3e8>)
 80010a2:	f243 6278 	movw	r2, #13944	; 0x3678
 80010a6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80010aa:	f002 f8cd 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, PARAM_ADDR_IC_1, PARAM_SIZE_IC_1, Param_Data_IC_1 );
 80010ae:	88f8      	ldrh	r0, [r7, #6]
 80010b0:	4b49      	ldr	r3, [pc, #292]	; (80011d8 <default_download_IC_1+0x3ec>)
 80010b2:	f642 4238 	movw	r2, #11320	; 0x2c38
 80010b6:	2100      	movs	r1, #0
 80010b8:	f002 f8c6 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, DM1_DATA_ADDR_IC_1, DM1_DATA_SIZE_IC_1, DM1_DATA_Data_IC_1 );
 80010bc:	88f8      	ldrh	r0, [r7, #6]
 80010be:	4b47      	ldr	r3, [pc, #284]	; (80011dc <default_download_IC_1+0x3f0>)
 80010c0:	f44f 624f 	mov.w	r2, #3312	; 0xcf0
 80010c4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80010c8:	f002 f8be 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R52_KILL_CORE_IC_1_Default );
 80010cc:	88f8      	ldrh	r0, [r7, #6]
 80010ce:	4b44      	ldr	r3, [pc, #272]	; (80011e0 <default_download_IC_1+0x3f4>)
 80010d0:	2202      	movs	r2, #2
 80010d2:	f24f 4103 	movw	r1, #62467	; 0xf403
 80010d6:	f002 f8b7 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_START_ADDRESS_IC_1_ADDR, REG_START_ADDRESS_IC_1_BYTE, R53_START_ADDRESS_IC_1_Default );
 80010da:	88f8      	ldrh	r0, [r7, #6]
 80010dc:	4b41      	ldr	r3, [pc, #260]	; (80011e4 <default_download_IC_1+0x3f8>)
 80010de:	2202      	movs	r2, #2
 80010e0:	f24f 4104 	movw	r1, #62468	; 0xf404
 80010e4:	f002 f8b0 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_START_PULSE_IC_1_ADDR, REG_START_PULSE_IC_1_BYTE, R54_START_PULSE_IC_1_Default );
 80010e8:	88f8      	ldrh	r0, [r7, #6]
 80010ea:	4b3f      	ldr	r3, [pc, #252]	; (80011e8 <default_download_IC_1+0x3fc>)
 80010ec:	2202      	movs	r2, #2
 80010ee:	f24f 4101 	movw	r1, #62465	; 0xf401
 80010f2:	f002 f8a9 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_START_CORE_IC_1_ADDR, REG_START_CORE_IC_1_BYTE, R55_START_CORE_IC_1_Default );
 80010f6:	88f8      	ldrh	r0, [r7, #6]
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <default_download_IC_1+0x400>)
 80010fa:	2202      	movs	r2, #2
 80010fc:	f24f 4102 	movw	r1, #62466	; 0xf402
 8001100:	f002 f8a2 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_START_CORE_IC_1_ADDR, REG_START_CORE_IC_1_BYTE, R56_START_CORE_IC_1_Default );
 8001104:	88f8      	ldrh	r0, [r7, #6]
 8001106:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <default_download_IC_1+0x404>)
 8001108:	2202      	movs	r2, #2
 800110a:	f24f 4102 	movw	r1, #62466	; 0xf402
 800110e:	e071      	b.n	80011f4 <default_download_IC_1+0x408>
 8001110:	200070d4 	.word	0x200070d4
 8001114:	20006fa0 	.word	0x20006fa0
 8001118:	20006fa4 	.word	0x20006fa4
 800111c:	200070d8 	.word	0x200070d8
 8001120:	20006fa8 	.word	0x20006fa8
 8001124:	20006fac 	.word	0x20006fac
 8001128:	200070dc 	.word	0x200070dc
 800112c:	20006fb0 	.word	0x20006fb0
 8001130:	200070e0 	.word	0x200070e0
 8001134:	20006fb4 	.word	0x20006fb4
 8001138:	20006fb8 	.word	0x20006fb8
 800113c:	20006fbc 	.word	0x20006fbc
 8001140:	20006fc0 	.word	0x20006fc0
 8001144:	20006fc4 	.word	0x20006fc4
 8001148:	20006fc8 	.word	0x20006fc8
 800114c:	200070e4 	.word	0x200070e4
 8001150:	20006fcc 	.word	0x20006fcc
 8001154:	20006fd0 	.word	0x20006fd0
 8001158:	20006fd4 	.word	0x20006fd4
 800115c:	20006fd8 	.word	0x20006fd8
 8001160:	20006fdc 	.word	0x20006fdc
 8001164:	20006fe0 	.word	0x20006fe0
 8001168:	20006fe4 	.word	0x20006fe4
 800116c:	20006fe8 	.word	0x20006fe8
 8001170:	20006fec 	.word	0x20006fec
 8001174:	20006ff0 	.word	0x20006ff0
 8001178:	20006ff4 	.word	0x20006ff4
 800117c:	20006ff8 	.word	0x20006ff8
 8001180:	20006ffc 	.word	0x20006ffc
 8001184:	20007000 	.word	0x20007000
 8001188:	20007004 	.word	0x20007004
 800118c:	20007008 	.word	0x20007008
 8001190:	2000700c 	.word	0x2000700c
 8001194:	20007010 	.word	0x20007010
 8001198:	20007014 	.word	0x20007014
 800119c:	20007018 	.word	0x20007018
 80011a0:	2000701c 	.word	0x2000701c
 80011a4:	20007020 	.word	0x20007020
 80011a8:	20007024 	.word	0x20007024
 80011ac:	20007028 	.word	0x20007028
 80011b0:	2000702c 	.word	0x2000702c
 80011b4:	20007030 	.word	0x20007030
 80011b8:	20007034 	.word	0x20007034
 80011bc:	20007038 	.word	0x20007038
 80011c0:	2000703c 	.word	0x2000703c
 80011c4:	20007040 	.word	0x20007040
 80011c8:	20007044 	.word	0x20007044
 80011cc:	20007048 	.word	0x20007048
 80011d0:	2000704c 	.word	0x2000704c
 80011d4:	20000cf0 	.word	0x20000cf0
 80011d8:	20004368 	.word	0x20004368
 80011dc:	20000000 	.word	0x20000000
 80011e0:	200070e8 	.word	0x200070e8
 80011e4:	200070ec 	.word	0x200070ec
 80011e8:	20007050 	.word	0x20007050
 80011ec:	200070f0 	.word	0x200070f0
 80011f0:	20007054 	.word	0x20007054
 80011f4:	f002 f828 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( devAddress, R57_START_DELAY_IC_1_SIZE, R57_START_DELAY_IC_1_Default );
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <default_download_IC_1+0x430>)
 80011fc:	2102      	movs	r1, #2
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 f846 	bl	8003290 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R58_HIBERNATE_IC_1_Default );
 8001204:	88f8      	ldrh	r0, [r7, #6]
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <default_download_IC_1+0x434>)
 8001208:	2202      	movs	r2, #2
 800120a:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 800120e:	f002 f81b 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20007058 	.word	0x20007058
 8001220:	200070f4 	.word	0x200070f4

08001224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 800122a:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	  uint16_t k = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
	  uint16_t pote_aux = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
	  uint32_t loud_data[30]; // Fixed loudness values
	  uint32_t boost_data[30]; // Fixed boost loudness values
	  uint32_t comp_data[30]; // Fixed compensation values

	  // Band Address Assign
	  BandAddress[0] = MOD_BAND32_SEL_DCINPALG145X4VALUE_ADDR;
 8001238:	f640 0382 	movw	r3, #2178	; 0x882
 800123c:	f8a7 31e4 	strh.w	r3, [r7, #484]	; 0x1e4
	  BandAddress[1] = MOD_BAND64_SEL_DCINPALG145X5VALUE_ADDR;
 8001240:	f640 0383 	movw	r3, #2179	; 0x883
 8001244:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
	  BandAddress[2] = MOD_BAND128_SEL_DCINPALG145X6VALUE_ADDR;
 8001248:	f640 037a 	movw	r3, #2170	; 0x87a
 800124c:	f8a7 31e8 	strh.w	r3, [r7, #488]	; 0x1e8
	  BandAddress[3] = MOD_BAND256_SEL_DCINPALG145X7VALUE_ADDR;
 8001250:	f640 037b 	movw	r3, #2171	; 0x87b
 8001254:	f8a7 31ea 	strh.w	r3, [r7, #490]	; 0x1ea
	  BandAddress[4] = MOD_BAND512_SEL_DCINPALG145X8VALUE_ADDR;
 8001258:	f640 0372 	movw	r3, #2162	; 0x872
 800125c:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
	  BandAddress[5] = MOD_BAND1K_SEL_DCINPALG145X9VALUE_ADDR;
 8001260:	f640 0373 	movw	r3, #2163	; 0x873
 8001264:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	  BandAddress[6] = MOD_BAND2K_SEL_DCINPALG145X10VALUE_ADDR;
 8001268:	f640 036a 	movw	r3, #2154	; 0x86a
 800126c:	f8a7 31f0 	strh.w	r3, [r7, #496]	; 0x1f0
	  BandAddress[7] = MOD_BAND4K_SEL_DCINPALG145X11VALUE_ADDR;
 8001270:	f640 036b 	movw	r3, #2155	; 0x86b
 8001274:	f8a7 31f2 	strh.w	r3, [r7, #498]	; 0x1f2
	  BandAddress[8] = MOD_BAND8K_SEL_DCINPALG145X12VALUE_ADDR;
 8001278:	f240 73af 	movw	r3, #1967	; 0x7af
 800127c:	f8a7 31f4 	strh.w	r3, [r7, #500]	; 0x1f4
	  BandAddress[9] = MOD_BAND16K_SEL_DCINPALG145X13VALUE_ADDR;
 8001280:	f640 035c 	movw	r3, #2140	; 0x85c
 8001284:	f8a7 31f6 	strh.w	r3, [r7, #502]	; 0x1f6
	  //BandAddress[VOL_SUB] = MOD_VOLHP_GAINALGNS145X4GAIN_ADDR; // Subwoofer Volume
	  BandAddress[VOL_ARRAY] = MOD_VOL_GAINALGNS145X1GAIN_ADDR; // General Volume
 8001288:	f640 0362 	movw	r3, #2146	; 0x862
 800128c:	f8a7 31fa 	strh.w	r3, [r7, #506]	; 0x1fa
	  BandAddress[LOUD_LOW_ARRAY] = MOD_LOUD_ALG0_LEVEL0_ADDR;
 8001290:	f240 13d1 	movw	r3, #465	; 0x1d1
 8001294:	f8a7 31fc 	strh.w	r3, [r7, #508]	; 0x1fc
	  BandAddress[LOUD_HIGH_ARRAY] = MOD_LOUD_ALG0_LEVEL1_ADDR;
 8001298:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
 800129c:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
	  BandAddress[LOUD_GRL_ARRAY] = MOD_LOUD_SEL_DCINPALG145X15VALUE_ADDR;
 80012a0:	f640 035e 	movw	r3, #2142	; 0x85e
 80012a4:	f8a7 3200 	strh.w	r3, [r7, #512]	; 0x200

	  // 8.24 FixPoint Volume
	  vol_data[29] = 0x01000000; // 0dB
 80012a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	  vol_data[28] = 0x00CB5918; // -2dB
 80012b0:	4bc2      	ldr	r3, [pc, #776]	; (80015bc <main+0x398>)
 80012b2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	  vol_data[27] = 0x00A1866C; // -4dB
 80012b6:	4bc2      	ldr	r3, [pc, #776]	; (80015c0 <main+0x39c>)
 80012b8:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	  vol_data[26] = 0x00804DCE; // -6dB
 80012bc:	4bc1      	ldr	r3, [pc, #772]	; (80015c4 <main+0x3a0>)
 80012be:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	  vol_data[25] = 0x0065EA5A; // -8dB
 80012c2:	4bc1      	ldr	r3, [pc, #772]	; (80015c8 <main+0x3a4>)
 80012c4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	  vol_data[24] = 0x0050F44E; // -10dB
 80012c8:	4bc0      	ldr	r3, [pc, #768]	; (80015cc <main+0x3a8>)
 80012ca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	  vol_data[23] = 0x00404DE6; // -12dB
 80012ce:	4bc0      	ldr	r3, [pc, #768]	; (80015d0 <main+0x3ac>)
 80012d0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	  vol_data[22] = 0x00331427; // -14dB (-7.2dB)
 80012d4:	4bbf      	ldr	r3, [pc, #764]	; (80015d4 <main+0x3b0>)
 80012d6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	  vol_data[21] = 0x002892C2; // -16dB
 80012da:	4bbf      	ldr	r3, [pc, #764]	; (80015d8 <main+0x3b4>)
 80012dc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	  vol_data[20] = 0x00203A7E; // -18dB
 80012e0:	4bbe      	ldr	r3, [pc, #760]	; (80015dc <main+0x3b8>)
 80012e2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	  vol_data[19] = 0x0019999A; // -20dB
 80012e6:	4bbe      	ldr	r3, [pc, #760]	; (80015e0 <main+0x3bc>)
 80012e8:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	  vol_data[18] = 0x001455B6; // -22dB
 80012ec:	4bbd      	ldr	r3, [pc, #756]	; (80015e4 <main+0x3c0>)
 80012ee:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	  vol_data[17] = 0x0010270B; // -24dB
 80012f2:	4bbd      	ldr	r3, [pc, #756]	; (80015e8 <main+0x3c4>)
 80012f4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	  vol_data[16] = 0x000CD495; // -26dB
 80012f8:	4bbc      	ldr	r3, [pc, #752]	; (80015ec <main+0x3c8>)
 80012fa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	  vol_data[15] = 0x000A3109; // -28dB
 80012fe:	4bbc      	ldr	r3, [pc, #752]	; (80015f0 <main+0x3cc>)
 8001300:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	  vol_data[14] = 0x0008186E; // -30dB
 8001304:	4bbb      	ldr	r3, [pc, #748]	; (80015f4 <main+0x3d0>)
 8001306:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	  vol_data[13] = 0x00066E31; // -32dB
 800130a:	4bbb      	ldr	r3, [pc, #748]	; (80015f8 <main+0x3d4>)
 800130c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	  vol_data[12] = 0x00051B9D; // -34dB
 8001310:	4bba      	ldr	r3, [pc, #744]	; (80015fc <main+0x3d8>)
 8001312:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	  vol_data[11] = 0x00040EAD; // -36dB
 8001316:	4bba      	ldr	r3, [pc, #744]	; (8001600 <main+0x3dc>)
 8001318:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	  vol_data[10] = 0x0003390D; // -38dB
 800131c:	4bb9      	ldr	r3, [pc, #740]	; (8001604 <main+0x3e0>)
 800131e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	  vol_data[9] = 0x00028F5C; // -40dB
 8001322:	4bb9      	ldr	r3, [pc, #740]	; (8001608 <main+0x3e4>)
 8001324:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	  vol_data[8] = 0x00020892; // -42dB
 8001328:	4bb8      	ldr	r3, [pc, #736]	; (800160c <main+0x3e8>)
 800132a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	  vol_data[7] = 0x00019D81; // -44dB
 800132e:	4bb8      	ldr	r3, [pc, #736]	; (8001610 <main+0x3ec>)
 8001330:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  vol_data[6] = 0x00014875; // -46dB
 8001334:	4bb7      	ldr	r3, [pc, #732]	; (8001614 <main+0x3f0>)
 8001336:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	  vol_data[5] = 0x000104E7; // -48dB
 800133a:	4bb7      	ldr	r3, [pc, #732]	; (8001618 <main+0x3f4>)
 800133c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	  vol_data[4] = 0x0000CF3E; // -50dB
 8001340:	f64c 733e 	movw	r3, #53054	; 0xcf3e
 8001344:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	  vol_data[3] = 0x0000A49E; // -52dB
 8001348:	f24a 439e 	movw	r3, #42142	; 0xa49e
 800134c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	  vol_data[2] = 0x000082C3; // -54dB
 8001350:	f248 23c3 	movw	r3, #33475	; 0x82c3
 8001354:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	  vol_data[1] = 0x000067DE; // -56dB
 8001358:	f246 73de 	movw	r3, #26590	; 0x67de
 800135c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	  vol_data[0] = 0x00005281; // -58dB
 8001360:	f245 2381 	movw	r3, #21121	; 0x5281
 8001364:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

	  // 8.24 FixPoint Loudness
	  loud_data[29] = 0x01000000; // 0dB
 8001368:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800136c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001370:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001374:	675a      	str	r2, [r3, #116]	; 0x74
	  loud_data[28] = 0x00F1ADF9; // -0.5dB
 8001376:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800137a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800137e:	4aa7      	ldr	r2, [pc, #668]	; (800161c <main+0x3f8>)
 8001380:	671a      	str	r2, [r3, #112]	; 0x70
	  loud_data[27] = 0x00E42905; // -1dB
 8001382:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001386:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800138a:	4aa5      	ldr	r2, [pc, #660]	; (8001620 <main+0x3fc>)
 800138c:	66da      	str	r2, [r3, #108]	; 0x6c
	  loud_data[26] = 0x00D765AC; // -1.5dB
 800138e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001392:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001396:	4aa3      	ldr	r2, [pc, #652]	; (8001624 <main+0x400>)
 8001398:	669a      	str	r2, [r3, #104]	; 0x68
	  loud_data[25] = 0x00CB5918; // -2dB
 800139a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800139e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013a2:	4a86      	ldr	r2, [pc, #536]	; (80015bc <main+0x398>)
 80013a4:	665a      	str	r2, [r3, #100]	; 0x64
	  loud_data[24] = 0x00BFF911; // -2.5dB
 80013a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013ae:	4a9e      	ldr	r2, [pc, #632]	; (8001628 <main+0x404>)
 80013b0:	661a      	str	r2, [r3, #96]	; 0x60
	  loud_data[23] = 0x00B53BEF; // -3dB
 80013b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013ba:	4a9c      	ldr	r2, [pc, #624]	; (800162c <main+0x408>)
 80013bc:	65da      	str	r2, [r3, #92]	; 0x5c
	  loud_data[22] = 0x00AB1896; // -3.5dB
 80013be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013c6:	4a9a      	ldr	r2, [pc, #616]	; (8001630 <main+0x40c>)
 80013c8:	659a      	str	r2, [r3, #88]	; 0x58
	  loud_data[21] = 0x00A1866C; // -4dB
 80013ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013d2:	4a7b      	ldr	r2, [pc, #492]	; (80015c0 <main+0x39c>)
 80013d4:	655a      	str	r2, [r3, #84]	; 0x54
	  loud_data[20] = 0x00987D50; // -4.5dB
 80013d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013de:	4a95      	ldr	r2, [pc, #596]	; (8001634 <main+0x410>)
 80013e0:	651a      	str	r2, [r3, #80]	; 0x50
	  loud_data[19] = 0x008FF59A; // -5dB
 80013e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013ea:	4a93      	ldr	r2, [pc, #588]	; (8001638 <main+0x414>)
 80013ec:	64da      	str	r2, [r3, #76]	; 0x4c
	  loud_data[18] = 0x0087E80B; // -5.5dB
 80013ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013f6:	4a91      	ldr	r2, [pc, #580]	; (800163c <main+0x418>)
 80013f8:	649a      	str	r2, [r3, #72]	; 0x48
	  loud_data[17] = 0x00804DCE; // -6dB
 80013fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001402:	4a70      	ldr	r2, [pc, #448]	; (80015c4 <main+0x3a0>)
 8001404:	645a      	str	r2, [r3, #68]	; 0x44
	  loud_data[16] = 0x00792071; // -6.5dB
 8001406:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800140a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800140e:	4a8c      	ldr	r2, [pc, #560]	; (8001640 <main+0x41c>)
 8001410:	641a      	str	r2, [r3, #64]	; 0x40
	  loud_data[15] = 0x007259DB; // -7dB
 8001412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001416:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800141a:	4a8a      	ldr	r2, [pc, #552]	; (8001644 <main+0x420>)
 800141c:	63da      	str	r2, [r3, #60]	; 0x3c
	  loud_data[14] = 0x006BF44D; // -7.5dB
 800141e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001422:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001426:	4a88      	ldr	r2, [pc, #544]	; (8001648 <main+0x424>)
 8001428:	639a      	str	r2, [r3, #56]	; 0x38
	  loud_data[13] = 0x0065EA5A; // -8dB
 800142a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800142e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001432:	4a65      	ldr	r2, [pc, #404]	; (80015c8 <main+0x3a4>)
 8001434:	635a      	str	r2, [r3, #52]	; 0x34
	  loud_data[12] = 0x006036E1; // -8.5dB
 8001436:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800143a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800143e:	4a83      	ldr	r2, [pc, #524]	; (800164c <main+0x428>)
 8001440:	631a      	str	r2, [r3, #48]	; 0x30
	  loud_data[11] = 0x005AD50D; // -9dB
 8001442:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001446:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800144a:	4a81      	ldr	r2, [pc, #516]	; (8001650 <main+0x42c>)
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
	  loud_data[10] = 0x0055C04C; // -9.5dB
 800144e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001452:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001456:	4a7f      	ldr	r2, [pc, #508]	; (8001654 <main+0x430>)
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
	  loud_data[9] = 0x0050F44E; // -10dB
 800145a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800145e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001462:	4a5a      	ldr	r2, [pc, #360]	; (80015cc <main+0x3a8>)
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
	  loud_data[8] = 0x004C6D01; // -10.5dB
 8001466:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800146a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800146e:	4a7a      	ldr	r2, [pc, #488]	; (8001658 <main+0x434>)
 8001470:	621a      	str	r2, [r3, #32]
	  loud_data[7] = 0x0048268E; // -11dB
 8001472:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001476:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800147a:	4a78      	ldr	r2, [pc, #480]	; (800165c <main+0x438>)
 800147c:	61da      	str	r2, [r3, #28]
	  loud_data[6] = 0x00441D54; // -11.5dB
 800147e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001482:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001486:	4a76      	ldr	r2, [pc, #472]	; (8001660 <main+0x43c>)
 8001488:	619a      	str	r2, [r3, #24]
	  loud_data[5] = 0x00404DE6; // -12dB
 800148a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800148e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001492:	4a4f      	ldr	r2, [pc, #316]	; (80015d0 <main+0x3ac>)
 8001494:	615a      	str	r2, [r3, #20]
	  loud_data[4] = 0x003CB509; // -12.5dB
 8001496:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800149a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800149e:	4a71      	ldr	r2, [pc, #452]	; (8001664 <main+0x440>)
 80014a0:	611a      	str	r2, [r3, #16]
	  loud_data[3] = 0x00394FAF; // -13dB
 80014a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014aa:	4a6f      	ldr	r2, [pc, #444]	; (8001668 <main+0x444>)
 80014ac:	60da      	str	r2, [r3, #12]
	  loud_data[2] = 0x00361AF6; // -13.5dB
 80014ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014b6:	4a6d      	ldr	r2, [pc, #436]	; (800166c <main+0x448>)
 80014b8:	609a      	str	r2, [r3, #8]
	  loud_data[1] = 0x00331427; // -14dB
 80014ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014c2:	4a44      	ldr	r2, [pc, #272]	; (80015d4 <main+0x3b0>)
 80014c4:	605a      	str	r2, [r3, #4]
	  loud_data[0] = 0x003038AF; // -14.5dB
 80014c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014ce:	4a68      	ldr	r2, [pc, #416]	; (8001670 <main+0x44c>)
 80014d0:	601a      	str	r2, [r3, #0]

	  // 8.24 Compensation FixPoint
	  comp_data[29] = 0x01000000; // 0dB
 80014d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014de:	675a      	str	r2, [r3, #116]	; 0x74
	  comp_data[28] = 0x010F2B41; // +0.5dB
 80014e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014e8:	4a62      	ldr	r2, [pc, #392]	; (8001674 <main+0x450>)
 80014ea:	671a      	str	r2, [r3, #112]	; 0x70
	  comp_data[27] = 0x011F3C9A; // +1dB
 80014ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014f4:	4a60      	ldr	r2, [pc, #384]	; (8001678 <main+0x454>)
 80014f6:	66da      	str	r2, [r3, #108]	; 0x6c
	  comp_data[26] = 0x013041AF; // +1.5dB
 80014f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001500:	4a5e      	ldr	r2, [pc, #376]	; (800167c <main+0x458>)
 8001502:	669a      	str	r2, [r3, #104]	; 0x68
	  comp_data[25] = 0x014248F0; // +2dB
 8001504:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001508:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800150c:	4a5c      	ldr	r2, [pc, #368]	; (8001680 <main+0x45c>)
 800150e:	665a      	str	r2, [r3, #100]	; 0x64
	  comp_data[24] = 0x015561A9; // +2.5dB
 8001510:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001514:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001518:	4a5a      	ldr	r2, [pc, #360]	; (8001684 <main+0x460>)
 800151a:	661a      	str	r2, [r3, #96]	; 0x60
	  comp_data[23] = 0x01699C0F; // +3dB
 800151c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001520:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001524:	4a58      	ldr	r2, [pc, #352]	; (8001688 <main+0x464>)
 8001526:	65da      	str	r2, [r3, #92]	; 0x5c
	  comp_data[22] = 0x017F094D; // +3.5dB
 8001528:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800152c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001530:	4a56      	ldr	r2, [pc, #344]	; (800168c <main+0x468>)
 8001532:	659a      	str	r2, [r3, #88]	; 0x58
	  comp_data[21] = 0x0195BB8F; // +4dB
 8001534:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001538:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800153c:	4a54      	ldr	r2, [pc, #336]	; (8001690 <main+0x46c>)
 800153e:	655a      	str	r2, [r3, #84]	; 0x54
	  comp_data[20] = 0x01ADC61A; // +4.5dB
 8001540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001544:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001548:	4a52      	ldr	r2, [pc, #328]	; (8001694 <main+0x470>)
 800154a:	651a      	str	r2, [r3, #80]	; 0x50
	  comp_data[19] = 0x01C73D52; // +5dB
 800154c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001550:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001554:	4a50      	ldr	r2, [pc, #320]	; (8001698 <main+0x474>)
 8001556:	64da      	str	r2, [r3, #76]	; 0x4c
	  comp_data[18] = 0x01E236D4; // +5.5dB
 8001558:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800155c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001560:	4a4e      	ldr	r2, [pc, #312]	; (800169c <main+0x478>)
 8001562:	649a      	str	r2, [r3, #72]	; 0x48
	  comp_data[17] = 0x01FEC983; // +6dB
 8001564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001568:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800156c:	4a4c      	ldr	r2, [pc, #304]	; (80016a0 <main+0x47c>)
 800156e:	645a      	str	r2, [r3, #68]	; 0x44
	  comp_data[16] = 0x021D0D9E; // +6.5dB
 8001570:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001574:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001578:	4a4a      	ldr	r2, [pc, #296]	; (80016a4 <main+0x480>)
 800157a:	641a      	str	r2, [r3, #64]	; 0x40
	  comp_data[15] = 0x023D1CD4; // +7dB
 800157c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001580:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001584:	4a48      	ldr	r2, [pc, #288]	; (80016a8 <main+0x484>)
 8001586:	63da      	str	r2, [r3, #60]	; 0x3c
	  comp_data[14] = 0x025F1259; // +7.5dB
 8001588:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800158c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001590:	4a46      	ldr	r2, [pc, #280]	; (80016ac <main+0x488>)
 8001592:	639a      	str	r2, [r3, #56]	; 0x38
	  comp_data[13] = 0x02830AFD; // +8dB
 8001594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001598:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800159c:	4a44      	ldr	r2, [pc, #272]	; (80016b0 <main+0x48c>)
 800159e:	635a      	str	r2, [r3, #52]	; 0x34
	  comp_data[12] = 0x02A92547; // +8.5dB
 80015a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015a8:	4a42      	ldr	r2, [pc, #264]	; (80016b4 <main+0x490>)
 80015aa:	631a      	str	r2, [r3, #48]	; 0x30
	  comp_data[11] = 0x02D1818B; // +9dB
 80015ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015b4:	4a40      	ldr	r2, [pc, #256]	; (80016b8 <main+0x494>)
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80015b8:	e080      	b.n	80016bc <main+0x498>
 80015ba:	bf00      	nop
 80015bc:	00cb5918 	.word	0x00cb5918
 80015c0:	00a1866c 	.word	0x00a1866c
 80015c4:	00804dce 	.word	0x00804dce
 80015c8:	0065ea5a 	.word	0x0065ea5a
 80015cc:	0050f44e 	.word	0x0050f44e
 80015d0:	00404de6 	.word	0x00404de6
 80015d4:	00331427 	.word	0x00331427
 80015d8:	002892c2 	.word	0x002892c2
 80015dc:	00203a7e 	.word	0x00203a7e
 80015e0:	0019999a 	.word	0x0019999a
 80015e4:	001455b6 	.word	0x001455b6
 80015e8:	0010270b 	.word	0x0010270b
 80015ec:	000cd495 	.word	0x000cd495
 80015f0:	000a3109 	.word	0x000a3109
 80015f4:	0008186e 	.word	0x0008186e
 80015f8:	00066e31 	.word	0x00066e31
 80015fc:	00051b9d 	.word	0x00051b9d
 8001600:	00040ead 	.word	0x00040ead
 8001604:	0003390d 	.word	0x0003390d
 8001608:	00028f5c 	.word	0x00028f5c
 800160c:	00020892 	.word	0x00020892
 8001610:	00019d81 	.word	0x00019d81
 8001614:	00014875 	.word	0x00014875
 8001618:	000104e7 	.word	0x000104e7
 800161c:	00f1adf9 	.word	0x00f1adf9
 8001620:	00e42905 	.word	0x00e42905
 8001624:	00d765ac 	.word	0x00d765ac
 8001628:	00bff911 	.word	0x00bff911
 800162c:	00b53bef 	.word	0x00b53bef
 8001630:	00ab1896 	.word	0x00ab1896
 8001634:	00987d50 	.word	0x00987d50
 8001638:	008ff59a 	.word	0x008ff59a
 800163c:	0087e80b 	.word	0x0087e80b
 8001640:	00792071 	.word	0x00792071
 8001644:	007259db 	.word	0x007259db
 8001648:	006bf44d 	.word	0x006bf44d
 800164c:	006036e1 	.word	0x006036e1
 8001650:	005ad50d 	.word	0x005ad50d
 8001654:	0055c04c 	.word	0x0055c04c
 8001658:	004c6d01 	.word	0x004c6d01
 800165c:	0048268e 	.word	0x0048268e
 8001660:	00441d54 	.word	0x00441d54
 8001664:	003cb509 	.word	0x003cb509
 8001668:	00394faf 	.word	0x00394faf
 800166c:	00361af6 	.word	0x00361af6
 8001670:	003038af 	.word	0x003038af
 8001674:	010f2b41 	.word	0x010f2b41
 8001678:	011f3c9a 	.word	0x011f3c9a
 800167c:	013041af 	.word	0x013041af
 8001680:	014248f0 	.word	0x014248f0
 8001684:	015561a9 	.word	0x015561a9
 8001688:	01699c0f 	.word	0x01699c0f
 800168c:	017f094d 	.word	0x017f094d
 8001690:	0195bb8f 	.word	0x0195bb8f
 8001694:	01adc61a 	.word	0x01adc61a
 8001698:	01c73d52 	.word	0x01c73d52
 800169c:	01e236d4 	.word	0x01e236d4
 80016a0:	01fec983 	.word	0x01fec983
 80016a4:	021d0d9e 	.word	0x021d0d9e
 80016a8:	023d1cd4 	.word	0x023d1cd4
 80016ac:	025f1259 	.word	0x025f1259
 80016b0:	02830afd 	.word	0x02830afd
 80016b4:	02a92547 	.word	0x02a92547
 80016b8:	02d1818b 	.word	0x02d1818b
	  comp_data[10] = 0x02FC4209; // +9.5dB
 80016bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016c4:	4a7c      	ldr	r2, [pc, #496]	; (80018b8 <main+0x694>)
 80016c6:	629a      	str	r2, [r3, #40]	; 0x28
	  comp_data[9] = 0x03298B07; // +10dB
 80016c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016d0:	4a7a      	ldr	r2, [pc, #488]	; (80018bc <main+0x698>)
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
	  comp_data[8] = 0x035982F3; // +10.5dB
 80016d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016dc:	4a78      	ldr	r2, [pc, #480]	; (80018c0 <main+0x69c>)
 80016de:	621a      	str	r2, [r3, #32]
	  comp_data[7] = 0x038C5281; // +11dB
 80016e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016e8:	4a76      	ldr	r2, [pc, #472]	; (80018c4 <main+0x6a0>)
 80016ea:	61da      	str	r2, [r3, #28]
	  comp_data[6] = 0x03C224CD; // +11.5dB
 80016ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016f4:	4a74      	ldr	r2, [pc, #464]	; (80018c8 <main+0x6a4>)
 80016f6:	619a      	str	r2, [r3, #24]
	  comp_data[5] = 0x03FB2784; // +12dB
 80016f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001700:	4a72      	ldr	r2, [pc, #456]	; (80018cc <main+0x6a8>)
 8001702:	615a      	str	r2, [r3, #20]
	  comp_data[4] = 0x04378B05; // +12.5dB
 8001704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001708:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800170c:	4a70      	ldr	r2, [pc, #448]	; (80018d0 <main+0x6ac>)
 800170e:	611a      	str	r2, [r3, #16]
	  comp_data[3] = 0x0477828F; // +13dB
 8001710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001714:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001718:	4a6e      	ldr	r2, [pc, #440]	; (80018d4 <main+0x6b0>)
 800171a:	60da      	str	r2, [r3, #12]
	  comp_data[2] = 0x04BB4469; // +13.5dB
 800171c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001720:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001724:	4a6c      	ldr	r2, [pc, #432]	; (80018d8 <main+0x6b4>)
 8001726:	609a      	str	r2, [r3, #8]
	  comp_data[1] = 0x05030A11; // +14dB
 8001728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800172c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001730:	4a6a      	ldr	r2, [pc, #424]	; (80018dc <main+0x6b8>)
 8001732:	605a      	str	r2, [r3, #4]
	  comp_data[0] = 0x054F106E; // +14.5dB
 8001734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001738:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800173c:	4a68      	ldr	r2, [pc, #416]	; (80018e0 <main+0x6bc>)
 800173e:	601a      	str	r2, [r3, #0]

	  // 8.24 FixPoint Bass and Treble Loudness
	  boost_data[29] = 0x02800000; // 2.50
 8001740:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001744:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001748:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
 800174c:	675a      	str	r2, [r3, #116]	; 0x74
	  boost_data[28] = 0x02666666; // 2.40
 800174e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001752:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001756:	4a63      	ldr	r2, [pc, #396]	; (80018e4 <main+0x6c0>)
 8001758:	671a      	str	r2, [r3, #112]	; 0x70
	  boost_data[27] = 0x02570a3c; // 2.34
 800175a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800175e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001762:	4a61      	ldr	r2, [pc, #388]	; (80018e8 <main+0x6c4>)
 8001764:	66da      	str	r2, [r3, #108]	; 0x6c
	  boost_data[26] = 0x02451eb8; // 2.27
 8001766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800176e:	4a5f      	ldr	r2, [pc, #380]	; (80018ec <main+0x6c8>)
 8001770:	669a      	str	r2, [r3, #104]	; 0x68
	  boost_data[25] = 0x02333332; // 2.20
 8001772:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001776:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800177a:	4a5d      	ldr	r2, [pc, #372]	; (80018f0 <main+0x6cc>)
 800177c:	665a      	str	r2, [r3, #100]	; 0x64
	  boost_data[24] = 0x022147ae; // 2.13
 800177e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001782:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001786:	4a5b      	ldr	r2, [pc, #364]	; (80018f4 <main+0x6d0>)
 8001788:	661a      	str	r2, [r3, #96]	; 0x60
	  boost_data[23] = 0x020f5c28; // 2.06
 800178a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800178e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001792:	4a59      	ldr	r2, [pc, #356]	; (80018f8 <main+0x6d4>)
 8001794:	65da      	str	r2, [r3, #92]	; 0x5c
	  boost_data[22] = 0x02000000; // 2.00
 8001796:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800179a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800179e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017a2:	659a      	str	r2, [r3, #88]	; 0x58
	  boost_data[21] = 0x01ee147a; // 1.93
 80017a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80017ac:	4a53      	ldr	r2, [pc, #332]	; (80018fc <main+0x6d8>)
 80017ae:	655a      	str	r2, [r3, #84]	; 0x54
	  boost_data[20] = 0x01dc28f4; // 1.86
 80017b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80017b8:	4a51      	ldr	r2, [pc, #324]	; (8001900 <main+0x6dc>)
 80017ba:	651a      	str	r2, [r3, #80]	; 0x50
	  boost_data[19] = 0x01ca3d70; // 1.79
 80017bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80017c4:	4a4f      	ldr	r2, [pc, #316]	; (8001904 <main+0x6e0>)
 80017c6:	64da      	str	r2, [r3, #76]	; 0x4c
	  boost_data[18] = 0x01b851ea; // 1.72
 80017c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017cc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80017d0:	4a4d      	ldr	r2, [pc, #308]	; (8001908 <main+0x6e4>)
 80017d2:	649a      	str	r2, [r3, #72]	; 0x48
	  boost_data[17] = 0x01a8f5c2; // 1.66
 80017d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80017dc:	4a4b      	ldr	r2, [pc, #300]	; (800190c <main+0x6e8>)
 80017de:	645a      	str	r2, [r3, #68]	; 0x44
	  boost_data[16] = 0x01970a3c; // 1.59
 80017e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80017e8:	4a49      	ldr	r2, [pc, #292]	; (8001910 <main+0x6ec>)
 80017ea:	641a      	str	r2, [r3, #64]	; 0x40
	  boost_data[15] = 0x01851eb8; // 1.52
 80017ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80017f4:	4a47      	ldr	r2, [pc, #284]	; (8001914 <main+0x6f0>)
 80017f6:	63da      	str	r2, [r3, #60]	; 0x3c
	  boost_data[14] = 0x01733332; // 1.45
 80017f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017fc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001800:	4a45      	ldr	r2, [pc, #276]	; (8001918 <main+0x6f4>)
 8001802:	639a      	str	r2, [r3, #56]	; 0x38
	  boost_data[13] = 0x016147ae; // 1.38
 8001804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001808:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800180c:	4a43      	ldr	r2, [pc, #268]	; (800191c <main+0x6f8>)
 800180e:	635a      	str	r2, [r3, #52]	; 0x34
	  boost_data[12] = 0x0151eb84; // 1.32
 8001810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001814:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <main+0x6fc>)
 800181a:	631a      	str	r2, [r3, #48]	; 0x30
	  boost_data[11] = 0x01400000; // 1.25
 800181c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001820:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001824:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
 8001828:	62da      	str	r2, [r3, #44]	; 0x2c
	  boost_data[10] = 0x012e147a; // 1.18
 800182a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800182e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001832:	4a3c      	ldr	r2, [pc, #240]	; (8001924 <main+0x700>)
 8001834:	629a      	str	r2, [r3, #40]	; 0x28
	  boost_data[9] =  0x011c28f4; // 1.11
 8001836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800183a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800183e:	4a3a      	ldr	r2, [pc, #232]	; (8001928 <main+0x704>)
 8001840:	625a      	str	r2, [r3, #36]	; 0x24
	  boost_data[8] =  0x010a3d70; // 1.04
 8001842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001846:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800184a:	4a38      	ldr	r2, [pc, #224]	; (800192c <main+0x708>)
 800184c:	621a      	str	r2, [r3, #32]
	  boost_data[7] =  0x00fae146; // 0.98
 800184e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001852:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001856:	4a36      	ldr	r2, [pc, #216]	; (8001930 <main+0x70c>)
 8001858:	61da      	str	r2, [r3, #28]
	  boost_data[6] =  0x00e8f5c2; // 0.91
 800185a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800185e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001862:	4a34      	ldr	r2, [pc, #208]	; (8001934 <main+0x710>)
 8001864:	619a      	str	r2, [r3, #24]
	  boost_data[5] =  0x00d70a3c; // 0.84
 8001866:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800186a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800186e:	4a32      	ldr	r2, [pc, #200]	; (8001938 <main+0x714>)
 8001870:	615a      	str	r2, [r3, #20]
	  boost_data[4] =  0x00c51eb8; // 0.77
 8001872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001876:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800187a:	4a30      	ldr	r2, [pc, #192]	; (800193c <main+0x718>)
 800187c:	611a      	str	r2, [r3, #16]
	  boost_data[3] =  0x00b33332; // 0.70
 800187e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001882:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001886:	4a2e      	ldr	r2, [pc, #184]	; (8001940 <main+0x71c>)
 8001888:	60da      	str	r2, [r3, #12]
	  boost_data[2] =  0x00a3d70a; // 0.64
 800188a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001892:	4a2c      	ldr	r2, [pc, #176]	; (8001944 <main+0x720>)
 8001894:	609a      	str	r2, [r3, #8]
	  boost_data[1] =  0x0091eb84; // 0.57
 8001896:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800189e:	4a2a      	ldr	r2, [pc, #168]	; (8001948 <main+0x724>)
 80018a0:	605a      	str	r2, [r3, #4]
	  boost_data[0] =  0x00800000; // 0.50
 80018a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80018ae:	601a      	str	r2, [r3, #0]

	  for(k=0; k<30; k++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 80018b6:	e098      	b.n	80019ea <main+0x7c6>
 80018b8:	02fc4209 	.word	0x02fc4209
 80018bc:	03298b07 	.word	0x03298b07
 80018c0:	035982f3 	.word	0x035982f3
 80018c4:	038c5281 	.word	0x038c5281
 80018c8:	03c224cd 	.word	0x03c224cd
 80018cc:	03fb2784 	.word	0x03fb2784
 80018d0:	04378b05 	.word	0x04378b05
 80018d4:	0477828f 	.word	0x0477828f
 80018d8:	04bb4469 	.word	0x04bb4469
 80018dc:	05030a11 	.word	0x05030a11
 80018e0:	054f106e 	.word	0x054f106e
 80018e4:	02666666 	.word	0x02666666
 80018e8:	02570a3c 	.word	0x02570a3c
 80018ec:	02451eb8 	.word	0x02451eb8
 80018f0:	02333332 	.word	0x02333332
 80018f4:	022147ae 	.word	0x022147ae
 80018f8:	020f5c28 	.word	0x020f5c28
 80018fc:	01ee147a 	.word	0x01ee147a
 8001900:	01dc28f4 	.word	0x01dc28f4
 8001904:	01ca3d70 	.word	0x01ca3d70
 8001908:	01b851ea 	.word	0x01b851ea
 800190c:	01a8f5c2 	.word	0x01a8f5c2
 8001910:	01970a3c 	.word	0x01970a3c
 8001914:	01851eb8 	.word	0x01851eb8
 8001918:	01733332 	.word	0x01733332
 800191c:	016147ae 	.word	0x016147ae
 8001920:	0151eb84 	.word	0x0151eb84
 8001924:	012e147a 	.word	0x012e147a
 8001928:	011c28f4 	.word	0x011c28f4
 800192c:	010a3d70 	.word	0x010a3d70
 8001930:	00fae146 	.word	0x00fae146
 8001934:	00e8f5c2 	.word	0x00e8f5c2
 8001938:	00d70a3c 	.word	0x00d70a3c
 800193c:	00c51eb8 	.word	0x00c51eb8
 8001940:	00b33332 	.word	0x00b33332
 8001944:	00a3d70a 	.word	0x00a3d70a
 8001948:	0091eb84 	.word	0x0091eb84
	  {
		  log_in_table[k] = 4096.0*log10(1.0+(3.0*k/10.0));
 800194c:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fd93 	bl	800047c <__aeabi_i2d>
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	4bba      	ldr	r3, [pc, #744]	; (8001c44 <main+0xa20>)
 800195c:	f7fe fdf8 	bl	8000550 <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4bb6      	ldr	r3, [pc, #728]	; (8001c48 <main+0xa24>)
 800196e:	f7fe ff19 	bl	80007a4 <__aeabi_ddiv>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	4bb3      	ldr	r3, [pc, #716]	; (8001c4c <main+0xa28>)
 8001980:	f7fe fc30 	bl	80001e4 <__adddf3>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	ec43 2b17 	vmov	d7, r2, r3
 800198c:	eeb0 0a47 	vmov.f32	s0, s14
 8001990:	eef0 0a67 	vmov.f32	s1, s15
 8001994:	f005 fa6c 	bl	8006e70 <log10>
 8001998:	ec51 0b10 	vmov	r0, r1, d0
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	4bab      	ldr	r3, [pc, #684]	; (8001c50 <main+0xa2c>)
 80019a2:	f7fe fdd5 	bl	8000550 <__aeabi_dmul>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	f8b7 4206 	ldrh.w	r4, [r7, #518]	; 0x206
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	f7ff f87d 	bl	8000ab0 <__aeabi_d2uiz>
 80019b6:	4603      	mov	r3, r0
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	4ba6      	ldr	r3, [pc, #664]	; (8001c54 <main+0xa30>)
 80019bc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		  linear_in_table[k] = 4096*k/30;
 80019c0:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 80019c4:	031b      	lsls	r3, r3, #12
 80019c6:	4aa4      	ldr	r2, [pc, #656]	; (8001c58 <main+0xa34>)
 80019c8:	fb82 1203 	smull	r1, r2, r2, r3
 80019cc:	441a      	add	r2, r3
 80019ce:	1112      	asrs	r2, r2, #4
 80019d0:	17db      	asrs	r3, r3, #31
 80019d2:	1ad2      	subs	r2, r2, r3
 80019d4:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 80019d8:	b291      	uxth	r1, r2
 80019da:	4aa0      	ldr	r2, [pc, #640]	; (8001c5c <main+0xa38>)
 80019dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(k=0; k<30; k++)
 80019e0:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 80019e4:	3301      	adds	r3, #1
 80019e6:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 80019ea:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 80019ee:	2b1d      	cmp	r3, #29
 80019f0:	d9ac      	bls.n	800194c <main+0x728>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f2:	f002 f86f 	bl	8003ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f6:	f001 f8e1 	bl	8002bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019fa:	f001 fba5 	bl	8003148 <MX_GPIO_Init>
  MX_DMA_Init();
 80019fe:	f001 fb83 	bl	8003108 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a02:	f001 f947 	bl	8002c94 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001a06:	f001 fae5 	bl	8002fd4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001a0a:	f001 fa59 	bl	8002ec0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001a0e:	f001 fa85 	bl	8002f1c <MX_I2C2_Init>
  MX_I2C3_Init();
 8001a12:	f001 fab1 	bl	8002f78 <MX_I2C3_Init>
  MX_TIM4_Init();
 8001a16:	f001 fb2b 	bl	8003070 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Start timer for delay function
  HAL_TIM_Base_Start(&htim4);
 8001a1a:	4891      	ldr	r0, [pc, #580]	; (8001c60 <main+0xa3c>)
 8001a1c:	f004 ff4c 	bl	80068b8 <HAL_TIM_Base_Start>

  // Reset DSPs
  HAL_GPIO_WritePin(nRST_DSP0_GPIO_Port, nRST_DSP0_Pin, GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2120      	movs	r1, #32
 8001a24:	488f      	ldr	r0, [pc, #572]	; (8001c64 <main+0xa40>)
 8001a26:	f003 fad9 	bl	8004fdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nRST_DSP1_GPIO_Port, nRST_DSP1_Pin, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a30:	488c      	ldr	r0, [pc, #560]	; (8001c64 <main+0xa40>)
 8001a32:	f003 fad3 	bl	8004fdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nRST_DSP2_GPIO_Port, nRST_DSP2_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a3c:	4889      	ldr	r0, [pc, #548]	; (8001c64 <main+0xa40>)
 8001a3e:	f003 facd 	bl	8004fdc <HAL_GPIO_WritePin>

  HAL_Delay(100);
 8001a42:	2064      	movs	r0, #100	; 0x64
 8001a44:	f002 f8b8 	bl	8003bb8 <HAL_Delay>

  // Disable CLK
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_RESET);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a4e:	4886      	ldr	r0, [pc, #536]	; (8001c68 <main+0xa44>)
 8001a50:	f003 fac4 	bl	8004fdc <HAL_GPIO_WritePin>

  // Configure DACs
  HAL_GPIO_WritePin(FMT_GPIO_Port, FMT_Pin, GPIO_PIN_RESET); // 16-to-24 bit I2S Format
 8001a54:	2200      	movs	r2, #0
 8001a56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a5a:	4883      	ldr	r0, [pc, #524]	; (8001c68 <main+0xa44>)
 8001a5c:	f003 fabe 	bl	8004fdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DEMP1_GPIO_Port, DEMP1_Pin, GPIO_PIN_RESET); // De-Emphasis
 8001a60:	2200      	movs	r2, #0
 8001a62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a66:	4880      	ldr	r0, [pc, #512]	; (8001c68 <main+0xa44>)
 8001a68:	f003 fab8 	bl	8004fdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DEMP0_GPIO_Port, DEMP0_Pin, GPIO_PIN_SET);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a72:	487d      	ldr	r0, [pc, #500]	; (8001c68 <main+0xa44>)
 8001a74:	f003 fab2 	bl	8004fdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUTE_GPIO_Port, MUTE_Pin, GPIO_PIN_RESET); // Mute OFF
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a7e:	487b      	ldr	r0, [pc, #492]	; (8001c6c <main+0xa48>)
 8001a80:	f003 faac 	bl	8004fdc <HAL_GPIO_WritePin>

  // Enable CLK
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a8a:	4877      	ldr	r0, [pc, #476]	; (8001c68 <main+0xa44>)
 8001a8c:	f003 faa6 	bl	8004fdc <HAL_GPIO_WritePin>

  // Mute DSPs
  HAL_GPIO_WritePin(GPIO_MCU0_GPIO_Port, GPIO_MCU0_Pin, GPIO_PIN_RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2110      	movs	r1, #16
 8001a94:	4873      	ldr	r0, [pc, #460]	; (8001c64 <main+0xa40>)
 8001a96:	f003 faa1 	bl	8004fdc <HAL_GPIO_WritePin>

  // Enable DSPs
  HAL_GPIO_WritePin(nRST_DSP0_GPIO_Port, nRST_DSP0_Pin, GPIO_PIN_SET);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	2120      	movs	r1, #32
 8001a9e:	4871      	ldr	r0, [pc, #452]	; (8001c64 <main+0xa40>)
 8001aa0:	f003 fa9c 	bl	8004fdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nRST_DSP1_GPIO_Port, nRST_DSP1_Pin, GPIO_PIN_SET);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aaa:	486e      	ldr	r0, [pc, #440]	; (8001c64 <main+0xa40>)
 8001aac:	f003 fa96 	bl	8004fdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nRST_DSP2_GPIO_Port, nRST_DSP2_Pin, GPIO_PIN_SET);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ab6:	486b      	ldr	r0, [pc, #428]	; (8001c64 <main+0xa40>)
 8001ab8:	f003 fa90 	bl	8004fdc <HAL_GPIO_WritePin>

  // DSPs Software Download
  default_download_IC_1(DSP0_ADDR);
 8001abc:	2070      	movs	r0, #112	; 0x70
 8001abe:	f7ff f995 	bl	8000dec <default_download_IC_1>
  default_download_IC_1(DSP1_ADDR);
 8001ac2:	2072      	movs	r0, #114	; 0x72
 8001ac4:	f7ff f992 	bl	8000dec <default_download_IC_1>
  default_download_IC_1(DSP2_ADDR);
 8001ac8:	2074      	movs	r0, #116	; 0x74
 8001aca:	f7ff f98f 	bl	8000dec <default_download_IC_1>

  // Configure ADCs
  auxData[0] = 0xFE;
 8001ace:	4b68      	ldr	r3, [pc, #416]	; (8001c70 <main+0xa4c>)
 8001ad0:	22fe      	movs	r2, #254	; 0xfe
 8001ad2:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c2, ADC0_ADDR, 0x00, 1, auxData, 1, 1000);
 8001ad4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad8:	9302      	str	r3, [sp, #8]
 8001ada:	2301      	movs	r3, #1
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	4b64      	ldr	r3, [pc, #400]	; (8001c70 <main+0xa4c>)
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2194      	movs	r1, #148	; 0x94
 8001ae8:	4862      	ldr	r0, [pc, #392]	; (8001c74 <main+0xa50>)
 8001aea:	f003 fbd5 	bl	8005298 <HAL_I2C_Mem_Write>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b61      	ldr	r3, [pc, #388]	; (8001c78 <main+0xa54>)
 8001af4:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c2, ADC1_ADDR, 0x00, 1, auxData, 1, 1000);
 8001af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afa:	9302      	str	r3, [sp, #8]
 8001afc:	2301      	movs	r3, #1
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	4b5b      	ldr	r3, [pc, #364]	; (8001c70 <main+0xa4c>)
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2301      	movs	r3, #1
 8001b06:	2200      	movs	r2, #0
 8001b08:	2196      	movs	r1, #150	; 0x96
 8001b0a:	485a      	ldr	r0, [pc, #360]	; (8001c74 <main+0xa50>)
 8001b0c:	f003 fbc4 	bl	8005298 <HAL_I2C_Mem_Write>
 8001b10:	4603      	mov	r3, r0
 8001b12:	461a      	mov	r2, r3
 8001b14:	4b58      	ldr	r3, [pc, #352]	; (8001c78 <main+0xa54>)
 8001b16:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c3, ADC2_ADDR, 0x00, 1, auxData, 1, 1000);
 8001b18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1c:	9302      	str	r3, [sp, #8]
 8001b1e:	2301      	movs	r3, #1
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	4b53      	ldr	r3, [pc, #332]	; (8001c70 <main+0xa4c>)
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2301      	movs	r3, #1
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2194      	movs	r1, #148	; 0x94
 8001b2c:	4853      	ldr	r0, [pc, #332]	; (8001c7c <main+0xa58>)
 8001b2e:	f003 fbb3 	bl	8005298 <HAL_I2C_Mem_Write>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <main+0xa54>)
 8001b38:	701a      	strb	r2, [r3, #0]
  auxData[0] = 0x47;
 8001b3a:	4b4d      	ldr	r3, [pc, #308]	; (8001c70 <main+0xa4c>)
 8001b3c:	2247      	movs	r2, #71	; 0x47
 8001b3e:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c2, ADC0_ADDR, 0x20, 1, auxData, 1, 1000);
 8001b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	2301      	movs	r3, #1
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	4b49      	ldr	r3, [pc, #292]	; (8001c70 <main+0xa4c>)
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2301      	movs	r3, #1
 8001b50:	2220      	movs	r2, #32
 8001b52:	2194      	movs	r1, #148	; 0x94
 8001b54:	4847      	ldr	r0, [pc, #284]	; (8001c74 <main+0xa50>)
 8001b56:	f003 fb9f 	bl	8005298 <HAL_I2C_Mem_Write>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b46      	ldr	r3, [pc, #280]	; (8001c78 <main+0xa54>)
 8001b60:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c2, ADC1_ADDR, 0x20, 1, auxData, 1, 1000);
 8001b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b66:	9302      	str	r3, [sp, #8]
 8001b68:	2301      	movs	r3, #1
 8001b6a:	9301      	str	r3, [sp, #4]
 8001b6c:	4b40      	ldr	r3, [pc, #256]	; (8001c70 <main+0xa4c>)
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2301      	movs	r3, #1
 8001b72:	2220      	movs	r2, #32
 8001b74:	2196      	movs	r1, #150	; 0x96
 8001b76:	483f      	ldr	r0, [pc, #252]	; (8001c74 <main+0xa50>)
 8001b78:	f003 fb8e 	bl	8005298 <HAL_I2C_Mem_Write>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4b3d      	ldr	r3, [pc, #244]	; (8001c78 <main+0xa54>)
 8001b82:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c3, ADC2_ADDR, 0x20, 1, auxData, 1, 1000);
 8001b84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b88:	9302      	str	r3, [sp, #8]
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	9301      	str	r3, [sp, #4]
 8001b8e:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <main+0xa4c>)
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2301      	movs	r3, #1
 8001b94:	2220      	movs	r2, #32
 8001b96:	2194      	movs	r1, #148	; 0x94
 8001b98:	4838      	ldr	r0, [pc, #224]	; (8001c7c <main+0xa58>)
 8001b9a:	f003 fb7d 	bl	8005298 <HAL_I2C_Mem_Write>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b35      	ldr	r3, [pc, #212]	; (8001c78 <main+0xa54>)
 8001ba4:	701a      	strb	r2, [r3, #0]

  // Un-mute DSPs
  HAL_GPIO_WritePin(GPIO_MCU0_GPIO_Port, GPIO_MCU0_Pin, GPIO_PIN_SET);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	2110      	movs	r1, #16
 8001baa:	482e      	ldr	r0, [pc, #184]	; (8001c64 <main+0xa40>)
 8001bac:	f003 fa16 	bl	8004fdc <HAL_GPIO_WritePin>

  // Set flag ADC to update
  for(k=0; k<ADC_POT; k++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001bb6:	e00a      	b.n	8001bce <main+0x9aa>
  {
	  flag[k] = 1;
 8001bb8:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001bbc:	4a30      	ldr	r2, [pc, #192]	; (8001c80 <main+0xa5c>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(k=0; k<ADC_POT; k++)
 8001bc4:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001bc8:	3301      	adds	r3, #1
 8001bca:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001bce:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001bd2:	2b0e      	cmp	r3, #14
 8001bd4:	d9f0      	bls.n	8001bb8 <main+0x994>
  }

  // DMA Start
  HAL_TIM_Base_Start(&htim2);
 8001bd6:	482b      	ldr	r0, [pc, #172]	; (8001c84 <main+0xa60>)
 8001bd8:	f004 fe6e 	bl	80068b8 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, value, ADC_POT);
 8001bdc:	220f      	movs	r2, #15
 8001bde:	492a      	ldr	r1, [pc, #168]	; (8001c88 <main+0xa64>)
 8001be0:	482a      	ldr	r0, [pc, #168]	; (8001c8c <main+0xa68>)
 8001be2:	f002 f851 	bl	8003c88 <HAL_ADC_Start_DMA>

  HAL_Delay(100);
 8001be6:	2064      	movs	r0, #100	; 0x64
 8001be8:	f001 ffe6 	bl	8003bb8 <HAL_Delay>

  // Data pre-load
  data_SafeLoad[2] = 0x00;
 8001bec:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <main+0xa6c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	709a      	strb	r2, [r3, #2]
  data_SafeLoad[1] = 0x00;
 8001bf2:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <main+0xa6c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	705a      	strb	r2, [r3, #1]
  data_SafeLoad[0] = 0x00;
 8001bf8:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <main+0xa6c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]

  address_SafeLoad[1] = 0x00;
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <main+0xa70>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	705a      	strb	r2, [r3, #1]
  address_SafeLoad[0] = 0x00;
 8001c04:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <main+0xa70>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]

  num_SafeLoad_Lower[3] = 0x01;
 8001c0a:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <main+0xa74>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	70da      	strb	r2, [r3, #3]
  num_SafeLoad_Lower[2] = 0x00;
 8001c10:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <main+0xa74>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	709a      	strb	r2, [r3, #2]
  num_SafeLoad_Lower[1] = 0x00;
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <main+0xa74>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	705a      	strb	r2, [r3, #1]
  num_SafeLoad_Lower[0] = 0x00;
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <main+0xa74>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]

  num_SafeLoad_Upper[3] = 0x00;
 8001c22:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <main+0xa78>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	70da      	strb	r2, [r3, #3]
  num_SafeLoad_Upper[2] = 0x00;
 8001c28:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <main+0xa78>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	709a      	strb	r2, [r3, #2]
  num_SafeLoad_Upper[1] = 0x00;
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <main+0xa78>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	705a      	strb	r2, [r3, #1]
  num_SafeLoad_Upper[0] = 0x00;
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <main+0xa78>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]

  for(k=0; k<10; k++) // Pre-load Filters 32Hz - 16KHz
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001c40:	e0db      	b.n	8001dfa <main+0xbd6>
 8001c42:	bf00      	nop
 8001c44:	40080000 	.word	0x40080000
 8001c48:	40240000 	.word	0x40240000
 8001c4c:	3ff00000 	.word	0x3ff00000
 8001c50:	40b00000 	.word	0x40b00000
 8001c54:	20007390 	.word	0x20007390
 8001c58:	88888889 	.word	0x88888889
 8001c5c:	200073cc 	.word	0x200073cc
 8001c60:	200072e4 	.word	0x200072e4
 8001c64:	40020400 	.word	0x40020400
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40020000 	.word	0x40020000
 8001c70:	20007330 	.word	0x20007330
 8001c74:	200071f4 	.word	0x200071f4
 8001c78:	2000732c 	.word	0x2000732c
 8001c7c:	20007248 	.word	0x20007248
 8001c80:	20007408 	.word	0x20007408
 8001c84:	2000729c 	.word	0x2000729c
 8001c88:	20007334 	.word	0x20007334
 8001c8c:	200070f8 	.word	0x200070f8
 8001c90:	2000742c 	.word	0x2000742c
 8001c94:	20007430 	.word	0x20007430
 8001c98:	20007434 	.word	0x20007434
 8001c9c:	20007438 	.word	0x20007438
  {
	  while(tx_check < 3)
	  {
		  tx_check = 0;
 8001ca0:	4b58      	ldr	r3, [pc, #352]	; (8001e04 <main+0xbe0>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]
		  data_SafeLoad[3] = 29 - pote[k];
 8001ca6:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001caa:	4a57      	ldr	r2, [pc, #348]	; (8001e08 <main+0xbe4>)
 8001cac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	f1c3 031d 	rsb	r3, r3, #29
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4b54      	ldr	r3, [pc, #336]	; (8001e0c <main+0xbe8>)
 8001cba:	70da      	strb	r2, [r3, #3]
		  address_SafeLoad[3] = 0xFF & (BandAddress[k]);
 8001cbc:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cc6:	443b      	add	r3, r7
 8001cc8:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b50      	ldr	r3, [pc, #320]	; (8001e10 <main+0xbec>)
 8001cd0:	70da      	strb	r2, [r3, #3]
		  address_SafeLoad[2] = 0xFF & ((BandAddress[k])>>8);
 8001cd2:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cdc:	443b      	add	r3, r7
 8001cde:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b49      	ldr	r3, [pc, #292]	; (8001e10 <main+0xbec>)
 8001cea:	709a      	strb	r2, [r3, #2]
		  Safeload_Write();
 8001cec:	f001 fc2a 	bl	8003544 <Safeload_Write>
		  delay_us(100);
 8001cf0:	2064      	movs	r0, #100	; 0x64
 8001cf2:	f001 fc0d 	bl	8003510 <delay_us>
		  stat = HAL_I2C_Mem_Read(&hi2c1, DSP0_ADDR, BandAddress[k], 2, aux, 4, 1000);
 8001cf6:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d00:	443b      	add	r3, r7
 8001d02:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0a:	9302      	str	r3, [sp, #8]
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	4b40      	ldr	r3, [pc, #256]	; (8001e14 <main+0xbf0>)
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	2302      	movs	r3, #2
 8001d16:	2170      	movs	r1, #112	; 0x70
 8001d18:	483f      	ldr	r0, [pc, #252]	; (8001e18 <main+0xbf4>)
 8001d1a:	f003 fbb7 	bl	800548c <HAL_I2C_Mem_Read>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b3e      	ldr	r3, [pc, #248]	; (8001e1c <main+0xbf8>)
 8001d24:	701a      	strb	r2, [r3, #0]
		  stat = 0;
 8001d26:	4b3d      	ldr	r3, [pc, #244]	; (8001e1c <main+0xbf8>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
		  if(aux[3] == data_SafeLoad[3])
 8001d2c:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <main+0xbf0>)
 8001d2e:	78da      	ldrb	r2, [r3, #3]
 8001d30:	4b36      	ldr	r3, [pc, #216]	; (8001e0c <main+0xbe8>)
 8001d32:	78db      	ldrb	r3, [r3, #3]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d105      	bne.n	8001d44 <main+0xb20>
		  {
			  tx_check++;
 8001d38:	4b32      	ldr	r3, [pc, #200]	; (8001e04 <main+0xbe0>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	4b30      	ldr	r3, [pc, #192]	; (8001e04 <main+0xbe0>)
 8001d42:	701a      	strb	r2, [r3, #0]
		  }
		  stat = HAL_I2C_Mem_Read(&hi2c1, DSP1_ADDR, BandAddress[k], 2, aux, 4, 1000);
 8001d44:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d4e:	443b      	add	r3, r7
 8001d50:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d58:	9302      	str	r3, [sp, #8]
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <main+0xbf0>)
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	2302      	movs	r3, #2
 8001d64:	2172      	movs	r1, #114	; 0x72
 8001d66:	482c      	ldr	r0, [pc, #176]	; (8001e18 <main+0xbf4>)
 8001d68:	f003 fb90 	bl	800548c <HAL_I2C_Mem_Read>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <main+0xbf8>)
 8001d72:	701a      	strb	r2, [r3, #0]
		  stat = 0;
 8001d74:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <main+0xbf8>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
		  if(aux[3] == data_SafeLoad[3])
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <main+0xbf0>)
 8001d7c:	78da      	ldrb	r2, [r3, #3]
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <main+0xbe8>)
 8001d80:	78db      	ldrb	r3, [r3, #3]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d105      	bne.n	8001d92 <main+0xb6e>
		  {
			  tx_check++;
 8001d86:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <main+0xbe0>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <main+0xbe0>)
 8001d90:	701a      	strb	r2, [r3, #0]
		  }
		  stat = HAL_I2C_Mem_Read(&hi2c1, DSP2_ADDR, BandAddress[k], 2, aux, 4, 1000);
 8001d92:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d9c:	443b      	add	r3, r7
 8001d9e:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da6:	9302      	str	r3, [sp, #8]
 8001da8:	2304      	movs	r3, #4
 8001daa:	9301      	str	r3, [sp, #4]
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <main+0xbf0>)
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	2302      	movs	r3, #2
 8001db2:	2174      	movs	r1, #116	; 0x74
 8001db4:	4818      	ldr	r0, [pc, #96]	; (8001e18 <main+0xbf4>)
 8001db6:	f003 fb69 	bl	800548c <HAL_I2C_Mem_Read>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <main+0xbf8>)
 8001dc0:	701a      	strb	r2, [r3, #0]
		  stat = 0;
 8001dc2:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <main+0xbf8>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
		  if(aux[3] == data_SafeLoad[3])
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <main+0xbf0>)
 8001dca:	78da      	ldrb	r2, [r3, #3]
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <main+0xbe8>)
 8001dce:	78db      	ldrb	r3, [r3, #3]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d105      	bne.n	8001de0 <main+0xbbc>
		  {
			  tx_check++;
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <main+0xbe0>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <main+0xbe0>)
 8001dde:	701a      	strb	r2, [r3, #0]
	  while(tx_check < 3)
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <main+0xbe0>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	f67f af5b 	bls.w	8001ca0 <main+0xa7c>
		  }
	  }
	  tx_check = 0;
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <main+0xbe0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
  for(k=0; k<10; k++) // Pre-load Filters 32Hz - 16KHz
 8001df0:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001df4:	3301      	adds	r3, #1
 8001df6:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001dfa:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001dfe:	2b09      	cmp	r3, #9
 8001e00:	d9ee      	bls.n	8001de0 <main+0xbbc>
  }

  while(tx_check < 3) // Pre-load Volume
 8001e02:	e0ef      	b.n	8001fe4 <main+0xdc0>
 8001e04:	20007427 	.word	0x20007427
 8001e08:	20007370 	.word	0x20007370
 8001e0c:	2000742c 	.word	0x2000742c
 8001e10:	20007430 	.word	0x20007430
 8001e14:	20007428 	.word	0x20007428
 8001e18:	200071a0 	.word	0x200071a0
 8001e1c:	2000732c 	.word	0x2000732c
  {
	  tx_check = 0;
 8001e20:	4b75      	ldr	r3, [pc, #468]	; (8001ff8 <main+0xdd4>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
	  pote_aux = 29 - pote[VOL_ARRAY];
 8001e26:	4b75      	ldr	r3, [pc, #468]	; (8001ffc <main+0xdd8>)
 8001e28:	8adb      	ldrh	r3, [r3, #22]
 8001e2a:	f1c3 031d 	rsb	r3, r3, #29
 8001e2e:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
	  data_SafeLoad[3] = 0xFF & (vol_data[pote_aux]);
 8001e32:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e3c:	443b      	add	r3, r7
 8001e3e:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	4b6e      	ldr	r3, [pc, #440]	; (8002000 <main+0xddc>)
 8001e46:	70da      	strb	r2, [r3, #3]
	  data_SafeLoad[2] = 0xFF & ((vol_data[pote_aux])>>8);
 8001e48:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e52:	443b      	add	r3, r7
 8001e54:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	4b68      	ldr	r3, [pc, #416]	; (8002000 <main+0xddc>)
 8001e5e:	709a      	strb	r2, [r3, #2]
	  data_SafeLoad[1] = 0xFF & ((vol_data[pote_aux])>>16);
 8001e60:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e6a:	443b      	add	r3, r7
 8001e6c:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001e70:	0c1b      	lsrs	r3, r3, #16
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4b62      	ldr	r3, [pc, #392]	; (8002000 <main+0xddc>)
 8001e76:	705a      	strb	r2, [r3, #1]
	  data_SafeLoad[0] = 0xFF & ((vol_data[pote_aux])>>24);
 8001e78:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e82:	443b      	add	r3, r7
 8001e84:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001e88:	0e1b      	lsrs	r3, r3, #24
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	4b5c      	ldr	r3, [pc, #368]	; (8002000 <main+0xddc>)
 8001e8e:	701a      	strb	r2, [r3, #0]
	  address_SafeLoad[3] = 0xFF & (BandAddress[VOL_ARRAY]);
 8001e90:	f8b7 31fa 	ldrh.w	r3, [r7, #506]	; 0x1fa
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4b5b      	ldr	r3, [pc, #364]	; (8002004 <main+0xde0>)
 8001e98:	70da      	strb	r2, [r3, #3]
	  address_SafeLoad[2] = 0xFF & ((BandAddress[VOL_ARRAY])>>8);
 8001e9a:	f8b7 31fa 	ldrh.w	r3, [r7, #506]	; 0x1fa
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b57      	ldr	r3, [pc, #348]	; (8002004 <main+0xde0>)
 8001ea6:	709a      	strb	r2, [r3, #2]
	  Safeload_Write();
 8001ea8:	f001 fb4c 	bl	8003544 <Safeload_Write>
	  delay_us(100);
 8001eac:	2064      	movs	r0, #100	; 0x64
 8001eae:	f001 fb2f 	bl	8003510 <delay_us>
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP0_ADDR, BandAddress[VOL_ARRAY], 2, aux, 4, 1000);
 8001eb2:	f8b7 21fa 	ldrh.w	r2, [r7, #506]	; 0x1fa
 8001eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eba:	9302      	str	r3, [sp, #8]
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	4b51      	ldr	r3, [pc, #324]	; (8002008 <main+0xde4>)
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	2170      	movs	r1, #112	; 0x70
 8001ec8:	4850      	ldr	r0, [pc, #320]	; (800200c <main+0xde8>)
 8001eca:	f003 fadf 	bl	800548c <HAL_I2C_Mem_Read>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b4f      	ldr	r3, [pc, #316]	; (8002010 <main+0xdec>)
 8001ed4:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 8001ed6:	4b4e      	ldr	r3, [pc, #312]	; (8002010 <main+0xdec>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 8001edc:	4b4a      	ldr	r3, [pc, #296]	; (8002008 <main+0xde4>)
 8001ede:	78da      	ldrb	r2, [r3, #3]
 8001ee0:	4b47      	ldr	r3, [pc, #284]	; (8002000 <main+0xddc>)
 8001ee2:	78db      	ldrb	r3, [r3, #3]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d117      	bne.n	8001f18 <main+0xcf4>
	  {
		  if(aux[2] == data_SafeLoad[2])
 8001ee8:	4b47      	ldr	r3, [pc, #284]	; (8002008 <main+0xde4>)
 8001eea:	789a      	ldrb	r2, [r3, #2]
 8001eec:	4b44      	ldr	r3, [pc, #272]	; (8002000 <main+0xddc>)
 8001eee:	789b      	ldrb	r3, [r3, #2]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d111      	bne.n	8001f18 <main+0xcf4>
		  {
			  if(aux[1] == data_SafeLoad[1])
 8001ef4:	4b44      	ldr	r3, [pc, #272]	; (8002008 <main+0xde4>)
 8001ef6:	785a      	ldrb	r2, [r3, #1]
 8001ef8:	4b41      	ldr	r3, [pc, #260]	; (8002000 <main+0xddc>)
 8001efa:	785b      	ldrb	r3, [r3, #1]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d10b      	bne.n	8001f18 <main+0xcf4>
			  {
				  if(aux[0] == data_SafeLoad[0])
 8001f00:	4b41      	ldr	r3, [pc, #260]	; (8002008 <main+0xde4>)
 8001f02:	781a      	ldrb	r2, [r3, #0]
 8001f04:	4b3e      	ldr	r3, [pc, #248]	; (8002000 <main+0xddc>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d105      	bne.n	8001f18 <main+0xcf4>
				  {
					  tx_check++;
 8001f0c:	4b3a      	ldr	r3, [pc, #232]	; (8001ff8 <main+0xdd4>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	3301      	adds	r3, #1
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <main+0xdd4>)
 8001f16:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP1_ADDR, BandAddress[VOL_ARRAY], 2, aux, 4, 1000);
 8001f18:	f8b7 21fa 	ldrh.w	r2, [r7, #506]	; 0x1fa
 8001f1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f20:	9302      	str	r3, [sp, #8]
 8001f22:	2304      	movs	r3, #4
 8001f24:	9301      	str	r3, [sp, #4]
 8001f26:	4b38      	ldr	r3, [pc, #224]	; (8002008 <main+0xde4>)
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	2172      	movs	r1, #114	; 0x72
 8001f2e:	4837      	ldr	r0, [pc, #220]	; (800200c <main+0xde8>)
 8001f30:	f003 faac 	bl	800548c <HAL_I2C_Mem_Read>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b35      	ldr	r3, [pc, #212]	; (8002010 <main+0xdec>)
 8001f3a:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 8001f3c:	4b34      	ldr	r3, [pc, #208]	; (8002010 <main+0xdec>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 8001f42:	4b31      	ldr	r3, [pc, #196]	; (8002008 <main+0xde4>)
 8001f44:	78da      	ldrb	r2, [r3, #3]
 8001f46:	4b2e      	ldr	r3, [pc, #184]	; (8002000 <main+0xddc>)
 8001f48:	78db      	ldrb	r3, [r3, #3]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d117      	bne.n	8001f7e <main+0xd5a>
	  {
		  if(aux[2] == data_SafeLoad[2])
 8001f4e:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <main+0xde4>)
 8001f50:	789a      	ldrb	r2, [r3, #2]
 8001f52:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <main+0xddc>)
 8001f54:	789b      	ldrb	r3, [r3, #2]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d111      	bne.n	8001f7e <main+0xd5a>
		  {
			  if(aux[1] == data_SafeLoad[1])
 8001f5a:	4b2b      	ldr	r3, [pc, #172]	; (8002008 <main+0xde4>)
 8001f5c:	785a      	ldrb	r2, [r3, #1]
 8001f5e:	4b28      	ldr	r3, [pc, #160]	; (8002000 <main+0xddc>)
 8001f60:	785b      	ldrb	r3, [r3, #1]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d10b      	bne.n	8001f7e <main+0xd5a>
			  {
				  if(aux[0] == data_SafeLoad[0])
 8001f66:	4b28      	ldr	r3, [pc, #160]	; (8002008 <main+0xde4>)
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	4b25      	ldr	r3, [pc, #148]	; (8002000 <main+0xddc>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d105      	bne.n	8001f7e <main+0xd5a>
				  {
					  tx_check++;
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <main+0xdd4>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <main+0xdd4>)
 8001f7c:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP2_ADDR, BandAddress[VOL_ARRAY], 2, aux, 4, 1000);
 8001f7e:	f8b7 21fa 	ldrh.w	r2, [r7, #506]	; 0x1fa
 8001f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f86:	9302      	str	r3, [sp, #8]
 8001f88:	2304      	movs	r3, #4
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <main+0xde4>)
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2302      	movs	r3, #2
 8001f92:	2174      	movs	r1, #116	; 0x74
 8001f94:	481d      	ldr	r0, [pc, #116]	; (800200c <main+0xde8>)
 8001f96:	f003 fa79 	bl	800548c <HAL_I2C_Mem_Read>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <main+0xdec>)
 8001fa0:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <main+0xdec>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 8001fa8:	4b17      	ldr	r3, [pc, #92]	; (8002008 <main+0xde4>)
 8001faa:	78da      	ldrb	r2, [r3, #3]
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <main+0xddc>)
 8001fae:	78db      	ldrb	r3, [r3, #3]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d117      	bne.n	8001fe4 <main+0xdc0>
	  {
		  if(aux[2] == data_SafeLoad[2])
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <main+0xde4>)
 8001fb6:	789a      	ldrb	r2, [r3, #2]
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <main+0xddc>)
 8001fba:	789b      	ldrb	r3, [r3, #2]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d111      	bne.n	8001fe4 <main+0xdc0>
		  {
			  if(aux[1] == data_SafeLoad[1])
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <main+0xde4>)
 8001fc2:	785a      	ldrb	r2, [r3, #1]
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <main+0xddc>)
 8001fc6:	785b      	ldrb	r3, [r3, #1]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d10b      	bne.n	8001fe4 <main+0xdc0>
			  {
				  if(aux[0] == data_SafeLoad[0])
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <main+0xde4>)
 8001fce:	781a      	ldrb	r2, [r3, #0]
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <main+0xddc>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d105      	bne.n	8001fe4 <main+0xdc0>
				  {
					  tx_check++;
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <main+0xdd4>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <main+0xdd4>)
 8001fe2:	701a      	strb	r2, [r3, #0]
  while(tx_check < 3) // Pre-load Volume
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <main+0xdd4>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	f67f af19 	bls.w	8001e20 <main+0xbfc>
				  }
			  }
		  }
	  }
  }
  tx_check = 0;
 8001fee:	4b02      	ldr	r3, [pc, #8]	; (8001ff8 <main+0xdd4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]

  while(tx_check < 3) // Pre-load Loudness LOW
 8001ff4:	e0f0      	b.n	80021d8 <main+0xfb4>
 8001ff6:	bf00      	nop
 8001ff8:	20007427 	.word	0x20007427
 8001ffc:	20007370 	.word	0x20007370
 8002000:	2000742c 	.word	0x2000742c
 8002004:	20007430 	.word	0x20007430
 8002008:	20007428 	.word	0x20007428
 800200c:	200071a0 	.word	0x200071a0
 8002010:	2000732c 	.word	0x2000732c
  {
	  tx_check = 0;
 8002014:	4b75      	ldr	r3, [pc, #468]	; (80021ec <main+0xfc8>)
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
	  pote_aux = 29 - pote[LOUD_LOW_ARRAY];
 800201a:	4b75      	ldr	r3, [pc, #468]	; (80021f0 <main+0xfcc>)
 800201c:	8b1b      	ldrh	r3, [r3, #24]
 800201e:	f1c3 031d 	rsb	r3, r3, #29
 8002022:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

	  data_SafeLoad[3] = 0xFF & (boost_data[pote_aux]);
 8002026:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 800202a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	4b6e      	ldr	r3, [pc, #440]	; (80021f4 <main+0xfd0>)
 800203a:	70da      	strb	r2, [r3, #3]
	  data_SafeLoad[2] = 0xFF & ((boost_data[pote_aux])>>8);
 800203c:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002040:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002044:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	b2da      	uxtb	r2, r3
 8002050:	4b68      	ldr	r3, [pc, #416]	; (80021f4 <main+0xfd0>)
 8002052:	709a      	strb	r2, [r3, #2]
	  data_SafeLoad[1] = 0xFF & ((boost_data[pote_aux])>>16);
 8002054:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800205c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002064:	0c1b      	lsrs	r3, r3, #16
 8002066:	b2da      	uxtb	r2, r3
 8002068:	4b62      	ldr	r3, [pc, #392]	; (80021f4 <main+0xfd0>)
 800206a:	705a      	strb	r2, [r3, #1]
	  data_SafeLoad[0] = 0xFF & ((boost_data[pote_aux])>>24);
 800206c:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002074:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207c:	0e1b      	lsrs	r3, r3, #24
 800207e:	b2da      	uxtb	r2, r3
 8002080:	4b5c      	ldr	r3, [pc, #368]	; (80021f4 <main+0xfd0>)
 8002082:	701a      	strb	r2, [r3, #0]
	  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_LOW_ARRAY]);
 8002084:	f8b7 31fc 	ldrh.w	r3, [r7, #508]	; 0x1fc
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b5b      	ldr	r3, [pc, #364]	; (80021f8 <main+0xfd4>)
 800208c:	70da      	strb	r2, [r3, #3]
	  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_LOW_ARRAY])>>8);
 800208e:	f8b7 31fc 	ldrh.w	r3, [r7, #508]	; 0x1fc
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	b29b      	uxth	r3, r3
 8002096:	b2da      	uxtb	r2, r3
 8002098:	4b57      	ldr	r3, [pc, #348]	; (80021f8 <main+0xfd4>)
 800209a:	709a      	strb	r2, [r3, #2]
	  Safeload_Write();
 800209c:	f001 fa52 	bl	8003544 <Safeload_Write>
	  delay_us(100);
 80020a0:	2064      	movs	r0, #100	; 0x64
 80020a2:	f001 fa35 	bl	8003510 <delay_us>
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP0_ADDR, BandAddress[LOUD_LOW_ARRAY], 2, aux, 4, 1000);
 80020a6:	f8b7 21fc 	ldrh.w	r2, [r7, #508]	; 0x1fc
 80020aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ae:	9302      	str	r3, [sp, #8]
 80020b0:	2304      	movs	r3, #4
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	4b51      	ldr	r3, [pc, #324]	; (80021fc <main+0xfd8>)
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2302      	movs	r3, #2
 80020ba:	2170      	movs	r1, #112	; 0x70
 80020bc:	4850      	ldr	r0, [pc, #320]	; (8002200 <main+0xfdc>)
 80020be:	f003 f9e5 	bl	800548c <HAL_I2C_Mem_Read>
 80020c2:	4603      	mov	r3, r0
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b4f      	ldr	r3, [pc, #316]	; (8002204 <main+0xfe0>)
 80020c8:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 80020ca:	4b4e      	ldr	r3, [pc, #312]	; (8002204 <main+0xfe0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 80020d0:	4b4a      	ldr	r3, [pc, #296]	; (80021fc <main+0xfd8>)
 80020d2:	78da      	ldrb	r2, [r3, #3]
 80020d4:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <main+0xfd0>)
 80020d6:	78db      	ldrb	r3, [r3, #3]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d117      	bne.n	800210c <main+0xee8>
	  {
		  if(aux[2] == data_SafeLoad[2])
 80020dc:	4b47      	ldr	r3, [pc, #284]	; (80021fc <main+0xfd8>)
 80020de:	789a      	ldrb	r2, [r3, #2]
 80020e0:	4b44      	ldr	r3, [pc, #272]	; (80021f4 <main+0xfd0>)
 80020e2:	789b      	ldrb	r3, [r3, #2]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d111      	bne.n	800210c <main+0xee8>
		  {
			  if(aux[1] == data_SafeLoad[1])
 80020e8:	4b44      	ldr	r3, [pc, #272]	; (80021fc <main+0xfd8>)
 80020ea:	785a      	ldrb	r2, [r3, #1]
 80020ec:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <main+0xfd0>)
 80020ee:	785b      	ldrb	r3, [r3, #1]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d10b      	bne.n	800210c <main+0xee8>
			  {
				  if(aux[0] == data_SafeLoad[0])
 80020f4:	4b41      	ldr	r3, [pc, #260]	; (80021fc <main+0xfd8>)
 80020f6:	781a      	ldrb	r2, [r3, #0]
 80020f8:	4b3e      	ldr	r3, [pc, #248]	; (80021f4 <main+0xfd0>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d105      	bne.n	800210c <main+0xee8>
				  {
					  tx_check++;
 8002100:	4b3a      	ldr	r3, [pc, #232]	; (80021ec <main+0xfc8>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	b2da      	uxtb	r2, r3
 8002108:	4b38      	ldr	r3, [pc, #224]	; (80021ec <main+0xfc8>)
 800210a:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP1_ADDR, BandAddress[LOUD_LOW_ARRAY], 2, aux, 4, 1000);
 800210c:	f8b7 21fc 	ldrh.w	r2, [r7, #508]	; 0x1fc
 8002110:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002114:	9302      	str	r3, [sp, #8]
 8002116:	2304      	movs	r3, #4
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	4b38      	ldr	r3, [pc, #224]	; (80021fc <main+0xfd8>)
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2302      	movs	r3, #2
 8002120:	2172      	movs	r1, #114	; 0x72
 8002122:	4837      	ldr	r0, [pc, #220]	; (8002200 <main+0xfdc>)
 8002124:	f003 f9b2 	bl	800548c <HAL_I2C_Mem_Read>
 8002128:	4603      	mov	r3, r0
 800212a:	461a      	mov	r2, r3
 800212c:	4b35      	ldr	r3, [pc, #212]	; (8002204 <main+0xfe0>)
 800212e:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 8002130:	4b34      	ldr	r3, [pc, #208]	; (8002204 <main+0xfe0>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 8002136:	4b31      	ldr	r3, [pc, #196]	; (80021fc <main+0xfd8>)
 8002138:	78da      	ldrb	r2, [r3, #3]
 800213a:	4b2e      	ldr	r3, [pc, #184]	; (80021f4 <main+0xfd0>)
 800213c:	78db      	ldrb	r3, [r3, #3]
 800213e:	429a      	cmp	r2, r3
 8002140:	d117      	bne.n	8002172 <main+0xf4e>
	  {
		  if(aux[2] == data_SafeLoad[2])
 8002142:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <main+0xfd8>)
 8002144:	789a      	ldrb	r2, [r3, #2]
 8002146:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <main+0xfd0>)
 8002148:	789b      	ldrb	r3, [r3, #2]
 800214a:	429a      	cmp	r2, r3
 800214c:	d111      	bne.n	8002172 <main+0xf4e>
		  {
			  if(aux[1] == data_SafeLoad[1])
 800214e:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <main+0xfd8>)
 8002150:	785a      	ldrb	r2, [r3, #1]
 8002152:	4b28      	ldr	r3, [pc, #160]	; (80021f4 <main+0xfd0>)
 8002154:	785b      	ldrb	r3, [r3, #1]
 8002156:	429a      	cmp	r2, r3
 8002158:	d10b      	bne.n	8002172 <main+0xf4e>
			  {
				  if(aux[0] == data_SafeLoad[0])
 800215a:	4b28      	ldr	r3, [pc, #160]	; (80021fc <main+0xfd8>)
 800215c:	781a      	ldrb	r2, [r3, #0]
 800215e:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <main+0xfd0>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d105      	bne.n	8002172 <main+0xf4e>
				  {
					  tx_check++;
 8002166:	4b21      	ldr	r3, [pc, #132]	; (80021ec <main+0xfc8>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	3301      	adds	r3, #1
 800216c:	b2da      	uxtb	r2, r3
 800216e:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <main+0xfc8>)
 8002170:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP2_ADDR, BandAddress[LOUD_LOW_ARRAY], 2, aux, 4, 1000);
 8002172:	f8b7 21fc 	ldrh.w	r2, [r7, #508]	; 0x1fc
 8002176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800217a:	9302      	str	r3, [sp, #8]
 800217c:	2304      	movs	r3, #4
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <main+0xfd8>)
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	2302      	movs	r3, #2
 8002186:	2174      	movs	r1, #116	; 0x74
 8002188:	481d      	ldr	r0, [pc, #116]	; (8002200 <main+0xfdc>)
 800218a:	f003 f97f 	bl	800548c <HAL_I2C_Mem_Read>
 800218e:	4603      	mov	r3, r0
 8002190:	461a      	mov	r2, r3
 8002192:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <main+0xfe0>)
 8002194:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <main+0xfe0>)
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 800219c:	4b17      	ldr	r3, [pc, #92]	; (80021fc <main+0xfd8>)
 800219e:	78da      	ldrb	r2, [r3, #3]
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <main+0xfd0>)
 80021a2:	78db      	ldrb	r3, [r3, #3]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d117      	bne.n	80021d8 <main+0xfb4>
	  {
		  if(aux[2] == data_SafeLoad[2])
 80021a8:	4b14      	ldr	r3, [pc, #80]	; (80021fc <main+0xfd8>)
 80021aa:	789a      	ldrb	r2, [r3, #2]
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <main+0xfd0>)
 80021ae:	789b      	ldrb	r3, [r3, #2]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d111      	bne.n	80021d8 <main+0xfb4>
		  {
			  if(aux[1] == data_SafeLoad[1])
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <main+0xfd8>)
 80021b6:	785a      	ldrb	r2, [r3, #1]
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <main+0xfd0>)
 80021ba:	785b      	ldrb	r3, [r3, #1]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d10b      	bne.n	80021d8 <main+0xfb4>
			  {
				  if(aux[0] == data_SafeLoad[0])
 80021c0:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <main+0xfd8>)
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <main+0xfd0>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d105      	bne.n	80021d8 <main+0xfb4>
				  {
					  tx_check++;
 80021cc:	4b07      	ldr	r3, [pc, #28]	; (80021ec <main+0xfc8>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	3301      	adds	r3, #1
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <main+0xfc8>)
 80021d6:	701a      	strb	r2, [r3, #0]
  while(tx_check < 3) // Pre-load Loudness LOW
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <main+0xfc8>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	f67f af19 	bls.w	8002014 <main+0xdf0>
				  }
			  }
		  }
	  }
  }
  tx_check = 0;
 80021e2:	4b02      	ldr	r3, [pc, #8]	; (80021ec <main+0xfc8>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]

  while(tx_check < 3) // Pre-load Loudness HIGH
 80021e8:	e0f0      	b.n	80023cc <main+0x11a8>
 80021ea:	bf00      	nop
 80021ec:	20007427 	.word	0x20007427
 80021f0:	20007370 	.word	0x20007370
 80021f4:	2000742c 	.word	0x2000742c
 80021f8:	20007430 	.word	0x20007430
 80021fc:	20007428 	.word	0x20007428
 8002200:	200071a0 	.word	0x200071a0
 8002204:	2000732c 	.word	0x2000732c
  {
	  tx_check = 0;
 8002208:	4b75      	ldr	r3, [pc, #468]	; (80023e0 <main+0x11bc>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
	  pote_aux = 29 - pote[LOUD_HIGH_ARRAY];
 800220e:	4b75      	ldr	r3, [pc, #468]	; (80023e4 <main+0x11c0>)
 8002210:	8b5b      	ldrh	r3, [r3, #26]
 8002212:	f1c3 031d 	rsb	r3, r3, #29
 8002216:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

	  data_SafeLoad[3] = 0xFF & (boost_data[pote_aux]);
 800221a:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 800221e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002222:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222a:	b2da      	uxtb	r2, r3
 800222c:	4b6e      	ldr	r3, [pc, #440]	; (80023e8 <main+0x11c4>)
 800222e:	70da      	strb	r2, [r3, #3]
	  data_SafeLoad[2] = 0xFF & ((boost_data[pote_aux])>>8);
 8002230:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002238:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800223c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	b2da      	uxtb	r2, r3
 8002244:	4b68      	ldr	r3, [pc, #416]	; (80023e8 <main+0x11c4>)
 8002246:	709a      	strb	r2, [r3, #2]
	  data_SafeLoad[1] = 0xFF & ((boost_data[pote_aux])>>16);
 8002248:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 800224c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002250:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002258:	0c1b      	lsrs	r3, r3, #16
 800225a:	b2da      	uxtb	r2, r3
 800225c:	4b62      	ldr	r3, [pc, #392]	; (80023e8 <main+0x11c4>)
 800225e:	705a      	strb	r2, [r3, #1]
	  data_SafeLoad[0] = 0xFF & ((boost_data[pote_aux])>>24);
 8002260:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002264:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002268:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800226c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002270:	0e1b      	lsrs	r3, r3, #24
 8002272:	b2da      	uxtb	r2, r3
 8002274:	4b5c      	ldr	r3, [pc, #368]	; (80023e8 <main+0x11c4>)
 8002276:	701a      	strb	r2, [r3, #0]
	  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_HIGH_ARRAY]);
 8002278:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4b5b      	ldr	r3, [pc, #364]	; (80023ec <main+0x11c8>)
 8002280:	70da      	strb	r2, [r3, #3]
	  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_HIGH_ARRAY])>>8);
 8002282:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	b29b      	uxth	r3, r3
 800228a:	b2da      	uxtb	r2, r3
 800228c:	4b57      	ldr	r3, [pc, #348]	; (80023ec <main+0x11c8>)
 800228e:	709a      	strb	r2, [r3, #2]
	  Safeload_Write();
 8002290:	f001 f958 	bl	8003544 <Safeload_Write>
	  delay_us(100);
 8002294:	2064      	movs	r0, #100	; 0x64
 8002296:	f001 f93b 	bl	8003510 <delay_us>
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP0_ADDR, BandAddress[LOUD_HIGH_ARRAY], 2, aux, 4, 1000);
 800229a:	f8b7 21fe 	ldrh.w	r2, [r7, #510]	; 0x1fe
 800229e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	2304      	movs	r3, #4
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	4b51      	ldr	r3, [pc, #324]	; (80023f0 <main+0x11cc>)
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	2302      	movs	r3, #2
 80022ae:	2170      	movs	r1, #112	; 0x70
 80022b0:	4850      	ldr	r0, [pc, #320]	; (80023f4 <main+0x11d0>)
 80022b2:	f003 f8eb 	bl	800548c <HAL_I2C_Mem_Read>
 80022b6:	4603      	mov	r3, r0
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b4f      	ldr	r3, [pc, #316]	; (80023f8 <main+0x11d4>)
 80022bc:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 80022be:	4b4e      	ldr	r3, [pc, #312]	; (80023f8 <main+0x11d4>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 80022c4:	4b4a      	ldr	r3, [pc, #296]	; (80023f0 <main+0x11cc>)
 80022c6:	78da      	ldrb	r2, [r3, #3]
 80022c8:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <main+0x11c4>)
 80022ca:	78db      	ldrb	r3, [r3, #3]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d117      	bne.n	8002300 <main+0x10dc>
	  {
		  if(aux[2] == data_SafeLoad[2])
 80022d0:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <main+0x11cc>)
 80022d2:	789a      	ldrb	r2, [r3, #2]
 80022d4:	4b44      	ldr	r3, [pc, #272]	; (80023e8 <main+0x11c4>)
 80022d6:	789b      	ldrb	r3, [r3, #2]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d111      	bne.n	8002300 <main+0x10dc>
		  {
			  if(aux[1] == data_SafeLoad[1])
 80022dc:	4b44      	ldr	r3, [pc, #272]	; (80023f0 <main+0x11cc>)
 80022de:	785a      	ldrb	r2, [r3, #1]
 80022e0:	4b41      	ldr	r3, [pc, #260]	; (80023e8 <main+0x11c4>)
 80022e2:	785b      	ldrb	r3, [r3, #1]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d10b      	bne.n	8002300 <main+0x10dc>
			  {
				  if(aux[0] == data_SafeLoad[0])
 80022e8:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <main+0x11cc>)
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	4b3e      	ldr	r3, [pc, #248]	; (80023e8 <main+0x11c4>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d105      	bne.n	8002300 <main+0x10dc>
				  {
					  tx_check++;
 80022f4:	4b3a      	ldr	r3, [pc, #232]	; (80023e0 <main+0x11bc>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <main+0x11bc>)
 80022fe:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP1_ADDR, BandAddress[LOUD_HIGH_ARRAY], 2, aux, 4, 1000);
 8002300:	f8b7 21fe 	ldrh.w	r2, [r7, #510]	; 0x1fe
 8002304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002308:	9302      	str	r3, [sp, #8]
 800230a:	2304      	movs	r3, #4
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	4b38      	ldr	r3, [pc, #224]	; (80023f0 <main+0x11cc>)
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2302      	movs	r3, #2
 8002314:	2172      	movs	r1, #114	; 0x72
 8002316:	4837      	ldr	r0, [pc, #220]	; (80023f4 <main+0x11d0>)
 8002318:	f003 f8b8 	bl	800548c <HAL_I2C_Mem_Read>
 800231c:	4603      	mov	r3, r0
 800231e:	461a      	mov	r2, r3
 8002320:	4b35      	ldr	r3, [pc, #212]	; (80023f8 <main+0x11d4>)
 8002322:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 8002324:	4b34      	ldr	r3, [pc, #208]	; (80023f8 <main+0x11d4>)
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 800232a:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <main+0x11cc>)
 800232c:	78da      	ldrb	r2, [r3, #3]
 800232e:	4b2e      	ldr	r3, [pc, #184]	; (80023e8 <main+0x11c4>)
 8002330:	78db      	ldrb	r3, [r3, #3]
 8002332:	429a      	cmp	r2, r3
 8002334:	d117      	bne.n	8002366 <main+0x1142>
	  {
		  if(aux[2] == data_SafeLoad[2])
 8002336:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <main+0x11cc>)
 8002338:	789a      	ldrb	r2, [r3, #2]
 800233a:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <main+0x11c4>)
 800233c:	789b      	ldrb	r3, [r3, #2]
 800233e:	429a      	cmp	r2, r3
 8002340:	d111      	bne.n	8002366 <main+0x1142>
		  {
			  if(aux[1] == data_SafeLoad[1])
 8002342:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <main+0x11cc>)
 8002344:	785a      	ldrb	r2, [r3, #1]
 8002346:	4b28      	ldr	r3, [pc, #160]	; (80023e8 <main+0x11c4>)
 8002348:	785b      	ldrb	r3, [r3, #1]
 800234a:	429a      	cmp	r2, r3
 800234c:	d10b      	bne.n	8002366 <main+0x1142>
			  {
				  if(aux[0] == data_SafeLoad[0])
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <main+0x11cc>)
 8002350:	781a      	ldrb	r2, [r3, #0]
 8002352:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <main+0x11c4>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d105      	bne.n	8002366 <main+0x1142>
				  {
					  tx_check++;
 800235a:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <main+0x11bc>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	3301      	adds	r3, #1
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <main+0x11bc>)
 8002364:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP2_ADDR, BandAddress[LOUD_HIGH_ARRAY], 2, aux, 4, 1000);
 8002366:	f8b7 21fe 	ldrh.w	r2, [r7, #510]	; 0x1fe
 800236a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800236e:	9302      	str	r3, [sp, #8]
 8002370:	2304      	movs	r3, #4
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <main+0x11cc>)
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2302      	movs	r3, #2
 800237a:	2174      	movs	r1, #116	; 0x74
 800237c:	481d      	ldr	r0, [pc, #116]	; (80023f4 <main+0x11d0>)
 800237e:	f003 f885 	bl	800548c <HAL_I2C_Mem_Read>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <main+0x11d4>)
 8002388:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 800238a:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <main+0x11d4>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 8002390:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <main+0x11cc>)
 8002392:	78da      	ldrb	r2, [r3, #3]
 8002394:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <main+0x11c4>)
 8002396:	78db      	ldrb	r3, [r3, #3]
 8002398:	429a      	cmp	r2, r3
 800239a:	d117      	bne.n	80023cc <main+0x11a8>
	  {
		  if(aux[2] == data_SafeLoad[2])
 800239c:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <main+0x11cc>)
 800239e:	789a      	ldrb	r2, [r3, #2]
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <main+0x11c4>)
 80023a2:	789b      	ldrb	r3, [r3, #2]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d111      	bne.n	80023cc <main+0x11a8>
		  {
			  if(aux[1] == data_SafeLoad[1])
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <main+0x11cc>)
 80023aa:	785a      	ldrb	r2, [r3, #1]
 80023ac:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <main+0x11c4>)
 80023ae:	785b      	ldrb	r3, [r3, #1]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d10b      	bne.n	80023cc <main+0x11a8>
			  {
				  if(aux[0] == data_SafeLoad[0])
 80023b4:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <main+0x11cc>)
 80023b6:	781a      	ldrb	r2, [r3, #0]
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <main+0x11c4>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d105      	bne.n	80023cc <main+0x11a8>
				  {
					  tx_check++;
 80023c0:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <main+0x11bc>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	3301      	adds	r3, #1
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <main+0x11bc>)
 80023ca:	701a      	strb	r2, [r3, #0]
  while(tx_check < 3) // Pre-load Loudness HIGH
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <main+0x11bc>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	f67f af19 	bls.w	8002208 <main+0xfe4>
				  }
			  }
		  }
	  }
  }
  tx_check = 0;
 80023d6:	4b02      	ldr	r3, [pc, #8]	; (80023e0 <main+0x11bc>)
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]

  while(tx_check < 3) // Pre-load Loudness GRL
 80023dc:	e0ee      	b.n	80025bc <main+0x1398>
 80023de:	bf00      	nop
 80023e0:	20007427 	.word	0x20007427
 80023e4:	20007370 	.word	0x20007370
 80023e8:	2000742c 	.word	0x2000742c
 80023ec:	20007430 	.word	0x20007430
 80023f0:	20007428 	.word	0x20007428
 80023f4:	200071a0 	.word	0x200071a0
 80023f8:	2000732c 	.word	0x2000732c
  {
	  tx_check = 0;
 80023fc:	4b74      	ldr	r3, [pc, #464]	; (80025d0 <main+0x13ac>)
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
	  pote_aux = pote[LOUD_GRL_ARRAY];
 8002402:	4b74      	ldr	r3, [pc, #464]	; (80025d4 <main+0x13b0>)
 8002404:	8b9b      	ldrh	r3, [r3, #28]
 8002406:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

	  data_SafeLoad[3] = 0xFF & (loud_data[pote_aux]);
 800240a:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 800240e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002412:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b6e      	ldr	r3, [pc, #440]	; (80025d8 <main+0x13b4>)
 800241e:	70da      	strb	r2, [r3, #3]
	  data_SafeLoad[2] = 0xFF & ((loud_data[pote_aux])>>8);
 8002420:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002428:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800242c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	b2da      	uxtb	r2, r3
 8002434:	4b68      	ldr	r3, [pc, #416]	; (80025d8 <main+0x13b4>)
 8002436:	709a      	strb	r2, [r3, #2]
	  data_SafeLoad[1] = 0xFF & ((loud_data[pote_aux])>>16);
 8002438:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 800243c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002440:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b62      	ldr	r3, [pc, #392]	; (80025d8 <main+0x13b4>)
 800244e:	705a      	strb	r2, [r3, #1]
	  data_SafeLoad[0] = 0xFF & ((loud_data[pote_aux])>>24);
 8002450:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002454:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002458:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800245c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002460:	0e1b      	lsrs	r3, r3, #24
 8002462:	b2da      	uxtb	r2, r3
 8002464:	4b5c      	ldr	r3, [pc, #368]	; (80025d8 <main+0x13b4>)
 8002466:	701a      	strb	r2, [r3, #0]
	  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_GRL_ARRAY]);
 8002468:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b5b      	ldr	r3, [pc, #364]	; (80025dc <main+0x13b8>)
 8002470:	70da      	strb	r2, [r3, #3]
	  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_GRL_ARRAY])>>8);
 8002472:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	b29b      	uxth	r3, r3
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b57      	ldr	r3, [pc, #348]	; (80025dc <main+0x13b8>)
 800247e:	709a      	strb	r2, [r3, #2]
	  Safeload_Write();
 8002480:	f001 f860 	bl	8003544 <Safeload_Write>
	  delay_us(100);
 8002484:	2064      	movs	r0, #100	; 0x64
 8002486:	f001 f843 	bl	8003510 <delay_us>
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP0_ADDR, BandAddress[LOUD_GRL_ARRAY], 2, aux, 4, 1000);
 800248a:	f8b7 2200 	ldrh.w	r2, [r7, #512]	; 0x200
 800248e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002492:	9302      	str	r3, [sp, #8]
 8002494:	2304      	movs	r3, #4
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	4b51      	ldr	r3, [pc, #324]	; (80025e0 <main+0x13bc>)
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2302      	movs	r3, #2
 800249e:	2170      	movs	r1, #112	; 0x70
 80024a0:	4850      	ldr	r0, [pc, #320]	; (80025e4 <main+0x13c0>)
 80024a2:	f002 fff3 	bl	800548c <HAL_I2C_Mem_Read>
 80024a6:	4603      	mov	r3, r0
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <main+0x13c4>)
 80024ac:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 80024ae:	4b4e      	ldr	r3, [pc, #312]	; (80025e8 <main+0x13c4>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 80024b4:	4b4a      	ldr	r3, [pc, #296]	; (80025e0 <main+0x13bc>)
 80024b6:	78da      	ldrb	r2, [r3, #3]
 80024b8:	4b47      	ldr	r3, [pc, #284]	; (80025d8 <main+0x13b4>)
 80024ba:	78db      	ldrb	r3, [r3, #3]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d117      	bne.n	80024f0 <main+0x12cc>
	  {
		  if(aux[2] == data_SafeLoad[2])
 80024c0:	4b47      	ldr	r3, [pc, #284]	; (80025e0 <main+0x13bc>)
 80024c2:	789a      	ldrb	r2, [r3, #2]
 80024c4:	4b44      	ldr	r3, [pc, #272]	; (80025d8 <main+0x13b4>)
 80024c6:	789b      	ldrb	r3, [r3, #2]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d111      	bne.n	80024f0 <main+0x12cc>
		  {
			  if(aux[1] == data_SafeLoad[1])
 80024cc:	4b44      	ldr	r3, [pc, #272]	; (80025e0 <main+0x13bc>)
 80024ce:	785a      	ldrb	r2, [r3, #1]
 80024d0:	4b41      	ldr	r3, [pc, #260]	; (80025d8 <main+0x13b4>)
 80024d2:	785b      	ldrb	r3, [r3, #1]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d10b      	bne.n	80024f0 <main+0x12cc>
			  {
				  if(aux[0] == data_SafeLoad[0])
 80024d8:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <main+0x13bc>)
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	4b3e      	ldr	r3, [pc, #248]	; (80025d8 <main+0x13b4>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d105      	bne.n	80024f0 <main+0x12cc>
				  {
					  tx_check++;
 80024e4:	4b3a      	ldr	r3, [pc, #232]	; (80025d0 <main+0x13ac>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	3301      	adds	r3, #1
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	4b38      	ldr	r3, [pc, #224]	; (80025d0 <main+0x13ac>)
 80024ee:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP1_ADDR, BandAddress[LOUD_GRL_ARRAY], 2, aux, 4, 1000);
 80024f0:	f8b7 2200 	ldrh.w	r2, [r7, #512]	; 0x200
 80024f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f8:	9302      	str	r3, [sp, #8]
 80024fa:	2304      	movs	r3, #4
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	4b38      	ldr	r3, [pc, #224]	; (80025e0 <main+0x13bc>)
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	2302      	movs	r3, #2
 8002504:	2172      	movs	r1, #114	; 0x72
 8002506:	4837      	ldr	r0, [pc, #220]	; (80025e4 <main+0x13c0>)
 8002508:	f002 ffc0 	bl	800548c <HAL_I2C_Mem_Read>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	4b35      	ldr	r3, [pc, #212]	; (80025e8 <main+0x13c4>)
 8002512:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 8002514:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <main+0x13c4>)
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 800251a:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <main+0x13bc>)
 800251c:	78da      	ldrb	r2, [r3, #3]
 800251e:	4b2e      	ldr	r3, [pc, #184]	; (80025d8 <main+0x13b4>)
 8002520:	78db      	ldrb	r3, [r3, #3]
 8002522:	429a      	cmp	r2, r3
 8002524:	d117      	bne.n	8002556 <main+0x1332>
	  {
		  if(aux[2] == data_SafeLoad[2])
 8002526:	4b2e      	ldr	r3, [pc, #184]	; (80025e0 <main+0x13bc>)
 8002528:	789a      	ldrb	r2, [r3, #2]
 800252a:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <main+0x13b4>)
 800252c:	789b      	ldrb	r3, [r3, #2]
 800252e:	429a      	cmp	r2, r3
 8002530:	d111      	bne.n	8002556 <main+0x1332>
		  {
			  if(aux[1] == data_SafeLoad[1])
 8002532:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <main+0x13bc>)
 8002534:	785a      	ldrb	r2, [r3, #1]
 8002536:	4b28      	ldr	r3, [pc, #160]	; (80025d8 <main+0x13b4>)
 8002538:	785b      	ldrb	r3, [r3, #1]
 800253a:	429a      	cmp	r2, r3
 800253c:	d10b      	bne.n	8002556 <main+0x1332>
			  {
				  if(aux[0] == data_SafeLoad[0])
 800253e:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <main+0x13bc>)
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	4b25      	ldr	r3, [pc, #148]	; (80025d8 <main+0x13b4>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d105      	bne.n	8002556 <main+0x1332>
				  {
					  tx_check++;
 800254a:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <main+0x13ac>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	3301      	adds	r3, #1
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4b1f      	ldr	r3, [pc, #124]	; (80025d0 <main+0x13ac>)
 8002554:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP2_ADDR, BandAddress[LOUD_GRL_ARRAY], 2, aux, 4, 1000);
 8002556:	f8b7 2200 	ldrh.w	r2, [r7, #512]	; 0x200
 800255a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800255e:	9302      	str	r3, [sp, #8]
 8002560:	2304      	movs	r3, #4
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <main+0x13bc>)
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	2302      	movs	r3, #2
 800256a:	2174      	movs	r1, #116	; 0x74
 800256c:	481d      	ldr	r0, [pc, #116]	; (80025e4 <main+0x13c0>)
 800256e:	f002 ff8d 	bl	800548c <HAL_I2C_Mem_Read>
 8002572:	4603      	mov	r3, r0
 8002574:	461a      	mov	r2, r3
 8002576:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <main+0x13c4>)
 8002578:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 800257a:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <main+0x13c4>)
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <main+0x13bc>)
 8002582:	78da      	ldrb	r2, [r3, #3]
 8002584:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <main+0x13b4>)
 8002586:	78db      	ldrb	r3, [r3, #3]
 8002588:	429a      	cmp	r2, r3
 800258a:	d117      	bne.n	80025bc <main+0x1398>
	  {
		  if(aux[2] == data_SafeLoad[2])
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <main+0x13bc>)
 800258e:	789a      	ldrb	r2, [r3, #2]
 8002590:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <main+0x13b4>)
 8002592:	789b      	ldrb	r3, [r3, #2]
 8002594:	429a      	cmp	r2, r3
 8002596:	d111      	bne.n	80025bc <main+0x1398>
		  {
			  if(aux[1] == data_SafeLoad[1])
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <main+0x13bc>)
 800259a:	785a      	ldrb	r2, [r3, #1]
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <main+0x13b4>)
 800259e:	785b      	ldrb	r3, [r3, #1]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d10b      	bne.n	80025bc <main+0x1398>
			  {
				  if(aux[0] == data_SafeLoad[0])
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <main+0x13bc>)
 80025a6:	781a      	ldrb	r2, [r3, #0]
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <main+0x13b4>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d105      	bne.n	80025bc <main+0x1398>
				  {
					  tx_check++;
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <main+0x13ac>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	3301      	adds	r3, #1
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <main+0x13ac>)
 80025ba:	701a      	strb	r2, [r3, #0]
  while(tx_check < 3) // Pre-load Loudness GRL
 80025bc:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <main+0x13ac>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	f67f af1b 	bls.w	80023fc <main+0x11d8>
				  }
			  }
		  }
	  }
  }
  tx_check = 0;
 80025c6:	4b02      	ldr	r3, [pc, #8]	; (80025d0 <main+0x13ac>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]

  while(tx_check < 3) // Pre-load Loudness COMP
 80025cc:	e0e4      	b.n	8002798 <main+0x1574>
 80025ce:	bf00      	nop
 80025d0:	20007427 	.word	0x20007427
 80025d4:	20007370 	.word	0x20007370
 80025d8:	2000742c 	.word	0x2000742c
 80025dc:	20007430 	.word	0x20007430
 80025e0:	20007428 	.word	0x20007428
 80025e4:	200071a0 	.word	0x200071a0
 80025e8:	2000732c 	.word	0x2000732c
  {
	  tx_check = 0;
 80025ec:	4b86      	ldr	r3, [pc, #536]	; (8002808 <main+0x15e4>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
	  data_SafeLoad[3] = 0xFF & (comp_data[pote_aux]);
 80025f2:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 80025f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	4b81      	ldr	r3, [pc, #516]	; (800280c <main+0x15e8>)
 8002606:	70da      	strb	r2, [r3, #3]
	  data_SafeLoad[2] = 0xFF & ((comp_data[pote_aux])>>8);
 8002608:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 800260c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002610:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	b2da      	uxtb	r2, r3
 800261c:	4b7b      	ldr	r3, [pc, #492]	; (800280c <main+0x15e8>)
 800261e:	709a      	strb	r2, [r3, #2]
	  data_SafeLoad[1] = 0xFF & ((comp_data[pote_aux])>>16);
 8002620:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002628:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800262c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002630:	0c1b      	lsrs	r3, r3, #16
 8002632:	b2da      	uxtb	r2, r3
 8002634:	4b75      	ldr	r3, [pc, #468]	; (800280c <main+0x15e8>)
 8002636:	705a      	strb	r2, [r3, #1]
	  data_SafeLoad[0] = 0xFF & ((comp_data[pote_aux])>>24);
 8002638:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 800263c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002640:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002648:	0e1b      	lsrs	r3, r3, #24
 800264a:	b2da      	uxtb	r2, r3
 800264c:	4b6f      	ldr	r3, [pc, #444]	; (800280c <main+0x15e8>)
 800264e:	701a      	strb	r2, [r3, #0]
	  address_SafeLoad[3] = 0xFF & (MOD_LOUD_COMP_GAINALGNS145X2GAIN_ADDR);
 8002650:	4b6f      	ldr	r3, [pc, #444]	; (8002810 <main+0x15ec>)
 8002652:	2269      	movs	r2, #105	; 0x69
 8002654:	70da      	strb	r2, [r3, #3]
	  address_SafeLoad[2] = 0xFF & ((MOD_LOUD_COMP_GAINALGNS145X2GAIN_ADDR)>>8);
 8002656:	4b6e      	ldr	r3, [pc, #440]	; (8002810 <main+0x15ec>)
 8002658:	2208      	movs	r2, #8
 800265a:	709a      	strb	r2, [r3, #2]
	  Safeload_Write();
 800265c:	f000 ff72 	bl	8003544 <Safeload_Write>
	  delay_us(100);
 8002660:	2064      	movs	r0, #100	; 0x64
 8002662:	f000 ff55 	bl	8003510 <delay_us>
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP0_ADDR, MOD_LOUD_COMP_GAINALGNS145X2GAIN_ADDR, 2, aux, 4, 1000);
 8002666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800266a:	9302      	str	r3, [sp, #8]
 800266c:	2304      	movs	r3, #4
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	4b68      	ldr	r3, [pc, #416]	; (8002814 <main+0x15f0>)
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	2302      	movs	r3, #2
 8002676:	f640 0269 	movw	r2, #2153	; 0x869
 800267a:	2170      	movs	r1, #112	; 0x70
 800267c:	4866      	ldr	r0, [pc, #408]	; (8002818 <main+0x15f4>)
 800267e:	f002 ff05 	bl	800548c <HAL_I2C_Mem_Read>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	4b65      	ldr	r3, [pc, #404]	; (800281c <main+0x15f8>)
 8002688:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 800268a:	4b64      	ldr	r3, [pc, #400]	; (800281c <main+0x15f8>)
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 8002690:	4b60      	ldr	r3, [pc, #384]	; (8002814 <main+0x15f0>)
 8002692:	78da      	ldrb	r2, [r3, #3]
 8002694:	4b5d      	ldr	r3, [pc, #372]	; (800280c <main+0x15e8>)
 8002696:	78db      	ldrb	r3, [r3, #3]
 8002698:	429a      	cmp	r2, r3
 800269a:	d117      	bne.n	80026cc <main+0x14a8>
	  {
		  if(aux[2] == data_SafeLoad[2])
 800269c:	4b5d      	ldr	r3, [pc, #372]	; (8002814 <main+0x15f0>)
 800269e:	789a      	ldrb	r2, [r3, #2]
 80026a0:	4b5a      	ldr	r3, [pc, #360]	; (800280c <main+0x15e8>)
 80026a2:	789b      	ldrb	r3, [r3, #2]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d111      	bne.n	80026cc <main+0x14a8>
		  {
			  if(aux[1] == data_SafeLoad[1])
 80026a8:	4b5a      	ldr	r3, [pc, #360]	; (8002814 <main+0x15f0>)
 80026aa:	785a      	ldrb	r2, [r3, #1]
 80026ac:	4b57      	ldr	r3, [pc, #348]	; (800280c <main+0x15e8>)
 80026ae:	785b      	ldrb	r3, [r3, #1]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d10b      	bne.n	80026cc <main+0x14a8>
			  {
				  if(aux[0] == data_SafeLoad[0])
 80026b4:	4b57      	ldr	r3, [pc, #348]	; (8002814 <main+0x15f0>)
 80026b6:	781a      	ldrb	r2, [r3, #0]
 80026b8:	4b54      	ldr	r3, [pc, #336]	; (800280c <main+0x15e8>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d105      	bne.n	80026cc <main+0x14a8>
				  {
					  tx_check++;
 80026c0:	4b51      	ldr	r3, [pc, #324]	; (8002808 <main+0x15e4>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	3301      	adds	r3, #1
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	4b4f      	ldr	r3, [pc, #316]	; (8002808 <main+0x15e4>)
 80026ca:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP1_ADDR, MOD_LOUD_COMP_GAINALGNS145X2GAIN_ADDR, 2, aux, 4, 1000);
 80026cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d0:	9302      	str	r3, [sp, #8]
 80026d2:	2304      	movs	r3, #4
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	4b4f      	ldr	r3, [pc, #316]	; (8002814 <main+0x15f0>)
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	2302      	movs	r3, #2
 80026dc:	f640 0269 	movw	r2, #2153	; 0x869
 80026e0:	2172      	movs	r1, #114	; 0x72
 80026e2:	484d      	ldr	r0, [pc, #308]	; (8002818 <main+0x15f4>)
 80026e4:	f002 fed2 	bl	800548c <HAL_I2C_Mem_Read>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b4b      	ldr	r3, [pc, #300]	; (800281c <main+0x15f8>)
 80026ee:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 80026f0:	4b4a      	ldr	r3, [pc, #296]	; (800281c <main+0x15f8>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 80026f6:	4b47      	ldr	r3, [pc, #284]	; (8002814 <main+0x15f0>)
 80026f8:	78da      	ldrb	r2, [r3, #3]
 80026fa:	4b44      	ldr	r3, [pc, #272]	; (800280c <main+0x15e8>)
 80026fc:	78db      	ldrb	r3, [r3, #3]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d117      	bne.n	8002732 <main+0x150e>
	  {
		  if(aux[2] == data_SafeLoad[2])
 8002702:	4b44      	ldr	r3, [pc, #272]	; (8002814 <main+0x15f0>)
 8002704:	789a      	ldrb	r2, [r3, #2]
 8002706:	4b41      	ldr	r3, [pc, #260]	; (800280c <main+0x15e8>)
 8002708:	789b      	ldrb	r3, [r3, #2]
 800270a:	429a      	cmp	r2, r3
 800270c:	d111      	bne.n	8002732 <main+0x150e>
		  {
			  if(aux[1] == data_SafeLoad[1])
 800270e:	4b41      	ldr	r3, [pc, #260]	; (8002814 <main+0x15f0>)
 8002710:	785a      	ldrb	r2, [r3, #1]
 8002712:	4b3e      	ldr	r3, [pc, #248]	; (800280c <main+0x15e8>)
 8002714:	785b      	ldrb	r3, [r3, #1]
 8002716:	429a      	cmp	r2, r3
 8002718:	d10b      	bne.n	8002732 <main+0x150e>
			  {
				  if(aux[0] == data_SafeLoad[0])
 800271a:	4b3e      	ldr	r3, [pc, #248]	; (8002814 <main+0x15f0>)
 800271c:	781a      	ldrb	r2, [r3, #0]
 800271e:	4b3b      	ldr	r3, [pc, #236]	; (800280c <main+0x15e8>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d105      	bne.n	8002732 <main+0x150e>
				  {
					  tx_check++;
 8002726:	4b38      	ldr	r3, [pc, #224]	; (8002808 <main+0x15e4>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	3301      	adds	r3, #1
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4b36      	ldr	r3, [pc, #216]	; (8002808 <main+0x15e4>)
 8002730:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
	  stat = HAL_I2C_Mem_Read(&hi2c1, DSP2_ADDR, MOD_LOUD_COMP_GAINALGNS145X2GAIN_ADDR, 2, aux, 4, 1000);
 8002732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002736:	9302      	str	r3, [sp, #8]
 8002738:	2304      	movs	r3, #4
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	4b35      	ldr	r3, [pc, #212]	; (8002814 <main+0x15f0>)
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	2302      	movs	r3, #2
 8002742:	f640 0269 	movw	r2, #2153	; 0x869
 8002746:	2174      	movs	r1, #116	; 0x74
 8002748:	4833      	ldr	r0, [pc, #204]	; (8002818 <main+0x15f4>)
 800274a:	f002 fe9f 	bl	800548c <HAL_I2C_Mem_Read>
 800274e:	4603      	mov	r3, r0
 8002750:	461a      	mov	r2, r3
 8002752:	4b32      	ldr	r3, [pc, #200]	; (800281c <main+0x15f8>)
 8002754:	701a      	strb	r2, [r3, #0]
	  stat = 0;
 8002756:	4b31      	ldr	r3, [pc, #196]	; (800281c <main+0x15f8>)
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
	  if(aux[3] == data_SafeLoad[3])
 800275c:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <main+0x15f0>)
 800275e:	78da      	ldrb	r2, [r3, #3]
 8002760:	4b2a      	ldr	r3, [pc, #168]	; (800280c <main+0x15e8>)
 8002762:	78db      	ldrb	r3, [r3, #3]
 8002764:	429a      	cmp	r2, r3
 8002766:	d117      	bne.n	8002798 <main+0x1574>
	  {
		  if(aux[2] == data_SafeLoad[2])
 8002768:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <main+0x15f0>)
 800276a:	789a      	ldrb	r2, [r3, #2]
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <main+0x15e8>)
 800276e:	789b      	ldrb	r3, [r3, #2]
 8002770:	429a      	cmp	r2, r3
 8002772:	d111      	bne.n	8002798 <main+0x1574>
		  {
			  if(aux[1] == data_SafeLoad[1])
 8002774:	4b27      	ldr	r3, [pc, #156]	; (8002814 <main+0x15f0>)
 8002776:	785a      	ldrb	r2, [r3, #1]
 8002778:	4b24      	ldr	r3, [pc, #144]	; (800280c <main+0x15e8>)
 800277a:	785b      	ldrb	r3, [r3, #1]
 800277c:	429a      	cmp	r2, r3
 800277e:	d10b      	bne.n	8002798 <main+0x1574>
			  {
				  if(aux[0] == data_SafeLoad[0])
 8002780:	4b24      	ldr	r3, [pc, #144]	; (8002814 <main+0x15f0>)
 8002782:	781a      	ldrb	r2, [r3, #0]
 8002784:	4b21      	ldr	r3, [pc, #132]	; (800280c <main+0x15e8>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d105      	bne.n	8002798 <main+0x1574>
				  {
					  tx_check++;
 800278c:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <main+0x15e4>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	b2da      	uxtb	r2, r3
 8002794:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <main+0x15e4>)
 8002796:	701a      	strb	r2, [r3, #0]
  while(tx_check < 3) // Pre-load Loudness COMP
 8002798:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <main+0x15e4>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b02      	cmp	r3, #2
 800279e:	f67f af25 	bls.w	80025ec <main+0x13c8>
				  }
			  }
		  }
	  }
  }
  tx_check = 0;
 80027a2:	4b19      	ldr	r3, [pc, #100]	; (8002808 <main+0x15e4>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
 	  data_SafeLoad[2] = 0x00;
 80027a8:	4b18      	ldr	r3, [pc, #96]	; (800280c <main+0x15e8>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	709a      	strb	r2, [r3, #2]
	  data_SafeLoad[1] = 0x00;
 80027ae:	4b17      	ldr	r3, [pc, #92]	; (800280c <main+0x15e8>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	705a      	strb	r2, [r3, #1]
	  data_SafeLoad[0] = 0x00;
 80027b4:	4b15      	ldr	r3, [pc, #84]	; (800280c <main+0x15e8>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]

	  address_SafeLoad[1] = 0x00;
 80027ba:	4b15      	ldr	r3, [pc, #84]	; (8002810 <main+0x15ec>)
 80027bc:	2200      	movs	r2, #0
 80027be:	705a      	strb	r2, [r3, #1]
	  address_SafeLoad[0] = 0x00;
 80027c0:	4b13      	ldr	r3, [pc, #76]	; (8002810 <main+0x15ec>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]

	  num_SafeLoad_Lower[3] = 0x01;
 80027c6:	4b16      	ldr	r3, [pc, #88]	; (8002820 <main+0x15fc>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	70da      	strb	r2, [r3, #3]
	  num_SafeLoad_Lower[2] = 0x00;
 80027cc:	4b14      	ldr	r3, [pc, #80]	; (8002820 <main+0x15fc>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	709a      	strb	r2, [r3, #2]
	  num_SafeLoad_Lower[1] = 0x00;
 80027d2:	4b13      	ldr	r3, [pc, #76]	; (8002820 <main+0x15fc>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	705a      	strb	r2, [r3, #1]
	  num_SafeLoad_Lower[0] = 0x00;
 80027d8:	4b11      	ldr	r3, [pc, #68]	; (8002820 <main+0x15fc>)
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]

	  num_SafeLoad_Upper[3] = 0x00;
 80027de:	4b11      	ldr	r3, [pc, #68]	; (8002824 <main+0x1600>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	70da      	strb	r2, [r3, #3]
	  num_SafeLoad_Upper[2] = 0x00;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <main+0x1600>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	709a      	strb	r2, [r3, #2]
	  num_SafeLoad_Upper[1] = 0x00;
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <main+0x1600>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	705a      	strb	r2, [r3, #1]
	  num_SafeLoad_Upper[0] = 0x00;
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <main+0x1600>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]

	  if(update == 1)
 80027f6:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <main+0x1604>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d1d4      	bne.n	80027a8 <main+0x1584>
	  {
		  for(k=0; k<10; k++) // Filters 32Hz - 16KHz
 80027fe:	2300      	movs	r3, #0
 8002800:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8002804:	e04c      	b.n	80028a0 <main+0x167c>
 8002806:	bf00      	nop
 8002808:	20007427 	.word	0x20007427
 800280c:	2000742c 	.word	0x2000742c
 8002810:	20007430 	.word	0x20007430
 8002814:	20007428 	.word	0x20007428
 8002818:	200071a0 	.word	0x200071a0
 800281c:	2000732c 	.word	0x2000732c
 8002820:	20007434 	.word	0x20007434
 8002824:	20007438 	.word	0x20007438
 8002828:	20007426 	.word	0x20007426
		  {
			  if(flag[k] == 1)
 800282c:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8002830:	4aca      	ldr	r2, [pc, #808]	; (8002b5c <main+0x1938>)
 8002832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d12d      	bne.n	8002896 <main+0x1672>
			  {
				  flag[k] = 0;
 800283a:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 800283e:	4ac7      	ldr	r2, [pc, #796]	; (8002b5c <main+0x1938>)
 8002840:	2100      	movs	r1, #0
 8002842:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  data_SafeLoad[3] = 29 - pote[k];
 8002846:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 800284a:	4ac5      	ldr	r2, [pc, #788]	; (8002b60 <main+0x193c>)
 800284c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f1c3 031d 	rsb	r3, r3, #29
 8002856:	b2da      	uxtb	r2, r3
 8002858:	4bc2      	ldr	r3, [pc, #776]	; (8002b64 <main+0x1940>)
 800285a:	70da      	strb	r2, [r3, #3]
				  address_SafeLoad[3] = 0xFF & (BandAddress[k]);
 800285c:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002866:	443b      	add	r3, r7
 8002868:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4bbe      	ldr	r3, [pc, #760]	; (8002b68 <main+0x1944>)
 8002870:	70da      	strb	r2, [r3, #3]
				  address_SafeLoad[2] = 0xFF & ((BandAddress[k])>>8);
 8002872:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800287c:	443b      	add	r3, r7
 800287e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8002882:	0a1b      	lsrs	r3, r3, #8
 8002884:	b29b      	uxth	r3, r3
 8002886:	b2da      	uxtb	r2, r3
 8002888:	4bb7      	ldr	r3, [pc, #732]	; (8002b68 <main+0x1944>)
 800288a:	709a      	strb	r2, [r3, #2]
				  Safeload_Write();
 800288c:	f000 fe5a 	bl	8003544 <Safeload_Write>
				  delay_us(100);
 8002890:	2064      	movs	r0, #100	; 0x64
 8002892:	f000 fe3d 	bl	8003510 <delay_us>
		  for(k=0; k<10; k++) // Filters 32Hz - 16KHz
 8002896:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 800289a:	3301      	adds	r3, #1
 800289c:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 80028a0:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 80028a4:	2b09      	cmp	r3, #9
 80028a6:	d9c1      	bls.n	800282c <main+0x1608>
			  }

		  }

		  if(flag[VOL_ARRAY] == 1) // Volume General
 80028a8:	4bac      	ldr	r3, [pc, #688]	; (8002b5c <main+0x1938>)
 80028aa:	8adb      	ldrh	r3, [r3, #22]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d148      	bne.n	8002942 <main+0x171e>
		  {
			  flag[VOL_ARRAY] = 0;
 80028b0:	4baa      	ldr	r3, [pc, #680]	; (8002b5c <main+0x1938>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	82da      	strh	r2, [r3, #22]
			  pote_aux = 29 - pote[VOL_ARRAY];
 80028b6:	4baa      	ldr	r3, [pc, #680]	; (8002b60 <main+0x193c>)
 80028b8:	8adb      	ldrh	r3, [r3, #22]
 80028ba:	f1c3 031d 	rsb	r3, r3, #29
 80028be:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

			  data_SafeLoad[3] = 0xFF & (vol_data[pote_aux]);
 80028c2:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028cc:	443b      	add	r3, r7
 80028ce:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	4ba3      	ldr	r3, [pc, #652]	; (8002b64 <main+0x1940>)
 80028d6:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((vol_data[pote_aux])>>8);
 80028d8:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028e2:	443b      	add	r3, r7
 80028e4:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	4b9d      	ldr	r3, [pc, #628]	; (8002b64 <main+0x1940>)
 80028ee:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((vol_data[pote_aux])>>16);
 80028f0:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028fa:	443b      	add	r3, r7
 80028fc:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	b2da      	uxtb	r2, r3
 8002904:	4b97      	ldr	r3, [pc, #604]	; (8002b64 <main+0x1940>)
 8002906:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((vol_data[pote_aux])>>24);
 8002908:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002912:	443b      	add	r3, r7
 8002914:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8002918:	0e1b      	lsrs	r3, r3, #24
 800291a:	b2da      	uxtb	r2, r3
 800291c:	4b91      	ldr	r3, [pc, #580]	; (8002b64 <main+0x1940>)
 800291e:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[VOL_ARRAY]);
 8002920:	f8b7 31fa 	ldrh.w	r3, [r7, #506]	; 0x1fa
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4b90      	ldr	r3, [pc, #576]	; (8002b68 <main+0x1944>)
 8002928:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[VOL_ARRAY])>>8);
 800292a:	f8b7 31fa 	ldrh.w	r3, [r7, #506]	; 0x1fa
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	b29b      	uxth	r3, r3
 8002932:	b2da      	uxtb	r2, r3
 8002934:	4b8c      	ldr	r3, [pc, #560]	; (8002b68 <main+0x1944>)
 8002936:	709a      	strb	r2, [r3, #2]
			  Safeload_Write();
 8002938:	f000 fe04 	bl	8003544 <Safeload_Write>
			  delay_us(100);
 800293c:	2064      	movs	r0, #100	; 0x64
 800293e:	f000 fde7 	bl	8003510 <delay_us>
//			  SIGMA_WRITE_REGISTER_BLOCK(DSP2_ADDR, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
//			  SIGMA_WRITE_REGISTER_BLOCK(DSP2_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_ADDR, 4, num_SafeLoad);
//			  delay_us(100);
//		  }

		  if(flag[LOUD_LOW_ARRAY] == 1) // Loudness Low Side
 8002942:	4b86      	ldr	r3, [pc, #536]	; (8002b5c <main+0x1938>)
 8002944:	8b1b      	ldrh	r3, [r3, #24]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d148      	bne.n	80029dc <main+0x17b8>
		  {
			  flag[LOUD_LOW_ARRAY] = 0;
 800294a:	4b84      	ldr	r3, [pc, #528]	; (8002b5c <main+0x1938>)
 800294c:	2200      	movs	r2, #0
 800294e:	831a      	strh	r2, [r3, #24]
			  pote_aux = 29 - pote[LOUD_LOW_ARRAY];
 8002950:	4b83      	ldr	r3, [pc, #524]	; (8002b60 <main+0x193c>)
 8002952:	8b1b      	ldrh	r3, [r3, #24]
 8002954:	f1c3 031d 	rsb	r3, r3, #29
 8002958:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

			  data_SafeLoad[3] = 0xFF & (boost_data[pote_aux]);
 800295c:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002964:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	4b7d      	ldr	r3, [pc, #500]	; (8002b64 <main+0x1940>)
 8002970:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((boost_data[pote_aux])>>8);
 8002972:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002976:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800297a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800297e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4b77      	ldr	r3, [pc, #476]	; (8002b64 <main+0x1940>)
 8002988:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((boost_data[pote_aux])>>16);
 800298a:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 800298e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002992:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800299a:	0c1b      	lsrs	r3, r3, #16
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4b71      	ldr	r3, [pc, #452]	; (8002b64 <main+0x1940>)
 80029a0:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((boost_data[pote_aux])>>24);
 80029a2:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 80029a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029aa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b2:	0e1b      	lsrs	r3, r3, #24
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4b6b      	ldr	r3, [pc, #428]	; (8002b64 <main+0x1940>)
 80029b8:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_LOW_ARRAY]);
 80029ba:	f8b7 31fc 	ldrh.w	r3, [r7, #508]	; 0x1fc
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	4b69      	ldr	r3, [pc, #420]	; (8002b68 <main+0x1944>)
 80029c2:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_LOW_ARRAY])>>8);
 80029c4:	f8b7 31fc 	ldrh.w	r3, [r7, #508]	; 0x1fc
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4b66      	ldr	r3, [pc, #408]	; (8002b68 <main+0x1944>)
 80029d0:	709a      	strb	r2, [r3, #2]
			  Safeload_Write();
 80029d2:	f000 fdb7 	bl	8003544 <Safeload_Write>
			  delay_us(100);
 80029d6:	2064      	movs	r0, #100	; 0x64
 80029d8:	f000 fd9a 	bl	8003510 <delay_us>
		  }

		  if(flag[LOUD_HIGH_ARRAY] == 1) // Loudness High Side
 80029dc:	4b5f      	ldr	r3, [pc, #380]	; (8002b5c <main+0x1938>)
 80029de:	8b5b      	ldrh	r3, [r3, #26]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d148      	bne.n	8002a76 <main+0x1852>
		  {
			  flag[LOUD_HIGH_ARRAY] = 0;
 80029e4:	4b5d      	ldr	r3, [pc, #372]	; (8002b5c <main+0x1938>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	835a      	strh	r2, [r3, #26]
			  pote_aux = 29 - pote[LOUD_HIGH_ARRAY];
 80029ea:	4b5d      	ldr	r3, [pc, #372]	; (8002b60 <main+0x193c>)
 80029ec:	8b5b      	ldrh	r3, [r3, #26]
 80029ee:	f1c3 031d 	rsb	r3, r3, #29
 80029f2:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

			  data_SafeLoad[3] = 0xFF & (boost_data[pote_aux]);
 80029f6:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 80029fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	4b56      	ldr	r3, [pc, #344]	; (8002b64 <main+0x1940>)
 8002a0a:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((boost_data[pote_aux])>>8);
 8002a0c:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a14:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a1c:	0a1b      	lsrs	r3, r3, #8
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	4b50      	ldr	r3, [pc, #320]	; (8002b64 <main+0x1940>)
 8002a22:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((boost_data[pote_aux])>>16);
 8002a24:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002a28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a2c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a34:	0c1b      	lsrs	r3, r3, #16
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	4b4a      	ldr	r3, [pc, #296]	; (8002b64 <main+0x1940>)
 8002a3a:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((boost_data[pote_aux])>>24);
 8002a3c:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a44:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a4c:	0e1b      	lsrs	r3, r3, #24
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	4b44      	ldr	r3, [pc, #272]	; (8002b64 <main+0x1940>)
 8002a52:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_HIGH_ARRAY]);
 8002a54:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4b43      	ldr	r3, [pc, #268]	; (8002b68 <main+0x1944>)
 8002a5c:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_HIGH_ARRAY])>>8);
 8002a5e:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	4b3f      	ldr	r3, [pc, #252]	; (8002b68 <main+0x1944>)
 8002a6a:	709a      	strb	r2, [r3, #2]
			  Safeload_Write();
 8002a6c:	f000 fd6a 	bl	8003544 <Safeload_Write>
			  delay_us(100);
 8002a70:	2064      	movs	r0, #100	; 0x64
 8002a72:	f000 fd4d 	bl	8003510 <delay_us>
		  }

		  if(flag[LOUD_GRL_ARRAY] == 1) // Loudness General
 8002a76:	4b39      	ldr	r3, [pc, #228]	; (8002b5c <main+0x1938>)
 8002a78:	8b9b      	ldrh	r3, [r3, #28]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	f040 808b 	bne.w	8002b96 <main+0x1972>
		  {
			  flag[LOUD_GRL_ARRAY] = 0;
 8002a80:	4b36      	ldr	r3, [pc, #216]	; (8002b5c <main+0x1938>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	839a      	strh	r2, [r3, #28]
			  pote_aux = pote[LOUD_GRL_ARRAY];
 8002a86:	4b36      	ldr	r3, [pc, #216]	; (8002b60 <main+0x193c>)
 8002a88:	8b9b      	ldrh	r3, [r3, #28]
 8002a8a:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

			  data_SafeLoad[3] = 0xFF & (loud_data[pote_aux]);
 8002a8e:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002a92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a96:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	4b30      	ldr	r3, [pc, #192]	; (8002b64 <main+0x1940>)
 8002aa2:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((loud_data[pote_aux])>>8);
 8002aa4:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab4:	0a1b      	lsrs	r3, r3, #8
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	4b2a      	ldr	r3, [pc, #168]	; (8002b64 <main+0x1940>)
 8002aba:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((loud_data[pote_aux])>>16);
 8002abc:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <main+0x1940>)
 8002ad2:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((loud_data[pote_aux])>>24);
 8002ad4:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002ad8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002adc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae4:	0e1b      	lsrs	r3, r3, #24
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <main+0x1940>)
 8002aea:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_GRL_ARRAY]);
 8002aec:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <main+0x1944>)
 8002af4:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_GRL_ARRAY])>>8);
 8002af6:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 8002afa:	0a1b      	lsrs	r3, r3, #8
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <main+0x1944>)
 8002b02:	709a      	strb	r2, [r3, #2]
			  Safeload_Write();
 8002b04:	f000 fd1e 	bl	8003544 <Safeload_Write>
			  delay_us(100);
 8002b08:	2064      	movs	r0, #100	; 0x64
 8002b0a:	f000 fd01 	bl	8003510 <delay_us>

			  data_SafeLoad[3] = 0xFF & (comp_data[pote_aux]);
 8002b0e:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <main+0x1940>)
 8002b22:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((comp_data[pote_aux])>>8);
 8002b24:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002b28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <main+0x1940>)
 8002b3a:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((comp_data[pote_aux])>>16);
 8002b3c:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b4c:	0c1b      	lsrs	r3, r3, #16
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <main+0x1940>)
 8002b52:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((comp_data[pote_aux])>>24);
 8002b54:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002b58:	e008      	b.n	8002b6c <main+0x1948>
 8002b5a:	bf00      	nop
 8002b5c:	20007408 	.word	0x20007408
 8002b60:	20007370 	.word	0x20007370
 8002b64:	2000742c 	.word	0x2000742c
 8002b68:	20007430 	.word	0x20007430
 8002b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b78:	0e1b      	lsrs	r3, r3, #24
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <main+0x1984>)
 8002b7e:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (MOD_LOUD_COMP_GAINALGNS145X2GAIN_ADDR);
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <main+0x1988>)
 8002b82:	2269      	movs	r2, #105	; 0x69
 8002b84:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((MOD_LOUD_COMP_GAINALGNS145X2GAIN_ADDR)>>8);
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <main+0x1988>)
 8002b88:	2208      	movs	r2, #8
 8002b8a:	709a      	strb	r2, [r3, #2]
			  Safeload_Write();
 8002b8c:	f000 fcda 	bl	8003544 <Safeload_Write>
			  delay_us(100);
 8002b90:	2064      	movs	r0, #100	; 0x64
 8002b92:	f000 fcbd 	bl	8003510 <delay_us>
		  }

		  update = 0;
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <main+0x198c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_DMA(&hadc1, value, ADC_POT);
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	4905      	ldr	r1, [pc, #20]	; (8002bb4 <main+0x1990>)
 8002ba0:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <main+0x1994>)
 8002ba2:	f001 f871 	bl	8003c88 <HAL_ADC_Start_DMA>
 	  data_SafeLoad[2] = 0x00;
 8002ba6:	e5ff      	b.n	80027a8 <main+0x1584>
 8002ba8:	2000742c 	.word	0x2000742c
 8002bac:	20007430 	.word	0x20007430
 8002bb0:	20007426 	.word	0x20007426
 8002bb4:	20007334 	.word	0x20007334
 8002bb8:	200070f8 	.word	0x200070f8

08002bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b094      	sub	sp, #80	; 0x50
 8002bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bc2:	f107 0320 	add.w	r3, r7, #32
 8002bc6:	2230      	movs	r2, #48	; 0x30
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f004 f91e 	bl	8006e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bd0:	f107 030c 	add.w	r3, r7, #12
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	4b29      	ldr	r3, [pc, #164]	; (8002c8c <SystemClock_Config+0xd0>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	4a28      	ldr	r2, [pc, #160]	; (8002c8c <SystemClock_Config+0xd0>)
 8002bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bee:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf0:	4b26      	ldr	r3, [pc, #152]	; (8002c8c <SystemClock_Config+0xd0>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <SystemClock_Config+0xd4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c08:	4a21      	ldr	r2, [pc, #132]	; (8002c90 <SystemClock_Config+0xd4>)
 8002c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4b1f      	ldr	r3, [pc, #124]	; (8002c90 <SystemClock_Config+0xd4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c20:	2301      	movs	r3, #1
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c24:	2310      	movs	r3, #16
 8002c26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c30:	2308      	movs	r3, #8
 8002c32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002c34:	2350      	movs	r3, #80	; 0x50
 8002c36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c40:	f107 0320 	add.w	r3, r7, #32
 8002c44:	4618      	mov	r0, r3
 8002c46:	f003 f9a3 	bl	8005f90 <HAL_RCC_OscConfig>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002c50:	f000 fcd8 	bl	8003604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c54:	230f      	movs	r3, #15
 8002c56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c6c:	f107 030c 	add.w	r3, r7, #12
 8002c70:	2102      	movs	r1, #2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f003 fc04 	bl	8006480 <HAL_RCC_ClockConfig>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002c7e:	f000 fcc1 	bl	8003604 <Error_Handler>
  }
}
 8002c82:	bf00      	nop
 8002c84:	3750      	adds	r7, #80	; 0x50
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40007000 	.word	0x40007000

08002c94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c9a:	463b      	mov	r3, r7
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002ca6:	4b84      	ldr	r3, [pc, #528]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002ca8:	4a84      	ldr	r2, [pc, #528]	; (8002ebc <MX_ADC1_Init+0x228>)
 8002caa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002cac:	4b82      	ldr	r3, [pc, #520]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cb2:	4b81      	ldr	r3, [pc, #516]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002cb8:	4b7f      	ldr	r3, [pc, #508]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002cbe:	4b7e      	ldr	r3, [pc, #504]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cc4:	4b7c      	ldr	r3, [pc, #496]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002ccc:	4b7a      	ldr	r3, [pc, #488]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002cd4:	4b78      	ldr	r3, [pc, #480]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002cd6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cdc:	4b76      	ldr	r3, [pc, #472]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 15;
 8002ce2:	4b75      	ldr	r3, [pc, #468]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002ce4:	220f      	movs	r2, #15
 8002ce6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ce8:	4b73      	ldr	r3, [pc, #460]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002cf0:	4b71      	ldr	r3, [pc, #452]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cf6:	4870      	ldr	r0, [pc, #448]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002cf8:	f000 ff82 	bl	8003c00 <HAL_ADC_Init>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8002d02:	f000 fc7f 	bl	8003604 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002d0e:	2304      	movs	r3, #4
 8002d10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d12:	463b      	mov	r3, r7
 8002d14:	4619      	mov	r1, r3
 8002d16:	4868      	ldr	r0, [pc, #416]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002d18:	f001 f8ba 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8002d22:	f000 fc6f 	bl	8003604 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002d26:	2301      	movs	r3, #1
 8002d28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d2e:	463b      	mov	r3, r7
 8002d30:	4619      	mov	r1, r3
 8002d32:	4861      	ldr	r0, [pc, #388]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002d34:	f001 f8ac 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8002d3e:	f000 fc61 	bl	8003604 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002d42:	2302      	movs	r3, #2
 8002d44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002d46:	2303      	movs	r3, #3
 8002d48:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d4a:	463b      	mov	r3, r7
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	485a      	ldr	r0, [pc, #360]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002d50:	f001 f89e 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8002d5a:	f000 fc53 	bl	8003604 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002d62:	2304      	movs	r3, #4
 8002d64:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d66:	463b      	mov	r3, r7
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4853      	ldr	r0, [pc, #332]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002d6c:	f001 f890 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8002d76:	f000 fc45 	bl	8003604 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002d7e:	2305      	movs	r3, #5
 8002d80:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d82:	463b      	mov	r3, r7
 8002d84:	4619      	mov	r1, r3
 8002d86:	484c      	ldr	r0, [pc, #304]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002d88:	f001 f882 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8002d92:	f000 fc37 	bl	8003604 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002d96:	2305      	movs	r3, #5
 8002d98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002d9a:	2306      	movs	r3, #6
 8002d9c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d9e:	463b      	mov	r3, r7
 8002da0:	4619      	mov	r1, r3
 8002da2:	4845      	ldr	r0, [pc, #276]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002da4:	f001 f874 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8002dae:	f000 fc29 	bl	8003604 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002db2:	2306      	movs	r3, #6
 8002db4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002db6:	2307      	movs	r3, #7
 8002db8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dba:	463b      	mov	r3, r7
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	483e      	ldr	r0, [pc, #248]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002dc0:	f001 f866 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 8002dca:	f000 fc1b 	bl	8003604 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002dce:	2307      	movs	r3, #7
 8002dd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dd6:	463b      	mov	r3, r7
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4837      	ldr	r0, [pc, #220]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002ddc:	f001 f858 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8002de6:	f000 fc0d 	bl	8003604 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002dea:	2308      	movs	r3, #8
 8002dec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002dee:	2309      	movs	r3, #9
 8002df0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002df2:	463b      	mov	r3, r7
 8002df4:	4619      	mov	r1, r3
 8002df6:	4830      	ldr	r0, [pc, #192]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002df8:	f001 f84a 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 8002e02:	f000 fbff 	bl	8003604 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002e06:	2309      	movs	r3, #9
 8002e08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8002e0a:	230a      	movs	r3, #10
 8002e0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e0e:	463b      	mov	r3, r7
 8002e10:	4619      	mov	r1, r3
 8002e12:	4829      	ldr	r0, [pc, #164]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002e14:	f001 f83c 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8002e1e:	f000 fbf1 	bl	8003604 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002e22:	230a      	movs	r3, #10
 8002e24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8002e26:	230b      	movs	r3, #11
 8002e28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e2a:	463b      	mov	r3, r7
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4822      	ldr	r0, [pc, #136]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002e30:	f001 f82e 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 8002e3a:	f000 fbe3 	bl	8003604 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002e3e:	230b      	movs	r3, #11
 8002e40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8002e42:	230c      	movs	r3, #12
 8002e44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e46:	463b      	mov	r3, r7
 8002e48:	4619      	mov	r1, r3
 8002e4a:	481b      	ldr	r0, [pc, #108]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002e4c:	f001 f820 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 8002e56:	f000 fbd5 	bl	8003604 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002e5a:	230c      	movs	r3, #12
 8002e5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8002e5e:	230d      	movs	r3, #13
 8002e60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e62:	463b      	mov	r3, r7
 8002e64:	4619      	mov	r1, r3
 8002e66:	4814      	ldr	r0, [pc, #80]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002e68:	f001 f812 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_ADC1_Init+0x1e2>
  {
    Error_Handler();
 8002e72:	f000 fbc7 	bl	8003604 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002e76:	230d      	movs	r3, #13
 8002e78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8002e7a:	230e      	movs	r3, #14
 8002e7c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e7e:	463b      	mov	r3, r7
 8002e80:	4619      	mov	r1, r3
 8002e82:	480d      	ldr	r0, [pc, #52]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002e84:	f001 f804 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_ADC1_Init+0x1fe>
  {
    Error_Handler();
 8002e8e:	f000 fbb9 	bl	8003604 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002e92:	230e      	movs	r3, #14
 8002e94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8002e96:	230f      	movs	r3, #15
 8002e98:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e9a:	463b      	mov	r3, r7
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4806      	ldr	r0, [pc, #24]	; (8002eb8 <MX_ADC1_Init+0x224>)
 8002ea0:	f000 fff6 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_ADC1_Init+0x21a>
  {
    Error_Handler();
 8002eaa:	f000 fbab 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002eae:	bf00      	nop
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	200070f8 	.word	0x200070f8
 8002ebc:	40012000 	.word	0x40012000

08002ec0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ec4:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <MX_I2C1_Init+0x50>)
 8002ec6:	4a13      	ldr	r2, [pc, #76]	; (8002f14 <MX_I2C1_Init+0x54>)
 8002ec8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002eca:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <MX_I2C1_Init+0x50>)
 8002ecc:	4a12      	ldr	r2, [pc, #72]	; (8002f18 <MX_I2C1_Init+0x58>)
 8002ece:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <MX_I2C1_Init+0x50>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <MX_I2C1_Init+0x50>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <MX_I2C1_Init+0x50>)
 8002ede:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ee2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ee4:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <MX_I2C1_Init+0x50>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <MX_I2C1_Init+0x50>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ef0:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <MX_I2C1_Init+0x50>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <MX_I2C1_Init+0x50>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002efc:	4804      	ldr	r0, [pc, #16]	; (8002f10 <MX_I2C1_Init+0x50>)
 8002efe:	f002 f887 	bl	8005010 <HAL_I2C_Init>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f08:	f000 fb7c 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f0c:	bf00      	nop
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	200071a0 	.word	0x200071a0
 8002f14:	40005400 	.word	0x40005400
 8002f18:	00061a80 	.word	0x00061a80

08002f1c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002f20:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <MX_I2C2_Init+0x50>)
 8002f22:	4a13      	ldr	r2, [pc, #76]	; (8002f70 <MX_I2C2_Init+0x54>)
 8002f24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002f26:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <MX_I2C2_Init+0x50>)
 8002f28:	4a12      	ldr	r2, [pc, #72]	; (8002f74 <MX_I2C2_Init+0x58>)
 8002f2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <MX_I2C2_Init+0x50>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002f32:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <MX_I2C2_Init+0x50>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <MX_I2C2_Init+0x50>)
 8002f3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f3e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f40:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <MX_I2C2_Init+0x50>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <MX_I2C2_Init+0x50>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f4c:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <MX_I2C2_Init+0x50>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <MX_I2C2_Init+0x50>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002f58:	4804      	ldr	r0, [pc, #16]	; (8002f6c <MX_I2C2_Init+0x50>)
 8002f5a:	f002 f859 	bl	8005010 <HAL_I2C_Init>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002f64:	f000 fb4e 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002f68:	bf00      	nop
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	200071f4 	.word	0x200071f4
 8002f70:	40005800 	.word	0x40005800
 8002f74:	00061a80 	.word	0x00061a80

08002f78 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <MX_I2C3_Init+0x50>)
 8002f7e:	4a13      	ldr	r2, [pc, #76]	; (8002fcc <MX_I2C3_Init+0x54>)
 8002f80:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002f82:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <MX_I2C3_Init+0x50>)
 8002f84:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <MX_I2C3_Init+0x58>)
 8002f86:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f88:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <MX_I2C3_Init+0x50>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <MX_I2C3_Init+0x50>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <MX_I2C3_Init+0x50>)
 8002f96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f9a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <MX_I2C3_Init+0x50>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002fa2:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <MX_I2C3_Init+0x50>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fa8:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <MX_I2C3_Init+0x50>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <MX_I2C3_Init+0x50>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002fb4:	4804      	ldr	r0, [pc, #16]	; (8002fc8 <MX_I2C3_Init+0x50>)
 8002fb6:	f002 f82b 	bl	8005010 <HAL_I2C_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002fc0:	f000 fb20 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002fc4:	bf00      	nop
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20007248 	.word	0x20007248
 8002fcc:	40005c00 	.word	0x40005c00
 8002fd0:	00061a80 	.word	0x00061a80

08002fd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fda:	f107 0308 	add.w	r3, r7, #8
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	605a      	str	r2, [r3, #4]
 8002fe4:	609a      	str	r2, [r3, #8]
 8002fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fe8:	463b      	mov	r3, r7
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ff0:	4b1e      	ldr	r3, [pc, #120]	; (800306c <MX_TIM2_Init+0x98>)
 8002ff2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ff6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8002ff8:	4b1c      	ldr	r3, [pc, #112]	; (800306c <MX_TIM2_Init+0x98>)
 8002ffa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002ffe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003000:	4b1a      	ldr	r3, [pc, #104]	; (800306c <MX_TIM2_Init+0x98>)
 8003002:	2200      	movs	r2, #0
 8003004:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8003006:	4b19      	ldr	r3, [pc, #100]	; (800306c <MX_TIM2_Init+0x98>)
 8003008:	f240 12f3 	movw	r2, #499	; 0x1f3
 800300c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <MX_TIM2_Init+0x98>)
 8003010:	2200      	movs	r2, #0
 8003012:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003014:	4b15      	ldr	r3, [pc, #84]	; (800306c <MX_TIM2_Init+0x98>)
 8003016:	2200      	movs	r2, #0
 8003018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800301a:	4814      	ldr	r0, [pc, #80]	; (800306c <MX_TIM2_Init+0x98>)
 800301c:	f003 fbfc 	bl	8006818 <HAL_TIM_Base_Init>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003026:	f000 faed 	bl	8003604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800302a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800302e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003030:	f107 0308 	add.w	r3, r7, #8
 8003034:	4619      	mov	r1, r3
 8003036:	480d      	ldr	r0, [pc, #52]	; (800306c <MX_TIM2_Init+0x98>)
 8003038:	f003 fc98 	bl	800696c <HAL_TIM_ConfigClockSource>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003042:	f000 fadf 	bl	8003604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003046:	2320      	movs	r3, #32
 8003048:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800304a:	2300      	movs	r3, #0
 800304c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800304e:	463b      	mov	r3, r7
 8003050:	4619      	mov	r1, r3
 8003052:	4806      	ldr	r0, [pc, #24]	; (800306c <MX_TIM2_Init+0x98>)
 8003054:	f003 fe6c 	bl	8006d30 <HAL_TIMEx_MasterConfigSynchronization>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800305e:	f000 fad1 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003062:	bf00      	nop
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	2000729c 	.word	0x2000729c

08003070 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003076:	f107 0308 	add.w	r3, r7, #8
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	605a      	str	r2, [r3, #4]
 8003080:	609a      	str	r2, [r3, #8]
 8003082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003084:	463b      	mov	r3, r7
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800308c:	4b1c      	ldr	r3, [pc, #112]	; (8003100 <MX_TIM4_Init+0x90>)
 800308e:	4a1d      	ldr	r2, [pc, #116]	; (8003104 <MX_TIM4_Init+0x94>)
 8003090:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80 - 1;
 8003092:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <MX_TIM4_Init+0x90>)
 8003094:	224f      	movs	r2, #79	; 0x4f
 8003096:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003098:	4b19      	ldr	r3, [pc, #100]	; (8003100 <MX_TIM4_Init+0x90>)
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 123;
 800309e:	4b18      	ldr	r3, [pc, #96]	; (8003100 <MX_TIM4_Init+0x90>)
 80030a0:	227b      	movs	r2, #123	; 0x7b
 80030a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a4:	4b16      	ldr	r3, [pc, #88]	; (8003100 <MX_TIM4_Init+0x90>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030aa:	4b15      	ldr	r3, [pc, #84]	; (8003100 <MX_TIM4_Init+0x90>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80030b0:	4813      	ldr	r0, [pc, #76]	; (8003100 <MX_TIM4_Init+0x90>)
 80030b2:	f003 fbb1 	bl	8006818 <HAL_TIM_Base_Init>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80030bc:	f000 faa2 	bl	8003604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80030c6:	f107 0308 	add.w	r3, r7, #8
 80030ca:	4619      	mov	r1, r3
 80030cc:	480c      	ldr	r0, [pc, #48]	; (8003100 <MX_TIM4_Init+0x90>)
 80030ce:	f003 fc4d 	bl	800696c <HAL_TIM_ConfigClockSource>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80030d8:	f000 fa94 	bl	8003604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030dc:	2300      	movs	r3, #0
 80030de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030e4:	463b      	mov	r3, r7
 80030e6:	4619      	mov	r1, r3
 80030e8:	4805      	ldr	r0, [pc, #20]	; (8003100 <MX_TIM4_Init+0x90>)
 80030ea:	f003 fe21 	bl	8006d30 <HAL_TIMEx_MasterConfigSynchronization>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80030f4:	f000 fa86 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80030f8:	bf00      	nop
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	200072e4 	.word	0x200072e4
 8003104:	40000800 	.word	0x40000800

08003108 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
 8003112:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <MX_DMA_Init+0x3c>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	4a0b      	ldr	r2, [pc, #44]	; (8003144 <MX_DMA_Init+0x3c>)
 8003118:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800311c:	6313      	str	r3, [r2, #48]	; 0x30
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <MX_DMA_Init+0x3c>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003126:	607b      	str	r3, [r7, #4]
 8003128:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800312a:	2200      	movs	r2, #0
 800312c:	2100      	movs	r1, #0
 800312e:	2038      	movs	r0, #56	; 0x38
 8003130:	f001 fa29 	bl	8004586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003134:	2038      	movs	r0, #56	; 0x38
 8003136:	f001 fa42 	bl	80045be <HAL_NVIC_EnableIRQ>

}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800

08003148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314e:	f107 030c 	add.w	r3, r7, #12
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	60da      	str	r2, [r3, #12]
 800315c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	4b35      	ldr	r3, [pc, #212]	; (8003238 <MX_GPIO_Init+0xf0>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	4a34      	ldr	r2, [pc, #208]	; (8003238 <MX_GPIO_Init+0xf0>)
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	6313      	str	r3, [r2, #48]	; 0x30
 800316e:	4b32      	ldr	r3, [pc, #200]	; (8003238 <MX_GPIO_Init+0xf0>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	4b2e      	ldr	r3, [pc, #184]	; (8003238 <MX_GPIO_Init+0xf0>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	4a2d      	ldr	r2, [pc, #180]	; (8003238 <MX_GPIO_Init+0xf0>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6313      	str	r3, [r2, #48]	; 0x30
 800318a:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <MX_GPIO_Init+0xf0>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	607b      	str	r3, [r7, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	4b27      	ldr	r3, [pc, #156]	; (8003238 <MX_GPIO_Init+0xf0>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	4a26      	ldr	r2, [pc, #152]	; (8003238 <MX_GPIO_Init+0xf0>)
 80031a0:	f043 0302 	orr.w	r3, r3, #2
 80031a4:	6313      	str	r3, [r2, #48]	; 0x30
 80031a6:	4b24      	ldr	r3, [pc, #144]	; (8003238 <MX_GPIO_Init+0xf0>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_SCK_Pin|DEMP1_Pin|DEMP0_Pin|FMT_Pin, GPIO_PIN_RESET);
 80031b2:	2200      	movs	r2, #0
 80031b4:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 80031b8:	4820      	ldr	r0, [pc, #128]	; (800323c <MX_GPIO_Init+0xf4>)
 80031ba:	f001 ff0f 	bl	8004fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUTE_GPIO_Port, MUTE_Pin, GPIO_PIN_RESET);
 80031be:	2200      	movs	r2, #0
 80031c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031c4:	481e      	ldr	r0, [pc, #120]	; (8003240 <MX_GPIO_Init+0xf8>)
 80031c6:	f001 ff09 	bl	8004fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_MCU0_Pin|nRST_DSP0_Pin|nRST_DSP1_Pin|nRST_DSP2_Pin, GPIO_PIN_RESET);
 80031ca:	2200      	movs	r2, #0
 80031cc:	f44f 714c 	mov.w	r1, #816	; 0x330
 80031d0:	481c      	ldr	r0, [pc, #112]	; (8003244 <MX_GPIO_Init+0xfc>)
 80031d2:	f001 ff03 	bl	8004fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_SCK_Pin DEMP1_Pin DEMP0_Pin FMT_Pin */
  GPIO_InitStruct.Pin = EN_SCK_Pin|DEMP1_Pin|DEMP0_Pin|FMT_Pin;
 80031d6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80031da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031dc:	2301      	movs	r3, #1
 80031de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031e8:	f107 030c 	add.w	r3, r7, #12
 80031ec:	4619      	mov	r1, r3
 80031ee:	4813      	ldr	r0, [pc, #76]	; (800323c <MX_GPIO_Init+0xf4>)
 80031f0:	f001 fd70 	bl	8004cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MUTE_Pin */
  GPIO_InitStruct.Pin = MUTE_Pin;
 80031f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031fa:	2301      	movs	r3, #1
 80031fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003202:	2300      	movs	r3, #0
 8003204:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MUTE_GPIO_Port, &GPIO_InitStruct);
 8003206:	f107 030c 	add.w	r3, r7, #12
 800320a:	4619      	mov	r1, r3
 800320c:	480c      	ldr	r0, [pc, #48]	; (8003240 <MX_GPIO_Init+0xf8>)
 800320e:	f001 fd61 	bl	8004cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_MCU0_Pin nRST_DSP0_Pin nRST_DSP1_Pin nRST_DSP2_Pin */
  GPIO_InitStruct.Pin = GPIO_MCU0_Pin|nRST_DSP0_Pin|nRST_DSP1_Pin|nRST_DSP2_Pin;
 8003212:	f44f 734c 	mov.w	r3, #816	; 0x330
 8003216:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003218:	2301      	movs	r3, #1
 800321a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003220:	2300      	movs	r3, #0
 8003222:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003224:	f107 030c 	add.w	r3, r7, #12
 8003228:	4619      	mov	r1, r3
 800322a:	4806      	ldr	r0, [pc, #24]	; (8003244 <MX_GPIO_Init+0xfc>)
 800322c:	f001 fd52 	bl	8004cd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003230:	bf00      	nop
 8003232:	3720      	adds	r7, #32
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40023800 	.word	0x40023800
 800323c:	40020800 	.word	0x40020800
 8003240:	40020000 	.word	0x40020000
 8003244:	40020400 	.word	0x40020400

08003248 <SIGMA_WRITE_REGISTER_BLOCK>:

/* USER CODE BEGIN 4 */
void SIGMA_WRITE_REGISTER_BLOCK(uint16_t devAddress, uint16_t address, uint16_t length, uint8_t *pData)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af04      	add	r7, sp, #16
 800324e:	607b      	str	r3, [r7, #4]
 8003250:	4603      	mov	r3, r0
 8003252:	81fb      	strh	r3, [r7, #14]
 8003254:	460b      	mov	r3, r1
 8003256:	81bb      	strh	r3, [r7, #12]
 8003258:	4613      	mov	r3, r2
 800325a:	817b      	strh	r3, [r7, #10]
	stat = HAL_I2C_Mem_Write(&hi2c1, devAddress, address, 2, pData, length, 1000);
 800325c:	89ba      	ldrh	r2, [r7, #12]
 800325e:	89f9      	ldrh	r1, [r7, #14]
 8003260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003264:	9302      	str	r3, [sp, #8]
 8003266:	897b      	ldrh	r3, [r7, #10]
 8003268:	9301      	str	r3, [sp, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	2302      	movs	r3, #2
 8003270:	4805      	ldr	r0, [pc, #20]	; (8003288 <SIGMA_WRITE_REGISTER_BLOCK+0x40>)
 8003272:	f002 f811 	bl	8005298 <HAL_I2C_Mem_Write>
 8003276:	4603      	mov	r3, r0
 8003278:	461a      	mov	r2, r3
 800327a:	4b04      	ldr	r3, [pc, #16]	; (800328c <SIGMA_WRITE_REGISTER_BLOCK+0x44>)
 800327c:	701a      	strb	r2, [r3, #0]
}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	200071a0 	.word	0x200071a0
 800328c:	2000732c 	.word	0x2000732c

08003290 <SIGMA_WRITE_DELAY>:

void SIGMA_WRITE_DELAY(uint16_t devAddress, uint16_t length, uint8_t *pData)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	603a      	str	r2, [r7, #0]
 800329a:	80fb      	strh	r3, [r7, #6]
 800329c:	460b      	mov	r3, r1
 800329e:	80bb      	strh	r3, [r7, #4]
	HAL_Delay(11);
 80032a0:	200b      	movs	r0, #11
 80032a2:	f000 fc89 	bl	8003bb8 <HAL_Delay>
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
	uint32_t j = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	613b      	str	r3, [r7, #16]
	uint32_t k = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]


	for(k=VOL_SUB; k<ADC_POT; k++) // For volume, loud low, loud high, loud general
 80032c4:	230a      	movs	r3, #10
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	e080      	b.n	80033cc <HAL_ADC_ConvCpltCallback+0x11c>
	{
		for(i=0; i<30; i++)
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	e077      	b.n	80033c0 <HAL_ADC_ConvCpltCallback+0x110>
		{
			if((i == 0) && (value[k] < (linear_in_table[i+1])-15))
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d11f      	bne.n	8003316 <HAL_ADC_ConvCpltCallback+0x66>
 80032d6:	4a88      	ldr	r2, [pc, #544]	; (80034f8 <HAL_ADC_ConvCpltCallback+0x248>)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	3201      	adds	r2, #1
 80032e2:	4986      	ldr	r1, [pc, #536]	; (80034fc <HAL_ADC_ConvCpltCallback+0x24c>)
 80032e4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80032e8:	3a0f      	subs	r2, #15
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d213      	bcs.n	8003316 <HAL_ADC_ConvCpltCallback+0x66>
			{
				if(pote[k] != i)
 80032ee:	4a84      	ldr	r2, [pc, #528]	; (8003500 <HAL_ADC_ConvCpltCallback+0x250>)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032f6:	461a      	mov	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d05d      	beq.n	80033ba <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	b299      	uxth	r1, r3
 8003302:	4a7f      	ldr	r2, [pc, #508]	; (8003500 <HAL_ADC_ConvCpltCallback+0x250>)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 800330a:	4a7e      	ldr	r2, [pc, #504]	; (8003504 <HAL_ADC_ConvCpltCallback+0x254>)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2101      	movs	r1, #1
 8003310:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[k] != i)
 8003314:	e051      	b.n	80033ba <HAL_ADC_ConvCpltCallback+0x10a>
				}
			}
			else if((i > 0) && (i < 29) && (value[k] > (linear_in_table[i]+15)) && (value[k] < (linear_in_table[i+1])-15))
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d02d      	beq.n	8003378 <HAL_ADC_ConvCpltCallback+0xc8>
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2b1c      	cmp	r3, #28
 8003320:	d82a      	bhi.n	8003378 <HAL_ADC_ConvCpltCallback+0xc8>
 8003322:	4a75      	ldr	r2, [pc, #468]	; (80034f8 <HAL_ADC_ConvCpltCallback+0x248>)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332a:	4974      	ldr	r1, [pc, #464]	; (80034fc <HAL_ADC_ConvCpltCallback+0x24c>)
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003332:	320f      	adds	r2, #15
 8003334:	4293      	cmp	r3, r2
 8003336:	d91f      	bls.n	8003378 <HAL_ADC_ConvCpltCallback+0xc8>
 8003338:	4a6f      	ldr	r2, [pc, #444]	; (80034f8 <HAL_ADC_ConvCpltCallback+0x248>)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	3201      	adds	r2, #1
 8003344:	496d      	ldr	r1, [pc, #436]	; (80034fc <HAL_ADC_ConvCpltCallback+0x24c>)
 8003346:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800334a:	3a0f      	subs	r2, #15
 800334c:	4293      	cmp	r3, r2
 800334e:	d213      	bcs.n	8003378 <HAL_ADC_ConvCpltCallback+0xc8>
			{
				if(pote[k] != i)
 8003350:	4a6b      	ldr	r2, [pc, #428]	; (8003500 <HAL_ADC_ConvCpltCallback+0x250>)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003358:	461a      	mov	r2, r3
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	4293      	cmp	r3, r2
 800335e:	d02c      	beq.n	80033ba <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	b299      	uxth	r1, r3
 8003364:	4a66      	ldr	r2, [pc, #408]	; (8003500 <HAL_ADC_ConvCpltCallback+0x250>)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 800336c:	4a65      	ldr	r2, [pc, #404]	; (8003504 <HAL_ADC_ConvCpltCallback+0x254>)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2101      	movs	r1, #1
 8003372:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[k] != i)
 8003376:	e020      	b.n	80033ba <HAL_ADC_ConvCpltCallback+0x10a>
				}
			}
			else if((i == 29) && (value[k] > (linear_in_table[i]+15)))
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b1d      	cmp	r3, #29
 800337c:	d11d      	bne.n	80033ba <HAL_ADC_ConvCpltCallback+0x10a>
 800337e:	4a5e      	ldr	r2, [pc, #376]	; (80034f8 <HAL_ADC_ConvCpltCallback+0x248>)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003386:	495d      	ldr	r1, [pc, #372]	; (80034fc <HAL_ADC_ConvCpltCallback+0x24c>)
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800338e:	320f      	adds	r2, #15
 8003390:	4293      	cmp	r3, r2
 8003392:	d912      	bls.n	80033ba <HAL_ADC_ConvCpltCallback+0x10a>
			{
				if(pote[k] != i)
 8003394:	4a5a      	ldr	r2, [pc, #360]	; (8003500 <HAL_ADC_ConvCpltCallback+0x250>)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800339c:	461a      	mov	r2, r3
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00a      	beq.n	80033ba <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	b299      	uxth	r1, r3
 80033a8:	4a55      	ldr	r2, [pc, #340]	; (8003500 <HAL_ADC_ConvCpltCallback+0x250>)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 80033b0:	4a54      	ldr	r2, [pc, #336]	; (8003504 <HAL_ADC_ConvCpltCallback+0x254>)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2101      	movs	r1, #1
 80033b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0; i<30; i++)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	3301      	adds	r3, #1
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2b1d      	cmp	r3, #29
 80033c4:	d984      	bls.n	80032d0 <HAL_ADC_ConvCpltCallback+0x20>
	for(k=VOL_SUB; k<ADC_POT; k++) // For volume, loud low, loud high, loud general
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3301      	adds	r3, #1
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2b0e      	cmp	r3, #14
 80033d0:	f67f af7b 	bls.w	80032ca <HAL_ADC_ConvCpltCallback+0x1a>
			}
		}
	}


	for(j=0; j<10; j++) // For filter 32Hz - 16KHz
 80033d4:	2300      	movs	r3, #0
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	e080      	b.n	80034dc <HAL_ADC_ConvCpltCallback+0x22c>
	{
		for(i=0; i<30; i++)
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e077      	b.n	80034d0 <HAL_ADC_ConvCpltCallback+0x220>
		{
			if((i == 0) && (value[j] < (log_in_table[i+1])-15))
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d11f      	bne.n	8003426 <HAL_ADC_ConvCpltCallback+0x176>
 80033e6:	4a44      	ldr	r2, [pc, #272]	; (80034f8 <HAL_ADC_ConvCpltCallback+0x248>)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	3201      	adds	r2, #1
 80033f2:	4945      	ldr	r1, [pc, #276]	; (8003508 <HAL_ADC_ConvCpltCallback+0x258>)
 80033f4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80033f8:	3a0f      	subs	r2, #15
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d213      	bcs.n	8003426 <HAL_ADC_ConvCpltCallback+0x176>
			{
				if(pote[j] != i)
 80033fe:	4a40      	ldr	r2, [pc, #256]	; (8003500 <HAL_ADC_ConvCpltCallback+0x250>)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003406:	461a      	mov	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	4293      	cmp	r3, r2
 800340c:	d05d      	beq.n	80034ca <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	b299      	uxth	r1, r3
 8003412:	4a3b      	ldr	r2, [pc, #236]	; (8003500 <HAL_ADC_ConvCpltCallback+0x250>)
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 800341a:	4a3a      	ldr	r2, [pc, #232]	; (8003504 <HAL_ADC_ConvCpltCallback+0x254>)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	2101      	movs	r1, #1
 8003420:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[j] != i)
 8003424:	e051      	b.n	80034ca <HAL_ADC_ConvCpltCallback+0x21a>
				}
			}
			else if((i > 0) && (i < 29) && (value[j] > (log_in_table[i]+15)) && (value[j] < (log_in_table[i+1])-15))
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d02d      	beq.n	8003488 <HAL_ADC_ConvCpltCallback+0x1d8>
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b1c      	cmp	r3, #28
 8003430:	d82a      	bhi.n	8003488 <HAL_ADC_ConvCpltCallback+0x1d8>
 8003432:	4a31      	ldr	r2, [pc, #196]	; (80034f8 <HAL_ADC_ConvCpltCallback+0x248>)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343a:	4933      	ldr	r1, [pc, #204]	; (8003508 <HAL_ADC_ConvCpltCallback+0x258>)
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003442:	320f      	adds	r2, #15
 8003444:	4293      	cmp	r3, r2
 8003446:	d91f      	bls.n	8003488 <HAL_ADC_ConvCpltCallback+0x1d8>
 8003448:	4a2b      	ldr	r2, [pc, #172]	; (80034f8 <HAL_ADC_ConvCpltCallback+0x248>)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	3201      	adds	r2, #1
 8003454:	492c      	ldr	r1, [pc, #176]	; (8003508 <HAL_ADC_ConvCpltCallback+0x258>)
 8003456:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800345a:	3a0f      	subs	r2, #15
 800345c:	4293      	cmp	r3, r2
 800345e:	d213      	bcs.n	8003488 <HAL_ADC_ConvCpltCallback+0x1d8>
			{
				if(pote[j] != i)
 8003460:	4a27      	ldr	r2, [pc, #156]	; (8003500 <HAL_ADC_ConvCpltCallback+0x250>)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003468:	461a      	mov	r2, r3
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	4293      	cmp	r3, r2
 800346e:	d02c      	beq.n	80034ca <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	b299      	uxth	r1, r3
 8003474:	4a22      	ldr	r2, [pc, #136]	; (8003500 <HAL_ADC_ConvCpltCallback+0x250>)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 800347c:	4a21      	ldr	r2, [pc, #132]	; (8003504 <HAL_ADC_ConvCpltCallback+0x254>)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2101      	movs	r1, #1
 8003482:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[j] != i)
 8003486:	e020      	b.n	80034ca <HAL_ADC_ConvCpltCallback+0x21a>
				}
			}
			else if((i == 29) && (value[j] > (log_in_table[i]+15)))
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b1d      	cmp	r3, #29
 800348c:	d11d      	bne.n	80034ca <HAL_ADC_ConvCpltCallback+0x21a>
 800348e:	4a1a      	ldr	r2, [pc, #104]	; (80034f8 <HAL_ADC_ConvCpltCallback+0x248>)
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003496:	491c      	ldr	r1, [pc, #112]	; (8003508 <HAL_ADC_ConvCpltCallback+0x258>)
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800349e:	320f      	adds	r2, #15
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d912      	bls.n	80034ca <HAL_ADC_ConvCpltCallback+0x21a>
			{
				if(pote[j] != i)
 80034a4:	4a16      	ldr	r2, [pc, #88]	; (8003500 <HAL_ADC_ConvCpltCallback+0x250>)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034ac:	461a      	mov	r2, r3
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00a      	beq.n	80034ca <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	b299      	uxth	r1, r3
 80034b8:	4a11      	ldr	r2, [pc, #68]	; (8003500 <HAL_ADC_ConvCpltCallback+0x250>)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 80034c0:	4a10      	ldr	r2, [pc, #64]	; (8003504 <HAL_ADC_ConvCpltCallback+0x254>)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2101      	movs	r1, #1
 80034c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0; i<30; i++)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	3301      	adds	r3, #1
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2b1d      	cmp	r3, #29
 80034d4:	d984      	bls.n	80033e0 <HAL_ADC_ConvCpltCallback+0x130>
	for(j=0; j<10; j++) // For filter 32Hz - 16KHz
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	3301      	adds	r3, #1
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	2b09      	cmp	r3, #9
 80034e0:	f67f af7b 	bls.w	80033da <HAL_ADC_ConvCpltCallback+0x12a>
			}
		}

	}

	update = 1;
 80034e4:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_ADC_ConvCpltCallback+0x25c>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	701a      	strb	r2, [r3, #0]
}
 80034ea:	bf00      	nop
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20007334 	.word	0x20007334
 80034fc:	200073cc 	.word	0x200073cc
 8003500:	20007370 	.word	0x20007370
 8003504:	20007408 	.word	0x20007408
 8003508:	20007390 	.word	0x20007390
 800350c:	20007426 	.word	0x20007426

08003510 <delay_us>:
void delay_us(uint16_t us)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	80fb      	strh	r3, [r7, #6]
	htim4.Instance->CNT = 0;
 800351a:	4b09      	ldr	r3, [pc, #36]	; (8003540 <delay_us+0x30>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2200      	movs	r2, #0
 8003520:	625a      	str	r2, [r3, #36]	; 0x24
	while((htim4.Instance->CNT) < us);
 8003522:	bf00      	nop
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <delay_us+0x30>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	429a      	cmp	r2, r3
 800352e:	d3f9      	bcc.n	8003524 <delay_us+0x14>
}
 8003530:	bf00      	nop
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	200072e4 	.word	0x200072e4

08003544 <Safeload_Write>:
void Safeload_Write(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
	SIGMA_WRITE_REGISTER_BLOCK(DSP0_ADDR, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 8003548:	4b2a      	ldr	r3, [pc, #168]	; (80035f4 <Safeload_Write+0xb0>)
 800354a:	2204      	movs	r2, #4
 800354c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003550:	2070      	movs	r0, #112	; 0x70
 8003552:	f7ff fe79 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK(DSP0_ADDR, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 8003556:	4b28      	ldr	r3, [pc, #160]	; (80035f8 <Safeload_Write+0xb4>)
 8003558:	2204      	movs	r2, #4
 800355a:	f246 0105 	movw	r1, #24581	; 0x6005
 800355e:	2070      	movs	r0, #112	; 0x70
 8003560:	f7ff fe72 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK(DSP0_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_LOWER_ADDR, 4, num_SafeLoad_Lower);
 8003564:	4b25      	ldr	r3, [pc, #148]	; (80035fc <Safeload_Write+0xb8>)
 8003566:	2204      	movs	r2, #4
 8003568:	f246 0106 	movw	r1, #24582	; 0x6006
 800356c:	2070      	movs	r0, #112	; 0x70
 800356e:	f7ff fe6b 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
    SIGMA_WRITE_REGISTER_BLOCK(DSP0_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_UPPER_ADDR, 4, num_SafeLoad_Upper);
 8003572:	4b23      	ldr	r3, [pc, #140]	; (8003600 <Safeload_Write+0xbc>)
 8003574:	2204      	movs	r2, #4
 8003576:	f246 0107 	movw	r1, #24583	; 0x6007
 800357a:	2070      	movs	r0, #112	; 0x70
 800357c:	f7ff fe64 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>

	SIGMA_WRITE_REGISTER_BLOCK(DSP1_ADDR, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 8003580:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <Safeload_Write+0xb0>)
 8003582:	2204      	movs	r2, #4
 8003584:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003588:	2072      	movs	r0, #114	; 0x72
 800358a:	f7ff fe5d 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK(DSP1_ADDR, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 800358e:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <Safeload_Write+0xb4>)
 8003590:	2204      	movs	r2, #4
 8003592:	f246 0105 	movw	r1, #24581	; 0x6005
 8003596:	2072      	movs	r0, #114	; 0x72
 8003598:	f7ff fe56 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK(DSP1_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_LOWER_ADDR, 4, num_SafeLoad_Lower);
 800359c:	4b17      	ldr	r3, [pc, #92]	; (80035fc <Safeload_Write+0xb8>)
 800359e:	2204      	movs	r2, #4
 80035a0:	f246 0106 	movw	r1, #24582	; 0x6006
 80035a4:	2072      	movs	r0, #114	; 0x72
 80035a6:	f7ff fe4f 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
    SIGMA_WRITE_REGISTER_BLOCK(DSP1_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_UPPER_ADDR, 4, num_SafeLoad_Upper);
 80035aa:	4b15      	ldr	r3, [pc, #84]	; (8003600 <Safeload_Write+0xbc>)
 80035ac:	2204      	movs	r2, #4
 80035ae:	f246 0107 	movw	r1, #24583	; 0x6007
 80035b2:	2072      	movs	r0, #114	; 0x72
 80035b4:	f7ff fe48 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>

	SIGMA_WRITE_REGISTER_BLOCK(DSP2_ADDR, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 80035b8:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <Safeload_Write+0xb0>)
 80035ba:	2204      	movs	r2, #4
 80035bc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80035c0:	2074      	movs	r0, #116	; 0x74
 80035c2:	f7ff fe41 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK(DSP2_ADDR, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <Safeload_Write+0xb4>)
 80035c8:	2204      	movs	r2, #4
 80035ca:	f246 0105 	movw	r1, #24581	; 0x6005
 80035ce:	2074      	movs	r0, #116	; 0x74
 80035d0:	f7ff fe3a 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK(DSP2_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_LOWER_ADDR, 4, num_SafeLoad_Lower);
 80035d4:	4b09      	ldr	r3, [pc, #36]	; (80035fc <Safeload_Write+0xb8>)
 80035d6:	2204      	movs	r2, #4
 80035d8:	f246 0106 	movw	r1, #24582	; 0x6006
 80035dc:	2074      	movs	r0, #116	; 0x74
 80035de:	f7ff fe33 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
    SIGMA_WRITE_REGISTER_BLOCK(DSP2_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_UPPER_ADDR, 4, num_SafeLoad_Upper);
 80035e2:	4b07      	ldr	r3, [pc, #28]	; (8003600 <Safeload_Write+0xbc>)
 80035e4:	2204      	movs	r2, #4
 80035e6:	f246 0107 	movw	r1, #24583	; 0x6007
 80035ea:	2074      	movs	r0, #116	; 0x74
 80035ec:	f7ff fe2c 	bl	8003248 <SIGMA_WRITE_REGISTER_BLOCK>
}
 80035f0:	bf00      	nop
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	2000742c 	.word	0x2000742c
 80035f8:	20007430 	.word	0x20007430
 80035fc:	20007434 	.word	0x20007434
 8003600:	20007438 	.word	0x20007438

08003604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003608:	b672      	cpsid	i
}
 800360a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800360c:	e7fe      	b.n	800360c <Error_Handler+0x8>
	...

08003610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	4b10      	ldr	r3, [pc, #64]	; (800365c <HAL_MspInit+0x4c>)
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	4a0f      	ldr	r2, [pc, #60]	; (800365c <HAL_MspInit+0x4c>)
 8003620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003624:	6453      	str	r3, [r2, #68]	; 0x44
 8003626:	4b0d      	ldr	r3, [pc, #52]	; (800365c <HAL_MspInit+0x4c>)
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362e:	607b      	str	r3, [r7, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	603b      	str	r3, [r7, #0]
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <HAL_MspInit+0x4c>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	4a08      	ldr	r2, [pc, #32]	; (800365c <HAL_MspInit+0x4c>)
 800363c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_MspInit+0x4c>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800

08003660 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08c      	sub	sp, #48	; 0x30
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003668:	f107 031c 	add.w	r3, r7, #28
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a49      	ldr	r2, [pc, #292]	; (80037a4 <HAL_ADC_MspInit+0x144>)
 800367e:	4293      	cmp	r3, r2
 8003680:	f040 808c 	bne.w	800379c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003684:	2300      	movs	r3, #0
 8003686:	61bb      	str	r3, [r7, #24]
 8003688:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <HAL_ADC_MspInit+0x148>)
 800368a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368c:	4a46      	ldr	r2, [pc, #280]	; (80037a8 <HAL_ADC_MspInit+0x148>)
 800368e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003692:	6453      	str	r3, [r2, #68]	; 0x44
 8003694:	4b44      	ldr	r3, [pc, #272]	; (80037a8 <HAL_ADC_MspInit+0x148>)
 8003696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	4b40      	ldr	r3, [pc, #256]	; (80037a8 <HAL_ADC_MspInit+0x148>)
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	4a3f      	ldr	r2, [pc, #252]	; (80037a8 <HAL_ADC_MspInit+0x148>)
 80036aa:	f043 0304 	orr.w	r3, r3, #4
 80036ae:	6313      	str	r3, [r2, #48]	; 0x30
 80036b0:	4b3d      	ldr	r3, [pc, #244]	; (80037a8 <HAL_ADC_MspInit+0x148>)
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	4b39      	ldr	r3, [pc, #228]	; (80037a8 <HAL_ADC_MspInit+0x148>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	4a38      	ldr	r2, [pc, #224]	; (80037a8 <HAL_ADC_MspInit+0x148>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6313      	str	r3, [r2, #48]	; 0x30
 80036cc:	4b36      	ldr	r3, [pc, #216]	; (80037a8 <HAL_ADC_MspInit+0x148>)
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d8:	2300      	movs	r3, #0
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	4b32      	ldr	r3, [pc, #200]	; (80037a8 <HAL_ADC_MspInit+0x148>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	4a31      	ldr	r2, [pc, #196]	; (80037a8 <HAL_ADC_MspInit+0x148>)
 80036e2:	f043 0302 	orr.w	r3, r3, #2
 80036e6:	6313      	str	r3, [r2, #48]	; 0x30
 80036e8:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <HAL_ADC_MspInit+0x148>)
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80036f4:	231f      	movs	r3, #31
 80036f6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036f8:	2303      	movs	r3, #3
 80036fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003700:	f107 031c 	add.w	r3, r7, #28
 8003704:	4619      	mov	r1, r3
 8003706:	4829      	ldr	r0, [pc, #164]	; (80037ac <HAL_ADC_MspInit+0x14c>)
 8003708:	f001 fae4 	bl	8004cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800370c:	23ff      	movs	r3, #255	; 0xff
 800370e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003710:	2303      	movs	r3, #3
 8003712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003714:	2300      	movs	r3, #0
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003718:	f107 031c 	add.w	r3, r7, #28
 800371c:	4619      	mov	r1, r3
 800371e:	4824      	ldr	r0, [pc, #144]	; (80037b0 <HAL_ADC_MspInit+0x150>)
 8003720:	f001 fad8 	bl	8004cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003724:	2303      	movs	r3, #3
 8003726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003728:	2303      	movs	r3, #3
 800372a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372c:	2300      	movs	r3, #0
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003730:	f107 031c 	add.w	r3, r7, #28
 8003734:	4619      	mov	r1, r3
 8003736:	481f      	ldr	r0, [pc, #124]	; (80037b4 <HAL_ADC_MspInit+0x154>)
 8003738:	f001 facc 	bl	8004cd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800373c:	4b1e      	ldr	r3, [pc, #120]	; (80037b8 <HAL_ADC_MspInit+0x158>)
 800373e:	4a1f      	ldr	r2, [pc, #124]	; (80037bc <HAL_ADC_MspInit+0x15c>)
 8003740:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003742:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <HAL_ADC_MspInit+0x158>)
 8003744:	2200      	movs	r2, #0
 8003746:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003748:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <HAL_ADC_MspInit+0x158>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800374e:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <HAL_ADC_MspInit+0x158>)
 8003750:	2200      	movs	r2, #0
 8003752:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003754:	4b18      	ldr	r3, [pc, #96]	; (80037b8 <HAL_ADC_MspInit+0x158>)
 8003756:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800375a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800375c:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <HAL_ADC_MspInit+0x158>)
 800375e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003762:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003764:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <HAL_ADC_MspInit+0x158>)
 8003766:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800376a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800376c:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <HAL_ADC_MspInit+0x158>)
 800376e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003772:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003774:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <HAL_ADC_MspInit+0x158>)
 8003776:	2200      	movs	r2, #0
 8003778:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <HAL_ADC_MspInit+0x158>)
 800377c:	2200      	movs	r2, #0
 800377e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003780:	480d      	ldr	r0, [pc, #52]	; (80037b8 <HAL_ADC_MspInit+0x158>)
 8003782:	f000 ff37 	bl	80045f4 <HAL_DMA_Init>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800378c:	f7ff ff3a 	bl	8003604 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a09      	ldr	r2, [pc, #36]	; (80037b8 <HAL_ADC_MspInit+0x158>)
 8003794:	639a      	str	r2, [r3, #56]	; 0x38
 8003796:	4a08      	ldr	r2, [pc, #32]	; (80037b8 <HAL_ADC_MspInit+0x158>)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800379c:	bf00      	nop
 800379e:	3730      	adds	r7, #48	; 0x30
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40012000 	.word	0x40012000
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40020800 	.word	0x40020800
 80037b0:	40020000 	.word	0x40020000
 80037b4:	40020400 	.word	0x40020400
 80037b8:	20007140 	.word	0x20007140
 80037bc:	40026410 	.word	0x40026410

080037c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08e      	sub	sp, #56	; 0x38
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a63      	ldr	r2, [pc, #396]	; (800396c <HAL_I2C_MspInit+0x1ac>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d12c      	bne.n	800383c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037e2:	2300      	movs	r3, #0
 80037e4:	623b      	str	r3, [r7, #32]
 80037e6:	4b62      	ldr	r3, [pc, #392]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	4a61      	ldr	r2, [pc, #388]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 80037ec:	f043 0302 	orr.w	r3, r3, #2
 80037f0:	6313      	str	r3, [r2, #48]	; 0x30
 80037f2:	4b5f      	ldr	r3, [pc, #380]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	623b      	str	r3, [r7, #32]
 80037fc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037fe:	23c0      	movs	r3, #192	; 0xc0
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003802:	2312      	movs	r3, #18
 8003804:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003806:	2300      	movs	r3, #0
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800380a:	2303      	movs	r3, #3
 800380c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800380e:	2304      	movs	r3, #4
 8003810:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003816:	4619      	mov	r1, r3
 8003818:	4856      	ldr	r0, [pc, #344]	; (8003974 <HAL_I2C_MspInit+0x1b4>)
 800381a:	f001 fa5b 	bl	8004cd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	4b53      	ldr	r3, [pc, #332]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	4a52      	ldr	r2, [pc, #328]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 8003828:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800382c:	6413      	str	r3, [r2, #64]	; 0x40
 800382e:	4b50      	ldr	r3, [pc, #320]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003836:	61fb      	str	r3, [r7, #28]
 8003838:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800383a:	e093      	b.n	8003964 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a4d      	ldr	r2, [pc, #308]	; (8003978 <HAL_I2C_MspInit+0x1b8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d13d      	bne.n	80038c2 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	4b49      	ldr	r3, [pc, #292]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	4a48      	ldr	r2, [pc, #288]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 8003850:	f043 0302 	orr.w	r3, r3, #2
 8003854:	6313      	str	r3, [r2, #48]	; 0x30
 8003856:	4b46      	ldr	r3, [pc, #280]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003868:	2312      	movs	r3, #18
 800386a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386c:	2300      	movs	r3, #0
 800386e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003870:	2303      	movs	r3, #3
 8003872:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003874:	2304      	movs	r3, #4
 8003876:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800387c:	4619      	mov	r1, r3
 800387e:	483d      	ldr	r0, [pc, #244]	; (8003974 <HAL_I2C_MspInit+0x1b4>)
 8003880:	f001 fa28 	bl	8004cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003884:	2308      	movs	r3, #8
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003888:	2312      	movs	r3, #18
 800388a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388c:	2300      	movs	r3, #0
 800388e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003890:	2303      	movs	r3, #3
 8003892:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003894:	2309      	movs	r3, #9
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800389c:	4619      	mov	r1, r3
 800389e:	4835      	ldr	r0, [pc, #212]	; (8003974 <HAL_I2C_MspInit+0x1b4>)
 80038a0:	f001 fa18 	bl	8004cd4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	4b31      	ldr	r3, [pc, #196]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	4a30      	ldr	r2, [pc, #192]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 80038ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038b2:	6413      	str	r3, [r2, #64]	; 0x40
 80038b4:	4b2e      	ldr	r3, [pc, #184]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	697b      	ldr	r3, [r7, #20]
}
 80038c0:	e050      	b.n	8003964 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a2d      	ldr	r2, [pc, #180]	; (800397c <HAL_I2C_MspInit+0x1bc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d14b      	bne.n	8003964 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038cc:	2300      	movs	r3, #0
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	4b27      	ldr	r3, [pc, #156]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	4a26      	ldr	r2, [pc, #152]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 80038d6:	f043 0304 	orr.w	r3, r3, #4
 80038da:	6313      	str	r3, [r2, #48]	; 0x30
 80038dc:	4b24      	ldr	r3, [pc, #144]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	4b20      	ldr	r3, [pc, #128]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	4a1f      	ldr	r2, [pc, #124]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	6313      	str	r3, [r2, #48]	; 0x30
 80038f8:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 80038fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800390a:	2312      	movs	r3, #18
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
 8003910:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003912:	2303      	movs	r3, #3
 8003914:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003916:	2304      	movs	r3, #4
 8003918:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800391a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800391e:	4619      	mov	r1, r3
 8003920:	4817      	ldr	r0, [pc, #92]	; (8003980 <HAL_I2C_MspInit+0x1c0>)
 8003922:	f001 f9d7 	bl	8004cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800392c:	2312      	movs	r3, #18
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003930:	2300      	movs	r3, #0
 8003932:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003934:	2303      	movs	r3, #3
 8003936:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003938:	2304      	movs	r3, #4
 800393a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800393c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003940:	4619      	mov	r1, r3
 8003942:	4810      	ldr	r0, [pc, #64]	; (8003984 <HAL_I2C_MspInit+0x1c4>)
 8003944:	f001 f9c6 	bl	8004cd4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003948:	2300      	movs	r3, #0
 800394a:	60bb      	str	r3, [r7, #8]
 800394c:	4b08      	ldr	r3, [pc, #32]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	4a07      	ldr	r2, [pc, #28]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 8003952:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003956:	6413      	str	r3, [r2, #64]	; 0x40
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <HAL_I2C_MspInit+0x1b0>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	68bb      	ldr	r3, [r7, #8]
}
 8003964:	bf00      	nop
 8003966:	3738      	adds	r7, #56	; 0x38
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40005400 	.word	0x40005400
 8003970:	40023800 	.word	0x40023800
 8003974:	40020400 	.word	0x40020400
 8003978:	40005800 	.word	0x40005800
 800397c:	40005c00 	.word	0x40005c00
 8003980:	40020800 	.word	0x40020800
 8003984:	40020000 	.word	0x40020000

08003988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003998:	d10e      	bne.n	80039b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <HAL_TIM_Base_MspInit+0x64>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	4a12      	ldr	r2, [pc, #72]	; (80039ec <HAL_TIM_Base_MspInit+0x64>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	6413      	str	r3, [r2, #64]	; 0x40
 80039aa:	4b10      	ldr	r3, [pc, #64]	; (80039ec <HAL_TIM_Base_MspInit+0x64>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80039b6:	e012      	b.n	80039de <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a0c      	ldr	r2, [pc, #48]	; (80039f0 <HAL_TIM_Base_MspInit+0x68>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d10d      	bne.n	80039de <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	4b09      	ldr	r3, [pc, #36]	; (80039ec <HAL_TIM_Base_MspInit+0x64>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	4a08      	ldr	r2, [pc, #32]	; (80039ec <HAL_TIM_Base_MspInit+0x64>)
 80039cc:	f043 0304 	orr.w	r3, r3, #4
 80039d0:	6413      	str	r3, [r2, #64]	; 0x40
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_TIM_Base_MspInit+0x64>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	68bb      	ldr	r3, [r7, #8]
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40000800 	.word	0x40000800

080039f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039f8:	e7fe      	b.n	80039f8 <NMI_Handler+0x4>

080039fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039fa:	b480      	push	{r7}
 80039fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039fe:	e7fe      	b.n	80039fe <HardFault_Handler+0x4>

08003a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a04:	e7fe      	b.n	8003a04 <MemManage_Handler+0x4>

08003a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a06:	b480      	push	{r7}
 8003a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a0a:	e7fe      	b.n	8003a0a <BusFault_Handler+0x4>

08003a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a10:	e7fe      	b.n	8003a10 <UsageFault_Handler+0x4>

08003a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a12:	b480      	push	{r7}
 8003a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a16:	bf00      	nop
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a40:	f000 f89a 	bl	8003b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a44:	bf00      	nop
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a4c:	4802      	ldr	r0, [pc, #8]	; (8003a58 <DMA2_Stream0_IRQHandler+0x10>)
 8003a4e:	f000 fed7 	bl	8004800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20007140 	.word	0x20007140

08003a5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <SystemInit+0x20>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	4a05      	ldr	r2, [pc, #20]	; (8003a7c <SystemInit+0x20>)
 8003a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ab8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a84:	480d      	ldr	r0, [pc, #52]	; (8003abc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a86:	490e      	ldr	r1, [pc, #56]	; (8003ac0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a88:	4a0e      	ldr	r2, [pc, #56]	; (8003ac4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a8c:	e002      	b.n	8003a94 <LoopCopyDataInit>

08003a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a92:	3304      	adds	r3, #4

08003a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a98:	d3f9      	bcc.n	8003a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a9a:	4a0b      	ldr	r2, [pc, #44]	; (8003ac8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a9c:	4c0b      	ldr	r4, [pc, #44]	; (8003acc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003aa0:	e001      	b.n	8003aa6 <LoopFillZerobss>

08003aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003aa4:	3204      	adds	r2, #4

08003aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003aa8:	d3fb      	bcc.n	8003aa2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003aaa:	f7ff ffd7 	bl	8003a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aae:	f003 f9bb 	bl	8006e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ab2:	f7fd fbb7 	bl	8001224 <main>
  bx  lr    
 8003ab6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ab8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ac0:	200070b8 	.word	0x200070b8
  ldr r2, =_sidata
 8003ac4:	080073d8 	.word	0x080073d8
  ldr r2, =_sbss
 8003ac8:	200070b8 	.word	0x200070b8
  ldr r4, =_ebss
 8003acc:	20007578 	.word	0x20007578

08003ad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ad0:	e7fe      	b.n	8003ad0 <ADC_IRQHandler>
	...

08003ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <HAL_Init+0x40>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a0d      	ldr	r2, [pc, #52]	; (8003b14 <HAL_Init+0x40>)
 8003ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ae2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_Init+0x40>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <HAL_Init+0x40>)
 8003aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003af0:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <HAL_Init+0x40>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a07      	ldr	r2, [pc, #28]	; (8003b14 <HAL_Init+0x40>)
 8003af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003afc:	2003      	movs	r0, #3
 8003afe:	f000 fd37 	bl	8004570 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b02:	200f      	movs	r0, #15
 8003b04:	f000 f808 	bl	8003b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b08:	f7ff fd82 	bl	8003610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40023c00 	.word	0x40023c00

08003b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b20:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <HAL_InitTick+0x54>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <HAL_InitTick+0x58>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fd4f 	bl	80045da <HAL_SYSTICK_Config>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e00e      	b.n	8003b64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b0f      	cmp	r3, #15
 8003b4a:	d80a      	bhi.n	8003b62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	f04f 30ff 	mov.w	r0, #4294967295
 8003b54:	f000 fd17 	bl	8004586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b58:	4a06      	ldr	r2, [pc, #24]	; (8003b74 <HAL_InitTick+0x5c>)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e000      	b.n	8003b64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	2000705c 	.word	0x2000705c
 8003b70:	20007064 	.word	0x20007064
 8003b74:	20007060 	.word	0x20007060

08003b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_IncTick+0x20>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <HAL_IncTick+0x24>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4413      	add	r3, r2
 8003b88:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <HAL_IncTick+0x24>)
 8003b8a:	6013      	str	r3, [r2, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20007064 	.word	0x20007064
 8003b9c:	2000743c 	.word	0x2000743c

08003ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ba4:	4b03      	ldr	r3, [pc, #12]	; (8003bb4 <HAL_GetTick+0x14>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	2000743c 	.word	0x2000743c

08003bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bc0:	f7ff ffee 	bl	8003ba0 <HAL_GetTick>
 8003bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d005      	beq.n	8003bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <HAL_Delay+0x44>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4413      	add	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bde:	bf00      	nop
 8003be0:	f7ff ffde 	bl	8003ba0 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d8f7      	bhi.n	8003be0 <HAL_Delay+0x28>
  {
  }
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20007064 	.word	0x20007064

08003c00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e033      	b.n	8003c7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d109      	bne.n	8003c32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff fd1e 	bl	8003660 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d118      	bne.n	8003c70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c46:	f023 0302 	bic.w	r3, r3, #2
 8003c4a:	f043 0202 	orr.w	r2, r3, #2
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fa3e 	bl	80040d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f023 0303 	bic.w	r3, r3, #3
 8003c66:	f043 0201 	orr.w	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40
 8003c6e:	e001      	b.n	8003c74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_ADC_Start_DMA+0x1e>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e0ce      	b.n	8003e44 <HAL_ADC_Start_DMA+0x1bc>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d018      	beq.n	8003cee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ccc:	4b5f      	ldr	r3, [pc, #380]	; (8003e4c <HAL_ADC_Start_DMA+0x1c4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a5f      	ldr	r2, [pc, #380]	; (8003e50 <HAL_ADC_Start_DMA+0x1c8>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	0c9a      	lsrs	r2, r3, #18
 8003cd8:	4613      	mov	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003ce0:	e002      	b.n	8003ce8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f9      	bne.n	8003ce2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cfc:	d107      	bne.n	8003d0e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	f040 8086 	bne.w	8003e2a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5c:	d106      	bne.n	8003d6c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f023 0206 	bic.w	r2, r3, #6
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	645a      	str	r2, [r3, #68]	; 0x44
 8003d6a:	e002      	b.n	8003d72 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d7a:	4b36      	ldr	r3, [pc, #216]	; (8003e54 <HAL_ADC_Start_DMA+0x1cc>)
 8003d7c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	4a35      	ldr	r2, [pc, #212]	; (8003e58 <HAL_ADC_Start_DMA+0x1d0>)
 8003d84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	4a34      	ldr	r2, [pc, #208]	; (8003e5c <HAL_ADC_Start_DMA+0x1d4>)
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	4a33      	ldr	r2, [pc, #204]	; (8003e60 <HAL_ADC_Start_DMA+0x1d8>)
 8003d94:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003d9e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003dae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dbe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	334c      	adds	r3, #76	; 0x4c
 8003dca:	4619      	mov	r1, r3
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f000 fcbe 	bl	8004750 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f003 031f 	and.w	r3, r3, #31
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10f      	bne.n	8003e00 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d129      	bne.n	8003e42 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003dfc:	609a      	str	r2, [r3, #8]
 8003dfe:	e020      	b.n	8003e42 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a17      	ldr	r2, [pc, #92]	; (8003e64 <HAL_ADC_Start_DMA+0x1dc>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d11b      	bne.n	8003e42 <HAL_ADC_Start_DMA+0x1ba>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d114      	bne.n	8003e42 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	e00b      	b.n	8003e42 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f043 0210 	orr.w	r2, r3, #16
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	f043 0201 	orr.w	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	2000705c 	.word	0x2000705c
 8003e50:	431bde83 	.word	0x431bde83
 8003e54:	40012300 	.word	0x40012300
 8003e58:	080042cd 	.word	0x080042cd
 8003e5c:	08004387 	.word	0x08004387
 8003e60:	080043a3 	.word	0x080043a3
 8003e64:	40012000 	.word	0x40012000

08003e68 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x1c>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e105      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x228>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b09      	cmp	r3, #9
 8003eba:	d925      	bls.n	8003f08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68d9      	ldr	r1, [r3, #12]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4613      	mov	r3, r2
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4413      	add	r3, r2
 8003ed0:	3b1e      	subs	r3, #30
 8003ed2:	2207      	movs	r2, #7
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	43da      	mvns	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	400a      	ands	r2, r1
 8003ee0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68d9      	ldr	r1, [r3, #12]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	4403      	add	r3, r0
 8003efa:	3b1e      	subs	r3, #30
 8003efc:	409a      	lsls	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	60da      	str	r2, [r3, #12]
 8003f06:	e022      	b.n	8003f4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6919      	ldr	r1, [r3, #16]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	4613      	mov	r3, r2
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	4413      	add	r3, r2
 8003f1c:	2207      	movs	r2, #7
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	43da      	mvns	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	400a      	ands	r2, r1
 8003f2a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6919      	ldr	r1, [r3, #16]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	4603      	mov	r3, r0
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	4403      	add	r3, r0
 8003f44:	409a      	lsls	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b06      	cmp	r3, #6
 8003f54:	d824      	bhi.n	8003fa0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	3b05      	subs	r3, #5
 8003f68:	221f      	movs	r2, #31
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43da      	mvns	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	400a      	ands	r2, r1
 8003f76:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	4618      	mov	r0, r3
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	3b05      	subs	r3, #5
 8003f92:	fa00 f203 	lsl.w	r2, r0, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f9e:	e04c      	b.n	800403a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b0c      	cmp	r3, #12
 8003fa6:	d824      	bhi.n	8003ff2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3b23      	subs	r3, #35	; 0x23
 8003fba:	221f      	movs	r2, #31
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43da      	mvns	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	400a      	ands	r2, r1
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3b23      	subs	r3, #35	; 0x23
 8003fe4:	fa00 f203 	lsl.w	r2, r0, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
 8003ff0:	e023      	b.n	800403a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	3b41      	subs	r3, #65	; 0x41
 8004004:	221f      	movs	r2, #31
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43da      	mvns	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	400a      	ands	r2, r1
 8004012:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	b29b      	uxth	r3, r3
 8004020:	4618      	mov	r0, r3
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	3b41      	subs	r3, #65	; 0x41
 800402e:	fa00 f203 	lsl.w	r2, r0, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800403a:	4b22      	ldr	r3, [pc, #136]	; (80040c4 <HAL_ADC_ConfigChannel+0x234>)
 800403c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a21      	ldr	r2, [pc, #132]	; (80040c8 <HAL_ADC_ConfigChannel+0x238>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d109      	bne.n	800405c <HAL_ADC_ConfigChannel+0x1cc>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b12      	cmp	r3, #18
 800404e:	d105      	bne.n	800405c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a19      	ldr	r2, [pc, #100]	; (80040c8 <HAL_ADC_ConfigChannel+0x238>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d123      	bne.n	80040ae <HAL_ADC_ConfigChannel+0x21e>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b10      	cmp	r3, #16
 800406c:	d003      	beq.n	8004076 <HAL_ADC_ConfigChannel+0x1e6>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b11      	cmp	r3, #17
 8004074:	d11b      	bne.n	80040ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b10      	cmp	r3, #16
 8004088:	d111      	bne.n	80040ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800408a:	4b10      	ldr	r3, [pc, #64]	; (80040cc <HAL_ADC_ConfigChannel+0x23c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a10      	ldr	r2, [pc, #64]	; (80040d0 <HAL_ADC_ConfigChannel+0x240>)
 8004090:	fba2 2303 	umull	r2, r3, r2, r3
 8004094:	0c9a      	lsrs	r2, r3, #18
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80040a0:	e002      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f9      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	40012300 	.word	0x40012300
 80040c8:	40012000 	.word	0x40012000
 80040cc:	2000705c 	.word	0x2000705c
 80040d0:	431bde83 	.word	0x431bde83

080040d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040dc:	4b79      	ldr	r3, [pc, #484]	; (80042c4 <ADC_Init+0x1f0>)
 80040de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	431a      	orrs	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004108:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6859      	ldr	r1, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	021a      	lsls	r2, r3, #8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800412c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800414e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6899      	ldr	r1, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	4a58      	ldr	r2, [pc, #352]	; (80042c8 <ADC_Init+0x1f4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d022      	beq.n	80041b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800417a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6899      	ldr	r1, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800419c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6899      	ldr	r1, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	609a      	str	r2, [r3, #8]
 80041b0:	e00f      	b.n	80041d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0202 	bic.w	r2, r2, #2
 80041e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6899      	ldr	r1, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	7e1b      	ldrb	r3, [r3, #24]
 80041ec:	005a      	lsls	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01b      	beq.n	8004238 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800420e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800421e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6859      	ldr	r1, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	3b01      	subs	r3, #1
 800422c:	035a      	lsls	r2, r3, #13
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	e007      	b.n	8004248 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004246:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004256:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	3b01      	subs	r3, #1
 8004264:	051a      	lsls	r2, r3, #20
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800427c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6899      	ldr	r1, [r3, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800428a:	025a      	lsls	r2, r3, #9
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6899      	ldr	r1, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	029a      	lsls	r2, r3, #10
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	609a      	str	r2, [r3, #8]
}
 80042b8:	bf00      	nop
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	40012300 	.word	0x40012300
 80042c8:	0f000001 	.word	0x0f000001

080042cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d13c      	bne.n	8004360 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d12b      	bne.n	8004358 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004304:	2b00      	cmp	r3, #0
 8004306:	d127      	bne.n	8004358 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004312:	2b00      	cmp	r3, #0
 8004314:	d006      	beq.n	8004324 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004320:	2b00      	cmp	r3, #0
 8004322:	d119      	bne.n	8004358 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0220 	bic.w	r2, r2, #32
 8004332:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d105      	bne.n	8004358 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	f043 0201 	orr.w	r2, r3, #1
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7fe ffa9 	bl	80032b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800435e:	e00e      	b.n	800437e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f7ff fd85 	bl	8003e7c <HAL_ADC_ErrorCallback>
}
 8004372:	e004      	b.n	800437e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	4798      	blx	r3
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004392:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7ff fd67 	bl	8003e68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2240      	movs	r2, #64	; 0x40
 80043b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	f043 0204 	orr.w	r2, r3, #4
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f7ff fd5a 	bl	8003e7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043c8:	bf00      	nop
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043e0:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <__NVIC_SetPriorityGrouping+0x44>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043ec:	4013      	ands	r3, r2
 80043ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004402:	4a04      	ldr	r2, [pc, #16]	; (8004414 <__NVIC_SetPriorityGrouping+0x44>)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	60d3      	str	r3, [r2, #12]
}
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	e000ed00 	.word	0xe000ed00

08004418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800441c:	4b04      	ldr	r3, [pc, #16]	; (8004430 <__NVIC_GetPriorityGrouping+0x18>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	0a1b      	lsrs	r3, r3, #8
 8004422:	f003 0307 	and.w	r3, r3, #7
}
 8004426:	4618      	mov	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800443e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004442:	2b00      	cmp	r3, #0
 8004444:	db0b      	blt.n	800445e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	f003 021f 	and.w	r2, r3, #31
 800444c:	4907      	ldr	r1, [pc, #28]	; (800446c <__NVIC_EnableIRQ+0x38>)
 800444e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	2001      	movs	r0, #1
 8004456:	fa00 f202 	lsl.w	r2, r0, r2
 800445a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	e000e100 	.word	0xe000e100

08004470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	6039      	str	r1, [r7, #0]
 800447a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800447c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004480:	2b00      	cmp	r3, #0
 8004482:	db0a      	blt.n	800449a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	b2da      	uxtb	r2, r3
 8004488:	490c      	ldr	r1, [pc, #48]	; (80044bc <__NVIC_SetPriority+0x4c>)
 800448a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448e:	0112      	lsls	r2, r2, #4
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	440b      	add	r3, r1
 8004494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004498:	e00a      	b.n	80044b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	4908      	ldr	r1, [pc, #32]	; (80044c0 <__NVIC_SetPriority+0x50>)
 80044a0:	79fb      	ldrb	r3, [r7, #7]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	3b04      	subs	r3, #4
 80044a8:	0112      	lsls	r2, r2, #4
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	440b      	add	r3, r1
 80044ae:	761a      	strb	r2, [r3, #24]
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	e000e100 	.word	0xe000e100
 80044c0:	e000ed00 	.word	0xe000ed00

080044c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b089      	sub	sp, #36	; 0x24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f1c3 0307 	rsb	r3, r3, #7
 80044de:	2b04      	cmp	r3, #4
 80044e0:	bf28      	it	cs
 80044e2:	2304      	movcs	r3, #4
 80044e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	3304      	adds	r3, #4
 80044ea:	2b06      	cmp	r3, #6
 80044ec:	d902      	bls.n	80044f4 <NVIC_EncodePriority+0x30>
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	3b03      	subs	r3, #3
 80044f2:	e000      	b.n	80044f6 <NVIC_EncodePriority+0x32>
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f8:	f04f 32ff 	mov.w	r2, #4294967295
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43da      	mvns	r2, r3
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	401a      	ands	r2, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800450c:	f04f 31ff 	mov.w	r1, #4294967295
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	fa01 f303 	lsl.w	r3, r1, r3
 8004516:	43d9      	mvns	r1, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800451c:	4313      	orrs	r3, r2
         );
}
 800451e:	4618      	mov	r0, r3
 8004520:	3724      	adds	r7, #36	; 0x24
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
	...

0800452c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3b01      	subs	r3, #1
 8004538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800453c:	d301      	bcc.n	8004542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800453e:	2301      	movs	r3, #1
 8004540:	e00f      	b.n	8004562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004542:	4a0a      	ldr	r2, [pc, #40]	; (800456c <SysTick_Config+0x40>)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3b01      	subs	r3, #1
 8004548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800454a:	210f      	movs	r1, #15
 800454c:	f04f 30ff 	mov.w	r0, #4294967295
 8004550:	f7ff ff8e 	bl	8004470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004554:	4b05      	ldr	r3, [pc, #20]	; (800456c <SysTick_Config+0x40>)
 8004556:	2200      	movs	r2, #0
 8004558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800455a:	4b04      	ldr	r3, [pc, #16]	; (800456c <SysTick_Config+0x40>)
 800455c:	2207      	movs	r2, #7
 800455e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	e000e010 	.word	0xe000e010

08004570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff ff29 	bl	80043d0 <__NVIC_SetPriorityGrouping>
}
 800457e:	bf00      	nop
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004586:	b580      	push	{r7, lr}
 8004588:	b086      	sub	sp, #24
 800458a:	af00      	add	r7, sp, #0
 800458c:	4603      	mov	r3, r0
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	607a      	str	r2, [r7, #4]
 8004592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004598:	f7ff ff3e 	bl	8004418 <__NVIC_GetPriorityGrouping>
 800459c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	6978      	ldr	r0, [r7, #20]
 80045a4:	f7ff ff8e 	bl	80044c4 <NVIC_EncodePriority>
 80045a8:	4602      	mov	r2, r0
 80045aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ae:	4611      	mov	r1, r2
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff ff5d 	bl	8004470 <__NVIC_SetPriority>
}
 80045b6:	bf00      	nop
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b082      	sub	sp, #8
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	4603      	mov	r3, r0
 80045c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff ff31 	bl	8004434 <__NVIC_EnableIRQ>
}
 80045d2:	bf00      	nop
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff ffa2 	bl	800452c <SysTick_Config>
 80045e8:	4603      	mov	r3, r0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004600:	f7ff face 	bl	8003ba0 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e099      	b.n	8004744 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0201 	bic.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004630:	e00f      	b.n	8004652 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004632:	f7ff fab5 	bl	8003ba0 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b05      	cmp	r3, #5
 800463e:	d908      	bls.n	8004652 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2203      	movs	r2, #3
 800464a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e078      	b.n	8004744 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e8      	bne.n	8004632 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4b38      	ldr	r3, [pc, #224]	; (800474c <HAL_DMA_Init+0x158>)
 800466c:	4013      	ands	r3, r2
 800466e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800467e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800468a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004696:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d107      	bne.n	80046bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	4313      	orrs	r3, r2
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f023 0307 	bic.w	r3, r3, #7
 80046d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d117      	bne.n	8004716 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00e      	beq.n	8004716 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 fa6f 	bl	8004bdc <DMA_CheckFifoParam>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2240      	movs	r2, #64	; 0x40
 8004708:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004712:	2301      	movs	r3, #1
 8004714:	e016      	b.n	8004744 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fa26 	bl	8004b70 <DMA_CalcBaseAndBitshift>
 8004724:	4603      	mov	r3, r0
 8004726:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472c:	223f      	movs	r2, #63	; 0x3f
 800472e:	409a      	lsls	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	f010803f 	.word	0xf010803f

08004750 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004766:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <HAL_DMA_Start_IT+0x26>
 8004772:	2302      	movs	r3, #2
 8004774:	e040      	b.n	80047f8 <HAL_DMA_Start_IT+0xa8>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b01      	cmp	r3, #1
 8004788:	d12f      	bne.n	80047ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2202      	movs	r2, #2
 800478e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 f9b8 	bl	8004b14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a8:	223f      	movs	r2, #63	; 0x3f
 80047aa:	409a      	lsls	r2, r3
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0216 	orr.w	r2, r2, #22
 80047be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0208 	orr.w	r2, r2, #8
 80047d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0201 	orr.w	r2, r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	e005      	b.n	80047f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80047f2:	2302      	movs	r3, #2
 80047f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80047f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800480c:	4b8e      	ldr	r3, [pc, #568]	; (8004a48 <HAL_DMA_IRQHandler+0x248>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a8e      	ldr	r2, [pc, #568]	; (8004a4c <HAL_DMA_IRQHandler+0x24c>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	0a9b      	lsrs	r3, r3, #10
 8004818:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482a:	2208      	movs	r2, #8
 800482c:	409a      	lsls	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4013      	ands	r3, r2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01a      	beq.n	800486c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d013      	beq.n	800486c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0204 	bic.w	r2, r2, #4
 8004852:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004858:	2208      	movs	r2, #8
 800485a:	409a      	lsls	r2, r3
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004864:	f043 0201 	orr.w	r2, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004870:	2201      	movs	r2, #1
 8004872:	409a      	lsls	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4013      	ands	r3, r2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d012      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00b      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488e:	2201      	movs	r2, #1
 8004890:	409a      	lsls	r2, r3
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489a:	f043 0202 	orr.w	r2, r3, #2
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a6:	2204      	movs	r2, #4
 80048a8:	409a      	lsls	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4013      	ands	r3, r2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d012      	beq.n	80048d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00b      	beq.n	80048d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c4:	2204      	movs	r2, #4
 80048c6:	409a      	lsls	r2, r3
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d0:	f043 0204 	orr.w	r2, r3, #4
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048dc:	2210      	movs	r2, #16
 80048de:	409a      	lsls	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4013      	ands	r3, r2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d043      	beq.n	8004970 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d03c      	beq.n	8004970 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fa:	2210      	movs	r2, #16
 80048fc:	409a      	lsls	r2, r3
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d018      	beq.n	8004942 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d108      	bne.n	8004930 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	d024      	beq.n	8004970 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	4798      	blx	r3
 800492e:	e01f      	b.n	8004970 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01b      	beq.n	8004970 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	4798      	blx	r3
 8004940:	e016      	b.n	8004970 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d107      	bne.n	8004960 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0208 	bic.w	r2, r2, #8
 800495e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004974:	2220      	movs	r2, #32
 8004976:	409a      	lsls	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4013      	ands	r3, r2
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 808f 	beq.w	8004aa0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0310 	and.w	r3, r3, #16
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8087 	beq.w	8004aa0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004996:	2220      	movs	r2, #32
 8004998:	409a      	lsls	r2, r3
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b05      	cmp	r3, #5
 80049a8:	d136      	bne.n	8004a18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0216 	bic.w	r2, r2, #22
 80049b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695a      	ldr	r2, [r3, #20]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <HAL_DMA_IRQHandler+0x1da>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d007      	beq.n	80049ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0208 	bic.w	r2, r2, #8
 80049e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ee:	223f      	movs	r2, #63	; 0x3f
 80049f0:	409a      	lsls	r2, r3
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d07e      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	4798      	blx	r3
        }
        return;
 8004a16:	e079      	b.n	8004b0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d01d      	beq.n	8004a62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10d      	bne.n	8004a50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d031      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	4798      	blx	r3
 8004a44:	e02c      	b.n	8004aa0 <HAL_DMA_IRQHandler+0x2a0>
 8004a46:	bf00      	nop
 8004a48:	2000705c 	.word	0x2000705c
 8004a4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d023      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	4798      	blx	r3
 8004a60:	e01e      	b.n	8004aa0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10f      	bne.n	8004a90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0210 	bic.w	r2, r2, #16
 8004a7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d032      	beq.n	8004b0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d022      	beq.n	8004afa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2205      	movs	r2, #5
 8004ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0201 	bic.w	r2, r2, #1
 8004aca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d307      	bcc.n	8004ae8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f2      	bne.n	8004acc <HAL_DMA_IRQHandler+0x2cc>
 8004ae6:	e000      	b.n	8004aea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ae8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d005      	beq.n	8004b0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	4798      	blx	r3
 8004b0a:	e000      	b.n	8004b0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b0c:	bf00      	nop
    }
  }
}
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
 8004b20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	2b40      	cmp	r3, #64	; 0x40
 8004b40:	d108      	bne.n	8004b54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b52:	e007      	b.n	8004b64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	60da      	str	r2, [r3, #12]
}
 8004b64:	bf00      	nop
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	3b10      	subs	r3, #16
 8004b80:	4a14      	ldr	r2, [pc, #80]	; (8004bd4 <DMA_CalcBaseAndBitshift+0x64>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	091b      	lsrs	r3, r3, #4
 8004b88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b8a:	4a13      	ldr	r2, [pc, #76]	; (8004bd8 <DMA_CalcBaseAndBitshift+0x68>)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d909      	bls.n	8004bb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ba6:	f023 0303 	bic.w	r3, r3, #3
 8004baa:	1d1a      	adds	r2, r3, #4
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	659a      	str	r2, [r3, #88]	; 0x58
 8004bb0:	e007      	b.n	8004bc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bba:	f023 0303 	bic.w	r3, r3, #3
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	aaaaaaab 	.word	0xaaaaaaab
 8004bd8:	080073bc 	.word	0x080073bc

08004bdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d11f      	bne.n	8004c36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d856      	bhi.n	8004caa <DMA_CheckFifoParam+0xce>
 8004bfc:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <DMA_CheckFifoParam+0x28>)
 8004bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c02:	bf00      	nop
 8004c04:	08004c15 	.word	0x08004c15
 8004c08:	08004c27 	.word	0x08004c27
 8004c0c:	08004c15 	.word	0x08004c15
 8004c10:	08004cab 	.word	0x08004cab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d046      	beq.n	8004cae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c24:	e043      	b.n	8004cae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c2e:	d140      	bne.n	8004cb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c34:	e03d      	b.n	8004cb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c3e:	d121      	bne.n	8004c84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d837      	bhi.n	8004cb6 <DMA_CheckFifoParam+0xda>
 8004c46:	a201      	add	r2, pc, #4	; (adr r2, 8004c4c <DMA_CheckFifoParam+0x70>)
 8004c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4c:	08004c5d 	.word	0x08004c5d
 8004c50:	08004c63 	.word	0x08004c63
 8004c54:	08004c5d 	.word	0x08004c5d
 8004c58:	08004c75 	.word	0x08004c75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c60:	e030      	b.n	8004cc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d025      	beq.n	8004cba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c72:	e022      	b.n	8004cba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c7c:	d11f      	bne.n	8004cbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c82:	e01c      	b.n	8004cbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d903      	bls.n	8004c92 <DMA_CheckFifoParam+0xb6>
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d003      	beq.n	8004c98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c90:	e018      	b.n	8004cc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	73fb      	strb	r3, [r7, #15]
      break;
 8004c96:	e015      	b.n	8004cc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00e      	beq.n	8004cc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca8:	e00b      	b.n	8004cc2 <DMA_CheckFifoParam+0xe6>
      break;
 8004caa:	bf00      	nop
 8004cac:	e00a      	b.n	8004cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004cae:	bf00      	nop
 8004cb0:	e008      	b.n	8004cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004cb2:	bf00      	nop
 8004cb4:	e006      	b.n	8004cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004cb6:	bf00      	nop
 8004cb8:	e004      	b.n	8004cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004cba:	bf00      	nop
 8004cbc:	e002      	b.n	8004cc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004cbe:	bf00      	nop
 8004cc0:	e000      	b.n	8004cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004cc2:	bf00      	nop
    }
  } 
  
  return status; 
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop

08004cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b089      	sub	sp, #36	; 0x24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cea:	2300      	movs	r3, #0
 8004cec:	61fb      	str	r3, [r7, #28]
 8004cee:	e159      	b.n	8004fa4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4013      	ands	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	f040 8148 	bne.w	8004f9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d005      	beq.n	8004d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d130      	bne.n	8004d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	2203      	movs	r2, #3
 8004d32:	fa02 f303 	lsl.w	r3, r2, r3
 8004d36:	43db      	mvns	r3, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	43db      	mvns	r3, r3
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	091b      	lsrs	r3, r3, #4
 8004d72:	f003 0201 	and.w	r2, r3, #1
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f003 0303 	and.w	r3, r3, #3
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d017      	beq.n	8004dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	2203      	movs	r2, #3
 8004da0:	fa02 f303 	lsl.w	r3, r2, r3
 8004da4:	43db      	mvns	r3, r3
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	4013      	ands	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d123      	bne.n	8004e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	08da      	lsrs	r2, r3, #3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3208      	adds	r2, #8
 8004dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	220f      	movs	r2, #15
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	43db      	mvns	r3, r3
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	4013      	ands	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	08da      	lsrs	r2, r3, #3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3208      	adds	r2, #8
 8004e12:	69b9      	ldr	r1, [r7, #24]
 8004e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	2203      	movs	r2, #3
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f003 0203 	and.w	r2, r3, #3
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 80a2 	beq.w	8004f9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	4b57      	ldr	r3, [pc, #348]	; (8004fbc <HAL_GPIO_Init+0x2e8>)
 8004e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e62:	4a56      	ldr	r2, [pc, #344]	; (8004fbc <HAL_GPIO_Init+0x2e8>)
 8004e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e68:	6453      	str	r3, [r2, #68]	; 0x44
 8004e6a:	4b54      	ldr	r3, [pc, #336]	; (8004fbc <HAL_GPIO_Init+0x2e8>)
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e76:	4a52      	ldr	r2, [pc, #328]	; (8004fc0 <HAL_GPIO_Init+0x2ec>)
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	089b      	lsrs	r3, r3, #2
 8004e7c:	3302      	adds	r3, #2
 8004e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	220f      	movs	r2, #15
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	4013      	ands	r3, r2
 8004e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a49      	ldr	r2, [pc, #292]	; (8004fc4 <HAL_GPIO_Init+0x2f0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d019      	beq.n	8004ed6 <HAL_GPIO_Init+0x202>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a48      	ldr	r2, [pc, #288]	; (8004fc8 <HAL_GPIO_Init+0x2f4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <HAL_GPIO_Init+0x1fe>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a47      	ldr	r2, [pc, #284]	; (8004fcc <HAL_GPIO_Init+0x2f8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00d      	beq.n	8004ece <HAL_GPIO_Init+0x1fa>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a46      	ldr	r2, [pc, #280]	; (8004fd0 <HAL_GPIO_Init+0x2fc>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <HAL_GPIO_Init+0x1f6>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a45      	ldr	r2, [pc, #276]	; (8004fd4 <HAL_GPIO_Init+0x300>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d101      	bne.n	8004ec6 <HAL_GPIO_Init+0x1f2>
 8004ec2:	2304      	movs	r3, #4
 8004ec4:	e008      	b.n	8004ed8 <HAL_GPIO_Init+0x204>
 8004ec6:	2307      	movs	r3, #7
 8004ec8:	e006      	b.n	8004ed8 <HAL_GPIO_Init+0x204>
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e004      	b.n	8004ed8 <HAL_GPIO_Init+0x204>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e002      	b.n	8004ed8 <HAL_GPIO_Init+0x204>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <HAL_GPIO_Init+0x204>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	f002 0203 	and.w	r2, r2, #3
 8004ede:	0092      	lsls	r2, r2, #2
 8004ee0:	4093      	lsls	r3, r2
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ee8:	4935      	ldr	r1, [pc, #212]	; (8004fc0 <HAL_GPIO_Init+0x2ec>)
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	089b      	lsrs	r3, r3, #2
 8004eee:	3302      	adds	r3, #2
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ef6:	4b38      	ldr	r3, [pc, #224]	; (8004fd8 <HAL_GPIO_Init+0x304>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	43db      	mvns	r3, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4013      	ands	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f1a:	4a2f      	ldr	r2, [pc, #188]	; (8004fd8 <HAL_GPIO_Init+0x304>)
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f20:	4b2d      	ldr	r3, [pc, #180]	; (8004fd8 <HAL_GPIO_Init+0x304>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f44:	4a24      	ldr	r2, [pc, #144]	; (8004fd8 <HAL_GPIO_Init+0x304>)
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f4a:	4b23      	ldr	r3, [pc, #140]	; (8004fd8 <HAL_GPIO_Init+0x304>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	43db      	mvns	r3, r3
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	4013      	ands	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f6e:	4a1a      	ldr	r2, [pc, #104]	; (8004fd8 <HAL_GPIO_Init+0x304>)
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f74:	4b18      	ldr	r3, [pc, #96]	; (8004fd8 <HAL_GPIO_Init+0x304>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	4013      	ands	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f98:	4a0f      	ldr	r2, [pc, #60]	; (8004fd8 <HAL_GPIO_Init+0x304>)
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	2b0f      	cmp	r3, #15
 8004fa8:	f67f aea2 	bls.w	8004cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fac:	bf00      	nop
 8004fae:	bf00      	nop
 8004fb0:	3724      	adds	r7, #36	; 0x24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	40013800 	.word	0x40013800
 8004fc4:	40020000 	.word	0x40020000
 8004fc8:	40020400 	.word	0x40020400
 8004fcc:	40020800 	.word	0x40020800
 8004fd0:	40020c00 	.word	0x40020c00
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	40013c00 	.word	0x40013c00

08004fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	807b      	strh	r3, [r7, #2]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fec:	787b      	ldrb	r3, [r7, #1]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ff2:	887a      	ldrh	r2, [r7, #2]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ff8:	e003      	b.n	8005002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ffa:	887b      	ldrh	r3, [r7, #2]
 8004ffc:	041a      	lsls	r2, r3, #16
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	619a      	str	r2, [r3, #24]
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
	...

08005010 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e12b      	b.n	800527a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fe fbc2 	bl	80037c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2224      	movs	r2, #36	; 0x24
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0201 	bic.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005062:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005072:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005074:	f001 fbbc 	bl	80067f0 <HAL_RCC_GetPCLK1Freq>
 8005078:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	4a81      	ldr	r2, [pc, #516]	; (8005284 <HAL_I2C_Init+0x274>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d807      	bhi.n	8005094 <HAL_I2C_Init+0x84>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4a80      	ldr	r2, [pc, #512]	; (8005288 <HAL_I2C_Init+0x278>)
 8005088:	4293      	cmp	r3, r2
 800508a:	bf94      	ite	ls
 800508c:	2301      	movls	r3, #1
 800508e:	2300      	movhi	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	e006      	b.n	80050a2 <HAL_I2C_Init+0x92>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4a7d      	ldr	r2, [pc, #500]	; (800528c <HAL_I2C_Init+0x27c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	bf94      	ite	ls
 800509c:	2301      	movls	r3, #1
 800509e:	2300      	movhi	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e0e7      	b.n	800527a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4a78      	ldr	r2, [pc, #480]	; (8005290 <HAL_I2C_Init+0x280>)
 80050ae:	fba2 2303 	umull	r2, r3, r2, r3
 80050b2:	0c9b      	lsrs	r3, r3, #18
 80050b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	4a6a      	ldr	r2, [pc, #424]	; (8005284 <HAL_I2C_Init+0x274>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d802      	bhi.n	80050e4 <HAL_I2C_Init+0xd4>
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	3301      	adds	r3, #1
 80050e2:	e009      	b.n	80050f8 <HAL_I2C_Init+0xe8>
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050ea:	fb02 f303 	mul.w	r3, r2, r3
 80050ee:	4a69      	ldr	r2, [pc, #420]	; (8005294 <HAL_I2C_Init+0x284>)
 80050f0:	fba2 2303 	umull	r2, r3, r2, r3
 80050f4:	099b      	lsrs	r3, r3, #6
 80050f6:	3301      	adds	r3, #1
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6812      	ldr	r2, [r2, #0]
 80050fc:	430b      	orrs	r3, r1
 80050fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800510a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	495c      	ldr	r1, [pc, #368]	; (8005284 <HAL_I2C_Init+0x274>)
 8005114:	428b      	cmp	r3, r1
 8005116:	d819      	bhi.n	800514c <HAL_I2C_Init+0x13c>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	1e59      	subs	r1, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	fbb1 f3f3 	udiv	r3, r1, r3
 8005126:	1c59      	adds	r1, r3, #1
 8005128:	f640 73fc 	movw	r3, #4092	; 0xffc
 800512c:	400b      	ands	r3, r1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_I2C_Init+0x138>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1e59      	subs	r1, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005140:	3301      	adds	r3, #1
 8005142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005146:	e051      	b.n	80051ec <HAL_I2C_Init+0x1dc>
 8005148:	2304      	movs	r3, #4
 800514a:	e04f      	b.n	80051ec <HAL_I2C_Init+0x1dc>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d111      	bne.n	8005178 <HAL_I2C_Init+0x168>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	1e58      	subs	r0, r3, #1
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6859      	ldr	r1, [r3, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	440b      	add	r3, r1
 8005162:	fbb0 f3f3 	udiv	r3, r0, r3
 8005166:	3301      	adds	r3, #1
 8005168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800516c:	2b00      	cmp	r3, #0
 800516e:	bf0c      	ite	eq
 8005170:	2301      	moveq	r3, #1
 8005172:	2300      	movne	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	e012      	b.n	800519e <HAL_I2C_Init+0x18e>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	1e58      	subs	r0, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6859      	ldr	r1, [r3, #4]
 8005180:	460b      	mov	r3, r1
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	440b      	add	r3, r1
 8005186:	0099      	lsls	r1, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	fbb0 f3f3 	udiv	r3, r0, r3
 800518e:	3301      	adds	r3, #1
 8005190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005194:	2b00      	cmp	r3, #0
 8005196:	bf0c      	ite	eq
 8005198:	2301      	moveq	r3, #1
 800519a:	2300      	movne	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_I2C_Init+0x196>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e022      	b.n	80051ec <HAL_I2C_Init+0x1dc>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10e      	bne.n	80051cc <HAL_I2C_Init+0x1bc>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	1e58      	subs	r0, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6859      	ldr	r1, [r3, #4]
 80051b6:	460b      	mov	r3, r1
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	440b      	add	r3, r1
 80051bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80051c0:	3301      	adds	r3, #1
 80051c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ca:	e00f      	b.n	80051ec <HAL_I2C_Init+0x1dc>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	1e58      	subs	r0, r3, #1
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6859      	ldr	r1, [r3, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	0099      	lsls	r1, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	fbb0 f3f3 	udiv	r3, r0, r3
 80051e2:	3301      	adds	r3, #1
 80051e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	6809      	ldr	r1, [r1, #0]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69da      	ldr	r2, [r3, #28]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800521a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6911      	ldr	r1, [r2, #16]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68d2      	ldr	r2, [r2, #12]
 8005226:	4311      	orrs	r1, r2
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	430b      	orrs	r3, r1
 800522e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695a      	ldr	r2, [r3, #20]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	000186a0 	.word	0x000186a0
 8005288:	001e847f 	.word	0x001e847f
 800528c:	003d08ff 	.word	0x003d08ff
 8005290:	431bde83 	.word	0x431bde83
 8005294:	10624dd3 	.word	0x10624dd3

08005298 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af02      	add	r7, sp, #8
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	4608      	mov	r0, r1
 80052a2:	4611      	mov	r1, r2
 80052a4:	461a      	mov	r2, r3
 80052a6:	4603      	mov	r3, r0
 80052a8:	817b      	strh	r3, [r7, #10]
 80052aa:	460b      	mov	r3, r1
 80052ac:	813b      	strh	r3, [r7, #8]
 80052ae:	4613      	mov	r3, r2
 80052b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052b2:	f7fe fc75 	bl	8003ba0 <HAL_GetTick>
 80052b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	f040 80d9 	bne.w	8005478 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	2319      	movs	r3, #25
 80052cc:	2201      	movs	r2, #1
 80052ce:	496d      	ldr	r1, [pc, #436]	; (8005484 <HAL_I2C_Mem_Write+0x1ec>)
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 fc7f 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80052dc:	2302      	movs	r3, #2
 80052de:	e0cc      	b.n	800547a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_I2C_Mem_Write+0x56>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e0c5      	b.n	800547a <HAL_I2C_Mem_Write+0x1e2>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b01      	cmp	r3, #1
 8005302:	d007      	beq.n	8005314 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005322:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2221      	movs	r2, #33	; 0x21
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2240      	movs	r2, #64	; 0x40
 8005330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a3a      	ldr	r2, [r7, #32]
 800533e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005344:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4a4d      	ldr	r2, [pc, #308]	; (8005488 <HAL_I2C_Mem_Write+0x1f0>)
 8005354:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005356:	88f8      	ldrh	r0, [r7, #6]
 8005358:	893a      	ldrh	r2, [r7, #8]
 800535a:	8979      	ldrh	r1, [r7, #10]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	9301      	str	r3, [sp, #4]
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	4603      	mov	r3, r0
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fab6 	bl	80058d8 <I2C_RequestMemoryWrite>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d052      	beq.n	8005418 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e081      	b.n	800547a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 fd00 	bl	8005d80 <I2C_WaitOnTXEFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00d      	beq.n	80053a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	2b04      	cmp	r3, #4
 800538c:	d107      	bne.n	800539e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800539c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e06b      	b.n	800547a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	781a      	ldrb	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d11b      	bne.n	8005418 <HAL_I2C_Mem_Write+0x180>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d017      	beq.n	8005418 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	781a      	ldrb	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005402:	3b01      	subs	r3, #1
 8005404:	b29a      	uxth	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540e:	b29b      	uxth	r3, r3
 8005410:	3b01      	subs	r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1aa      	bne.n	8005376 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 fcec 	bl	8005e02 <I2C_WaitOnBTFFlagUntilTimeout>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00d      	beq.n	800544c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	2b04      	cmp	r3, #4
 8005436:	d107      	bne.n	8005448 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005446:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e016      	b.n	800547a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800545a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	e000      	b.n	800547a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005478:	2302      	movs	r3, #2
  }
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	00100002 	.word	0x00100002
 8005488:	ffff0000 	.word	0xffff0000

0800548c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08c      	sub	sp, #48	; 0x30
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	4608      	mov	r0, r1
 8005496:	4611      	mov	r1, r2
 8005498:	461a      	mov	r2, r3
 800549a:	4603      	mov	r3, r0
 800549c:	817b      	strh	r3, [r7, #10]
 800549e:	460b      	mov	r3, r1
 80054a0:	813b      	strh	r3, [r7, #8]
 80054a2:	4613      	mov	r3, r2
 80054a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054a6:	f7fe fb7b 	bl	8003ba0 <HAL_GetTick>
 80054aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	f040 8208 	bne.w	80058ca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	2319      	movs	r3, #25
 80054c0:	2201      	movs	r2, #1
 80054c2:	497b      	ldr	r1, [pc, #492]	; (80056b0 <HAL_I2C_Mem_Read+0x224>)
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 fb85 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80054d0:	2302      	movs	r3, #2
 80054d2:	e1fb      	b.n	80058cc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_I2C_Mem_Read+0x56>
 80054de:	2302      	movs	r3, #2
 80054e0:	e1f4      	b.n	80058cc <HAL_I2C_Mem_Read+0x440>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d007      	beq.n	8005508 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0201 	orr.w	r2, r2, #1
 8005506:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005516:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2222      	movs	r2, #34	; 0x22
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2240      	movs	r2, #64	; 0x40
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005532:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005538:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4a5b      	ldr	r2, [pc, #364]	; (80056b4 <HAL_I2C_Mem_Read+0x228>)
 8005548:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800554a:	88f8      	ldrh	r0, [r7, #6]
 800554c:	893a      	ldrh	r2, [r7, #8]
 800554e:	8979      	ldrh	r1, [r7, #10]
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	9301      	str	r3, [sp, #4]
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	4603      	mov	r3, r0
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 fa52 	bl	8005a04 <I2C_RequestMemoryRead>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e1b0      	b.n	80058cc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800556e:	2b00      	cmp	r3, #0
 8005570:	d113      	bne.n	800559a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005572:	2300      	movs	r3, #0
 8005574:	623b      	str	r3, [r7, #32]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	623b      	str	r3, [r7, #32]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	623b      	str	r3, [r7, #32]
 8005586:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	e184      	b.n	80058a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d11b      	bne.n	80055da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055b2:	2300      	movs	r3, #0
 80055b4:	61fb      	str	r3, [r7, #28]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	61fb      	str	r3, [r7, #28]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	61fb      	str	r3, [r7, #28]
 80055c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	e164      	b.n	80058a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d11b      	bne.n	800561a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005600:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005602:	2300      	movs	r3, #0
 8005604:	61bb      	str	r3, [r7, #24]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	e144      	b.n	80058a4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800561a:	2300      	movs	r3, #0
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005630:	e138      	b.n	80058a4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005636:	2b03      	cmp	r3, #3
 8005638:	f200 80f1 	bhi.w	800581e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005640:	2b01      	cmp	r3, #1
 8005642:	d123      	bne.n	800568c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005646:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 fc1b 	bl	8005e84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e139      	b.n	80058cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691a      	ldr	r2, [r3, #16]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	1c5a      	adds	r2, r3, #1
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005680:	b29b      	uxth	r3, r3
 8005682:	3b01      	subs	r3, #1
 8005684:	b29a      	uxth	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	855a      	strh	r2, [r3, #42]	; 0x2a
 800568a:	e10b      	b.n	80058a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005690:	2b02      	cmp	r3, #2
 8005692:	d14e      	bne.n	8005732 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569a:	2200      	movs	r2, #0
 800569c:	4906      	ldr	r1, [pc, #24]	; (80056b8 <HAL_I2C_Mem_Read+0x22c>)
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 fa98 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d008      	beq.n	80056bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e10e      	b.n	80058cc <HAL_I2C_Mem_Read+0x440>
 80056ae:	bf00      	nop
 80056b0:	00100002 	.word	0x00100002
 80056b4:	ffff0000 	.word	0xffff0000
 80056b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691a      	ldr	r2, [r3, #16]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005730:	e0b8      	b.n	80058a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005738:	2200      	movs	r2, #0
 800573a:	4966      	ldr	r1, [pc, #408]	; (80058d4 <HAL_I2C_Mem_Read+0x448>)
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 fa49 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e0bf      	b.n	80058cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800575a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691a      	ldr	r2, [r3, #16]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005778:	3b01      	subs	r3, #1
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b01      	subs	r3, #1
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	2200      	movs	r2, #0
 8005796:	494f      	ldr	r1, [pc, #316]	; (80058d4 <HAL_I2C_Mem_Read+0x448>)
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 fa1b 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e091      	b.n	80058cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005806:	3b01      	subs	r3, #1
 8005808:	b29a      	uxth	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800581c:	e042      	b.n	80058a4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800581e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005820:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 fb2e 	bl	8005e84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e04c      	b.n	80058cc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584e:	3b01      	subs	r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585a:	b29b      	uxth	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f003 0304 	and.w	r3, r3, #4
 800586e:	2b04      	cmp	r3, #4
 8005870:	d118      	bne.n	80058a4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	691a      	ldr	r2, [r3, #16]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	b2d2      	uxtb	r2, r2
 800587e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588e:	3b01      	subs	r3, #1
 8005890:	b29a      	uxth	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800589a:	b29b      	uxth	r3, r3
 800589c:	3b01      	subs	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f47f aec2 	bne.w	8005632 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	e000      	b.n	80058cc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80058ca:	2302      	movs	r3, #2
  }
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3728      	adds	r7, #40	; 0x28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	00010004 	.word	0x00010004

080058d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af02      	add	r7, sp, #8
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	4608      	mov	r0, r1
 80058e2:	4611      	mov	r1, r2
 80058e4:	461a      	mov	r2, r3
 80058e6:	4603      	mov	r3, r0
 80058e8:	817b      	strh	r3, [r7, #10]
 80058ea:	460b      	mov	r3, r1
 80058ec:	813b      	strh	r3, [r7, #8]
 80058ee:	4613      	mov	r3, r2
 80058f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005900:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	2200      	movs	r2, #0
 800590a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 f960 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00d      	beq.n	8005936 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005928:	d103      	bne.n	8005932 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005930:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e05f      	b.n	80059f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005936:	897b      	ldrh	r3, [r7, #10]
 8005938:	b2db      	uxtb	r3, r3
 800593a:	461a      	mov	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005944:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	6a3a      	ldr	r2, [r7, #32]
 800594a:	492d      	ldr	r1, [pc, #180]	; (8005a00 <I2C_RequestMemoryWrite+0x128>)
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 f998 	bl	8005c82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e04c      	b.n	80059f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005974:	6a39      	ldr	r1, [r7, #32]
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 fa02 	bl	8005d80 <I2C_WaitOnTXEFlagUntilTimeout>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00d      	beq.n	800599e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	2b04      	cmp	r3, #4
 8005988:	d107      	bne.n	800599a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005998:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e02b      	b.n	80059f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800599e:	88fb      	ldrh	r3, [r7, #6]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d105      	bne.n	80059b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059a4:	893b      	ldrh	r3, [r7, #8]
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	611a      	str	r2, [r3, #16]
 80059ae:	e021      	b.n	80059f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059b0:	893b      	ldrh	r3, [r7, #8]
 80059b2:	0a1b      	lsrs	r3, r3, #8
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c0:	6a39      	ldr	r1, [r7, #32]
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 f9dc 	bl	8005d80 <I2C_WaitOnTXEFlagUntilTimeout>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00d      	beq.n	80059ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d107      	bne.n	80059e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e005      	b.n	80059f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059ea:	893b      	ldrh	r3, [r7, #8]
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	00010002 	.word	0x00010002

08005a04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	4608      	mov	r0, r1
 8005a0e:	4611      	mov	r1, r2
 8005a10:	461a      	mov	r2, r3
 8005a12:	4603      	mov	r3, r0
 8005a14:	817b      	strh	r3, [r7, #10]
 8005a16:	460b      	mov	r3, r1
 8005a18:	813b      	strh	r3, [r7, #8]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 f8c2 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00d      	beq.n	8005a72 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a64:	d103      	bne.n	8005a6e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e0aa      	b.n	8005bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a72:	897b      	ldrh	r3, [r7, #10]
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	6a3a      	ldr	r2, [r7, #32]
 8005a86:	4952      	ldr	r1, [pc, #328]	; (8005bd0 <I2C_RequestMemoryRead+0x1cc>)
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 f8fa 	bl	8005c82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e097      	b.n	8005bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a98:	2300      	movs	r3, #0
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab0:	6a39      	ldr	r1, [r7, #32]
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f964 	bl	8005d80 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00d      	beq.n	8005ada <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d107      	bne.n	8005ad6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ad4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e076      	b.n	8005bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d105      	bne.n	8005aec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ae0:	893b      	ldrh	r3, [r7, #8]
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	611a      	str	r2, [r3, #16]
 8005aea:	e021      	b.n	8005b30 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005aec:	893b      	ldrh	r3, [r7, #8]
 8005aee:	0a1b      	lsrs	r3, r3, #8
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005afc:	6a39      	ldr	r1, [r7, #32]
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 f93e 	bl	8005d80 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00d      	beq.n	8005b26 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d107      	bne.n	8005b22 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e050      	b.n	8005bc8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b26:	893b      	ldrh	r3, [r7, #8]
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b32:	6a39      	ldr	r1, [r7, #32]
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 f923 	bl	8005d80 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00d      	beq.n	8005b5c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d107      	bne.n	8005b58 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e035      	b.n	8005bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b6a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 f82b 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00d      	beq.n	8005ba0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b92:	d103      	bne.n	8005b9c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e013      	b.n	8005bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ba0:	897b      	ldrh	r3, [r7, #10]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	f043 0301 	orr.w	r3, r3, #1
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	6a3a      	ldr	r2, [r7, #32]
 8005bb4:	4906      	ldr	r1, [pc, #24]	; (8005bd0 <I2C_RequestMemoryRead+0x1cc>)
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 f863 	bl	8005c82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3718      	adds	r7, #24
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	00010002 	.word	0x00010002

08005bd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	4613      	mov	r3, r2
 8005be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005be4:	e025      	b.n	8005c32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d021      	beq.n	8005c32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bee:	f7fd ffd7 	bl	8003ba0 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d302      	bcc.n	8005c04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d116      	bne.n	8005c32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	f043 0220 	orr.w	r2, r3, #32
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e023      	b.n	8005c7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	0c1b      	lsrs	r3, r3, #16
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d10d      	bne.n	8005c58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	43da      	mvns	r2, r3
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	4013      	ands	r3, r2
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	bf0c      	ite	eq
 8005c4e:	2301      	moveq	r3, #1
 8005c50:	2300      	movne	r3, #0
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	461a      	mov	r2, r3
 8005c56:	e00c      	b.n	8005c72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	43da      	mvns	r2, r3
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	4013      	ands	r3, r2
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	bf0c      	ite	eq
 8005c6a:	2301      	moveq	r3, #1
 8005c6c:	2300      	movne	r3, #0
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	461a      	mov	r2, r3
 8005c72:	79fb      	ldrb	r3, [r7, #7]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d0b6      	beq.n	8005be6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
 8005c8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c90:	e051      	b.n	8005d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca0:	d123      	bne.n	8005cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cb0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	f043 0204 	orr.w	r2, r3, #4
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e046      	b.n	8005d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf0:	d021      	beq.n	8005d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf2:	f7fd ff55 	bl	8003ba0 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d302      	bcc.n	8005d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d116      	bne.n	8005d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2220      	movs	r2, #32
 8005d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	f043 0220 	orr.w	r2, r3, #32
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e020      	b.n	8005d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	0c1b      	lsrs	r3, r3, #16
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d10c      	bne.n	8005d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	43da      	mvns	r2, r3
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bf14      	ite	ne
 8005d52:	2301      	movne	r3, #1
 8005d54:	2300      	moveq	r3, #0
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	e00b      	b.n	8005d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	43da      	mvns	r2, r3
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	4013      	ands	r3, r2
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	bf14      	ite	ne
 8005d6c:	2301      	movne	r3, #1
 8005d6e:	2300      	moveq	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d18d      	bne.n	8005c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d8c:	e02d      	b.n	8005dea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 f8ce 	bl	8005f30 <I2C_IsAcknowledgeFailed>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e02d      	b.n	8005dfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da4:	d021      	beq.n	8005dea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da6:	f7fd fefb 	bl	8003ba0 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d302      	bcc.n	8005dbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d116      	bne.n	8005dea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	f043 0220 	orr.w	r2, r3, #32
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e007      	b.n	8005dfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df4:	2b80      	cmp	r3, #128	; 0x80
 8005df6:	d1ca      	bne.n	8005d8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b084      	sub	sp, #16
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e0e:	e02d      	b.n	8005e6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 f88d 	bl	8005f30 <I2C_IsAcknowledgeFailed>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e02d      	b.n	8005e7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e26:	d021      	beq.n	8005e6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e28:	f7fd feba 	bl	8003ba0 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d302      	bcc.n	8005e3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d116      	bne.n	8005e6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	f043 0220 	orr.w	r2, r3, #32
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e007      	b.n	8005e7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	f003 0304 	and.w	r3, r3, #4
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d1ca      	bne.n	8005e10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e90:	e042      	b.n	8005f18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	f003 0310 	and.w	r3, r3, #16
 8005e9c:	2b10      	cmp	r3, #16
 8005e9e:	d119      	bne.n	8005ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f06f 0210 	mvn.w	r2, #16
 8005ea8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e029      	b.n	8005f28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ed4:	f7fd fe64 	bl	8003ba0 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d302      	bcc.n	8005eea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d116      	bne.n	8005f18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	f043 0220 	orr.w	r2, r3, #32
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e007      	b.n	8005f28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f22:	2b40      	cmp	r3, #64	; 0x40
 8005f24:	d1b5      	bne.n	8005e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f46:	d11b      	bne.n	8005f80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	f043 0204 	orr.w	r2, r3, #4
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e000      	b.n	8005f82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
	...

08005f90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e267      	b.n	8006472 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d075      	beq.n	800609a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fae:	4b88      	ldr	r3, [pc, #544]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f003 030c 	and.w	r3, r3, #12
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d00c      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fba:	4b85      	ldr	r3, [pc, #532]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fc2:	2b08      	cmp	r3, #8
 8005fc4:	d112      	bne.n	8005fec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fc6:	4b82      	ldr	r3, [pc, #520]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fd2:	d10b      	bne.n	8005fec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fd4:	4b7e      	ldr	r3, [pc, #504]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d05b      	beq.n	8006098 <HAL_RCC_OscConfig+0x108>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d157      	bne.n	8006098 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e242      	b.n	8006472 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff4:	d106      	bne.n	8006004 <HAL_RCC_OscConfig+0x74>
 8005ff6:	4b76      	ldr	r3, [pc, #472]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a75      	ldr	r2, [pc, #468]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	e01d      	b.n	8006040 <HAL_RCC_OscConfig+0xb0>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800600c:	d10c      	bne.n	8006028 <HAL_RCC_OscConfig+0x98>
 800600e:	4b70      	ldr	r3, [pc, #448]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a6f      	ldr	r2, [pc, #444]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8006014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	4b6d      	ldr	r3, [pc, #436]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a6c      	ldr	r2, [pc, #432]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8006020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	e00b      	b.n	8006040 <HAL_RCC_OscConfig+0xb0>
 8006028:	4b69      	ldr	r3, [pc, #420]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a68      	ldr	r2, [pc, #416]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 800602e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006032:	6013      	str	r3, [r2, #0]
 8006034:	4b66      	ldr	r3, [pc, #408]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a65      	ldr	r2, [pc, #404]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 800603a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800603e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d013      	beq.n	8006070 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006048:	f7fd fdaa 	bl	8003ba0 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006050:	f7fd fda6 	bl	8003ba0 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b64      	cmp	r3, #100	; 0x64
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e207      	b.n	8006472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006062:	4b5b      	ldr	r3, [pc, #364]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0f0      	beq.n	8006050 <HAL_RCC_OscConfig+0xc0>
 800606e:	e014      	b.n	800609a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006070:	f7fd fd96 	bl	8003ba0 <HAL_GetTick>
 8006074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006076:	e008      	b.n	800608a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006078:	f7fd fd92 	bl	8003ba0 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b64      	cmp	r3, #100	; 0x64
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e1f3      	b.n	8006472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800608a:	4b51      	ldr	r3, [pc, #324]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1f0      	bne.n	8006078 <HAL_RCC_OscConfig+0xe8>
 8006096:	e000      	b.n	800609a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d063      	beq.n	800616e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060a6:	4b4a      	ldr	r3, [pc, #296]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 030c 	and.w	r3, r3, #12
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00b      	beq.n	80060ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060b2:	4b47      	ldr	r3, [pc, #284]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060ba:	2b08      	cmp	r3, #8
 80060bc:	d11c      	bne.n	80060f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060be:	4b44      	ldr	r3, [pc, #272]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d116      	bne.n	80060f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ca:	4b41      	ldr	r3, [pc, #260]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <HAL_RCC_OscConfig+0x152>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d001      	beq.n	80060e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e1c7      	b.n	8006472 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060e2:	4b3b      	ldr	r3, [pc, #236]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	4937      	ldr	r1, [pc, #220]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060f6:	e03a      	b.n	800616e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d020      	beq.n	8006142 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006100:	4b34      	ldr	r3, [pc, #208]	; (80061d4 <HAL_RCC_OscConfig+0x244>)
 8006102:	2201      	movs	r2, #1
 8006104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006106:	f7fd fd4b 	bl	8003ba0 <HAL_GetTick>
 800610a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800610c:	e008      	b.n	8006120 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800610e:	f7fd fd47 	bl	8003ba0 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e1a8      	b.n	8006472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006120:	4b2b      	ldr	r3, [pc, #172]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0f0      	beq.n	800610e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800612c:	4b28      	ldr	r3, [pc, #160]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	4925      	ldr	r1, [pc, #148]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 800613c:	4313      	orrs	r3, r2
 800613e:	600b      	str	r3, [r1, #0]
 8006140:	e015      	b.n	800616e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006142:	4b24      	ldr	r3, [pc, #144]	; (80061d4 <HAL_RCC_OscConfig+0x244>)
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006148:	f7fd fd2a 	bl	8003ba0 <HAL_GetTick>
 800614c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800614e:	e008      	b.n	8006162 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006150:	f7fd fd26 	bl	8003ba0 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e187      	b.n	8006472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006162:	4b1b      	ldr	r3, [pc, #108]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1f0      	bne.n	8006150 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0308 	and.w	r3, r3, #8
 8006176:	2b00      	cmp	r3, #0
 8006178:	d036      	beq.n	80061e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d016      	beq.n	80061b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006182:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <HAL_RCC_OscConfig+0x248>)
 8006184:	2201      	movs	r2, #1
 8006186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006188:	f7fd fd0a 	bl	8003ba0 <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006190:	f7fd fd06 	bl	8003ba0 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e167      	b.n	8006472 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061a2:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 80061a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0f0      	beq.n	8006190 <HAL_RCC_OscConfig+0x200>
 80061ae:	e01b      	b.n	80061e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061b0:	4b09      	ldr	r3, [pc, #36]	; (80061d8 <HAL_RCC_OscConfig+0x248>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061b6:	f7fd fcf3 	bl	8003ba0 <HAL_GetTick>
 80061ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061bc:	e00e      	b.n	80061dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061be:	f7fd fcef 	bl	8003ba0 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d907      	bls.n	80061dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e150      	b.n	8006472 <HAL_RCC_OscConfig+0x4e2>
 80061d0:	40023800 	.word	0x40023800
 80061d4:	42470000 	.word	0x42470000
 80061d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061dc:	4b88      	ldr	r3, [pc, #544]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 80061de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1ea      	bne.n	80061be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 8097 	beq.w	8006324 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061f6:	2300      	movs	r3, #0
 80061f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061fa:	4b81      	ldr	r3, [pc, #516]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10f      	bne.n	8006226 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006206:	2300      	movs	r3, #0
 8006208:	60bb      	str	r3, [r7, #8]
 800620a:	4b7d      	ldr	r3, [pc, #500]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	4a7c      	ldr	r2, [pc, #496]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006214:	6413      	str	r3, [r2, #64]	; 0x40
 8006216:	4b7a      	ldr	r3, [pc, #488]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621e:	60bb      	str	r3, [r7, #8]
 8006220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006222:	2301      	movs	r3, #1
 8006224:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006226:	4b77      	ldr	r3, [pc, #476]	; (8006404 <HAL_RCC_OscConfig+0x474>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622e:	2b00      	cmp	r3, #0
 8006230:	d118      	bne.n	8006264 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006232:	4b74      	ldr	r3, [pc, #464]	; (8006404 <HAL_RCC_OscConfig+0x474>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a73      	ldr	r2, [pc, #460]	; (8006404 <HAL_RCC_OscConfig+0x474>)
 8006238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800623c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800623e:	f7fd fcaf 	bl	8003ba0 <HAL_GetTick>
 8006242:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006244:	e008      	b.n	8006258 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006246:	f7fd fcab 	bl	8003ba0 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e10c      	b.n	8006472 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006258:	4b6a      	ldr	r3, [pc, #424]	; (8006404 <HAL_RCC_OscConfig+0x474>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0f0      	beq.n	8006246 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d106      	bne.n	800627a <HAL_RCC_OscConfig+0x2ea>
 800626c:	4b64      	ldr	r3, [pc, #400]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 800626e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006270:	4a63      	ldr	r2, [pc, #396]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006272:	f043 0301 	orr.w	r3, r3, #1
 8006276:	6713      	str	r3, [r2, #112]	; 0x70
 8006278:	e01c      	b.n	80062b4 <HAL_RCC_OscConfig+0x324>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	2b05      	cmp	r3, #5
 8006280:	d10c      	bne.n	800629c <HAL_RCC_OscConfig+0x30c>
 8006282:	4b5f      	ldr	r3, [pc, #380]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006286:	4a5e      	ldr	r2, [pc, #376]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006288:	f043 0304 	orr.w	r3, r3, #4
 800628c:	6713      	str	r3, [r2, #112]	; 0x70
 800628e:	4b5c      	ldr	r3, [pc, #368]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006292:	4a5b      	ldr	r2, [pc, #364]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006294:	f043 0301 	orr.w	r3, r3, #1
 8006298:	6713      	str	r3, [r2, #112]	; 0x70
 800629a:	e00b      	b.n	80062b4 <HAL_RCC_OscConfig+0x324>
 800629c:	4b58      	ldr	r3, [pc, #352]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 800629e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a0:	4a57      	ldr	r2, [pc, #348]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 80062a2:	f023 0301 	bic.w	r3, r3, #1
 80062a6:	6713      	str	r3, [r2, #112]	; 0x70
 80062a8:	4b55      	ldr	r3, [pc, #340]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 80062aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ac:	4a54      	ldr	r2, [pc, #336]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 80062ae:	f023 0304 	bic.w	r3, r3, #4
 80062b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d015      	beq.n	80062e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062bc:	f7fd fc70 	bl	8003ba0 <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062c2:	e00a      	b.n	80062da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062c4:	f7fd fc6c 	bl	8003ba0 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e0cb      	b.n	8006472 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062da:	4b49      	ldr	r3, [pc, #292]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 80062dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0ee      	beq.n	80062c4 <HAL_RCC_OscConfig+0x334>
 80062e6:	e014      	b.n	8006312 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062e8:	f7fd fc5a 	bl	8003ba0 <HAL_GetTick>
 80062ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ee:	e00a      	b.n	8006306 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062f0:	f7fd fc56 	bl	8003ba0 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80062fe:	4293      	cmp	r3, r2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e0b5      	b.n	8006472 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006306:	4b3e      	ldr	r3, [pc, #248]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1ee      	bne.n	80062f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006312:	7dfb      	ldrb	r3, [r7, #23]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d105      	bne.n	8006324 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006318:	4b39      	ldr	r3, [pc, #228]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 800631a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631c:	4a38      	ldr	r2, [pc, #224]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 800631e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006322:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 80a1 	beq.w	8006470 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800632e:	4b34      	ldr	r3, [pc, #208]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 030c 	and.w	r3, r3, #12
 8006336:	2b08      	cmp	r3, #8
 8006338:	d05c      	beq.n	80063f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	2b02      	cmp	r3, #2
 8006340:	d141      	bne.n	80063c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006342:	4b31      	ldr	r3, [pc, #196]	; (8006408 <HAL_RCC_OscConfig+0x478>)
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006348:	f7fd fc2a 	bl	8003ba0 <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800634e:	e008      	b.n	8006362 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006350:	f7fd fc26 	bl	8003ba0 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b02      	cmp	r3, #2
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e087      	b.n	8006472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006362:	4b27      	ldr	r3, [pc, #156]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1f0      	bne.n	8006350 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69da      	ldr	r2, [r3, #28]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	019b      	lsls	r3, r3, #6
 800637e:	431a      	orrs	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006384:	085b      	lsrs	r3, r3, #1
 8006386:	3b01      	subs	r3, #1
 8006388:	041b      	lsls	r3, r3, #16
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	061b      	lsls	r3, r3, #24
 8006392:	491b      	ldr	r1, [pc, #108]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006394:	4313      	orrs	r3, r2
 8006396:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006398:	4b1b      	ldr	r3, [pc, #108]	; (8006408 <HAL_RCC_OscConfig+0x478>)
 800639a:	2201      	movs	r2, #1
 800639c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800639e:	f7fd fbff 	bl	8003ba0 <HAL_GetTick>
 80063a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063a4:	e008      	b.n	80063b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063a6:	f7fd fbfb 	bl	8003ba0 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d901      	bls.n	80063b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e05c      	b.n	8006472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063b8:	4b11      	ldr	r3, [pc, #68]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d0f0      	beq.n	80063a6 <HAL_RCC_OscConfig+0x416>
 80063c4:	e054      	b.n	8006470 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063c6:	4b10      	ldr	r3, [pc, #64]	; (8006408 <HAL_RCC_OscConfig+0x478>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063cc:	f7fd fbe8 	bl	8003ba0 <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063d4:	f7fd fbe4 	bl	8003ba0 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e045      	b.n	8006472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063e6:	4b06      	ldr	r3, [pc, #24]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1f0      	bne.n	80063d4 <HAL_RCC_OscConfig+0x444>
 80063f2:	e03d      	b.n	8006470 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d107      	bne.n	800640c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e038      	b.n	8006472 <HAL_RCC_OscConfig+0x4e2>
 8006400:	40023800 	.word	0x40023800
 8006404:	40007000 	.word	0x40007000
 8006408:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800640c:	4b1b      	ldr	r3, [pc, #108]	; (800647c <HAL_RCC_OscConfig+0x4ec>)
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d028      	beq.n	800646c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006424:	429a      	cmp	r2, r3
 8006426:	d121      	bne.n	800646c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006432:	429a      	cmp	r2, r3
 8006434:	d11a      	bne.n	800646c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800643c:	4013      	ands	r3, r2
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006442:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006444:	4293      	cmp	r3, r2
 8006446:	d111      	bne.n	800646c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006452:	085b      	lsrs	r3, r3, #1
 8006454:	3b01      	subs	r3, #1
 8006456:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006458:	429a      	cmp	r2, r3
 800645a:	d107      	bne.n	800646c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006468:	429a      	cmp	r2, r3
 800646a:	d001      	beq.n	8006470 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e000      	b.n	8006472 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	40023800 	.word	0x40023800

08006480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e0cc      	b.n	800662e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006494:	4b68      	ldr	r3, [pc, #416]	; (8006638 <HAL_RCC_ClockConfig+0x1b8>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	683a      	ldr	r2, [r7, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d90c      	bls.n	80064bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064a2:	4b65      	ldr	r3, [pc, #404]	; (8006638 <HAL_RCC_ClockConfig+0x1b8>)
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064aa:	4b63      	ldr	r3, [pc, #396]	; (8006638 <HAL_RCC_ClockConfig+0x1b8>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0307 	and.w	r3, r3, #7
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d001      	beq.n	80064bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e0b8      	b.n	800662e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d020      	beq.n	800650a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d005      	beq.n	80064e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064d4:	4b59      	ldr	r3, [pc, #356]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	4a58      	ldr	r2, [pc, #352]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 80064da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0308 	and.w	r3, r3, #8
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064ec:	4b53      	ldr	r3, [pc, #332]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	4a52      	ldr	r2, [pc, #328]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 80064f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064f8:	4b50      	ldr	r3, [pc, #320]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	494d      	ldr	r1, [pc, #308]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 8006506:	4313      	orrs	r3, r2
 8006508:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	d044      	beq.n	80065a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d107      	bne.n	800652e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800651e:	4b47      	ldr	r3, [pc, #284]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d119      	bne.n	800655e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e07f      	b.n	800662e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2b02      	cmp	r3, #2
 8006534:	d003      	beq.n	800653e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800653a:	2b03      	cmp	r3, #3
 800653c:	d107      	bne.n	800654e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800653e:	4b3f      	ldr	r3, [pc, #252]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d109      	bne.n	800655e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e06f      	b.n	800662e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800654e:	4b3b      	ldr	r3, [pc, #236]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e067      	b.n	800662e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800655e:	4b37      	ldr	r3, [pc, #220]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f023 0203 	bic.w	r2, r3, #3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	4934      	ldr	r1, [pc, #208]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 800656c:	4313      	orrs	r3, r2
 800656e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006570:	f7fd fb16 	bl	8003ba0 <HAL_GetTick>
 8006574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006576:	e00a      	b.n	800658e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006578:	f7fd fb12 	bl	8003ba0 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	f241 3288 	movw	r2, #5000	; 0x1388
 8006586:	4293      	cmp	r3, r2
 8006588:	d901      	bls.n	800658e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e04f      	b.n	800662e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800658e:	4b2b      	ldr	r3, [pc, #172]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f003 020c 	and.w	r2, r3, #12
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	429a      	cmp	r2, r3
 800659e:	d1eb      	bne.n	8006578 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065a0:	4b25      	ldr	r3, [pc, #148]	; (8006638 <HAL_RCC_ClockConfig+0x1b8>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d20c      	bcs.n	80065c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ae:	4b22      	ldr	r3, [pc, #136]	; (8006638 <HAL_RCC_ClockConfig+0x1b8>)
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065b6:	4b20      	ldr	r3, [pc, #128]	; (8006638 <HAL_RCC_ClockConfig+0x1b8>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0307 	and.w	r3, r3, #7
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d001      	beq.n	80065c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e032      	b.n	800662e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d008      	beq.n	80065e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065d4:	4b19      	ldr	r3, [pc, #100]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	4916      	ldr	r1, [pc, #88]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0308 	and.w	r3, r3, #8
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d009      	beq.n	8006606 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065f2:	4b12      	ldr	r3, [pc, #72]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	490e      	ldr	r1, [pc, #56]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 8006602:	4313      	orrs	r3, r2
 8006604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006606:	f000 f821 	bl	800664c <HAL_RCC_GetSysClockFreq>
 800660a:	4602      	mov	r2, r0
 800660c:	4b0b      	ldr	r3, [pc, #44]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	091b      	lsrs	r3, r3, #4
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	490a      	ldr	r1, [pc, #40]	; (8006640 <HAL_RCC_ClockConfig+0x1c0>)
 8006618:	5ccb      	ldrb	r3, [r1, r3]
 800661a:	fa22 f303 	lsr.w	r3, r2, r3
 800661e:	4a09      	ldr	r2, [pc, #36]	; (8006644 <HAL_RCC_ClockConfig+0x1c4>)
 8006620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006622:	4b09      	ldr	r3, [pc, #36]	; (8006648 <HAL_RCC_ClockConfig+0x1c8>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4618      	mov	r0, r3
 8006628:	f7fd fa76 	bl	8003b18 <HAL_InitTick>

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	40023c00 	.word	0x40023c00
 800663c:	40023800 	.word	0x40023800
 8006640:	080073a4 	.word	0x080073a4
 8006644:	2000705c 	.word	0x2000705c
 8006648:	20007060 	.word	0x20007060

0800664c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800664c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006650:	b090      	sub	sp, #64	; 0x40
 8006652:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	637b      	str	r3, [r7, #52]	; 0x34
 8006658:	2300      	movs	r3, #0
 800665a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800665c:	2300      	movs	r3, #0
 800665e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006664:	4b59      	ldr	r3, [pc, #356]	; (80067cc <HAL_RCC_GetSysClockFreq+0x180>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 030c 	and.w	r3, r3, #12
 800666c:	2b08      	cmp	r3, #8
 800666e:	d00d      	beq.n	800668c <HAL_RCC_GetSysClockFreq+0x40>
 8006670:	2b08      	cmp	r3, #8
 8006672:	f200 80a1 	bhi.w	80067b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8006676:	2b00      	cmp	r3, #0
 8006678:	d002      	beq.n	8006680 <HAL_RCC_GetSysClockFreq+0x34>
 800667a:	2b04      	cmp	r3, #4
 800667c:	d003      	beq.n	8006686 <HAL_RCC_GetSysClockFreq+0x3a>
 800667e:	e09b      	b.n	80067b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006680:	4b53      	ldr	r3, [pc, #332]	; (80067d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006682:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006684:	e09b      	b.n	80067be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006686:	4b53      	ldr	r3, [pc, #332]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006688:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800668a:	e098      	b.n	80067be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800668c:	4b4f      	ldr	r3, [pc, #316]	; (80067cc <HAL_RCC_GetSysClockFreq+0x180>)
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006696:	4b4d      	ldr	r3, [pc, #308]	; (80067cc <HAL_RCC_GetSysClockFreq+0x180>)
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d028      	beq.n	80066f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066a2:	4b4a      	ldr	r3, [pc, #296]	; (80067cc <HAL_RCC_GetSysClockFreq+0x180>)
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	099b      	lsrs	r3, r3, #6
 80066a8:	2200      	movs	r2, #0
 80066aa:	623b      	str	r3, [r7, #32]
 80066ac:	627a      	str	r2, [r7, #36]	; 0x24
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80066b4:	2100      	movs	r1, #0
 80066b6:	4b47      	ldr	r3, [pc, #284]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80066b8:	fb03 f201 	mul.w	r2, r3, r1
 80066bc:	2300      	movs	r3, #0
 80066be:	fb00 f303 	mul.w	r3, r0, r3
 80066c2:	4413      	add	r3, r2
 80066c4:	4a43      	ldr	r2, [pc, #268]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80066c6:	fba0 1202 	umull	r1, r2, r0, r2
 80066ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066cc:	460a      	mov	r2, r1
 80066ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80066d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066d2:	4413      	add	r3, r2
 80066d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d8:	2200      	movs	r2, #0
 80066da:	61bb      	str	r3, [r7, #24]
 80066dc:	61fa      	str	r2, [r7, #28]
 80066de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80066e6:	f7fa fa03 	bl	8000af0 <__aeabi_uldivmod>
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	4613      	mov	r3, r2
 80066f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f2:	e053      	b.n	800679c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066f4:	4b35      	ldr	r3, [pc, #212]	; (80067cc <HAL_RCC_GetSysClockFreq+0x180>)
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	099b      	lsrs	r3, r3, #6
 80066fa:	2200      	movs	r2, #0
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	617a      	str	r2, [r7, #20]
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006706:	f04f 0b00 	mov.w	fp, #0
 800670a:	4652      	mov	r2, sl
 800670c:	465b      	mov	r3, fp
 800670e:	f04f 0000 	mov.w	r0, #0
 8006712:	f04f 0100 	mov.w	r1, #0
 8006716:	0159      	lsls	r1, r3, #5
 8006718:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800671c:	0150      	lsls	r0, r2, #5
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	ebb2 080a 	subs.w	r8, r2, sl
 8006726:	eb63 090b 	sbc.w	r9, r3, fp
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	f04f 0300 	mov.w	r3, #0
 8006732:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006736:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800673a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800673e:	ebb2 0408 	subs.w	r4, r2, r8
 8006742:	eb63 0509 	sbc.w	r5, r3, r9
 8006746:	f04f 0200 	mov.w	r2, #0
 800674a:	f04f 0300 	mov.w	r3, #0
 800674e:	00eb      	lsls	r3, r5, #3
 8006750:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006754:	00e2      	lsls	r2, r4, #3
 8006756:	4614      	mov	r4, r2
 8006758:	461d      	mov	r5, r3
 800675a:	eb14 030a 	adds.w	r3, r4, sl
 800675e:	603b      	str	r3, [r7, #0]
 8006760:	eb45 030b 	adc.w	r3, r5, fp
 8006764:	607b      	str	r3, [r7, #4]
 8006766:	f04f 0200 	mov.w	r2, #0
 800676a:	f04f 0300 	mov.w	r3, #0
 800676e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006772:	4629      	mov	r1, r5
 8006774:	028b      	lsls	r3, r1, #10
 8006776:	4621      	mov	r1, r4
 8006778:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800677c:	4621      	mov	r1, r4
 800677e:	028a      	lsls	r2, r1, #10
 8006780:	4610      	mov	r0, r2
 8006782:	4619      	mov	r1, r3
 8006784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006786:	2200      	movs	r2, #0
 8006788:	60bb      	str	r3, [r7, #8]
 800678a:	60fa      	str	r2, [r7, #12]
 800678c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006790:	f7fa f9ae 	bl	8000af0 <__aeabi_uldivmod>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	4613      	mov	r3, r2
 800679a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800679c:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <HAL_RCC_GetSysClockFreq+0x180>)
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	0c1b      	lsrs	r3, r3, #16
 80067a2:	f003 0303 	and.w	r3, r3, #3
 80067a6:	3301      	adds	r3, #1
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80067ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80067b6:	e002      	b.n	80067be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067b8:	4b05      	ldr	r3, [pc, #20]	; (80067d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80067ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80067bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3740      	adds	r7, #64	; 0x40
 80067c4:	46bd      	mov	sp, r7
 80067c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067ca:	bf00      	nop
 80067cc:	40023800 	.word	0x40023800
 80067d0:	00f42400 	.word	0x00f42400
 80067d4:	017d7840 	.word	0x017d7840

080067d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067dc:	4b03      	ldr	r3, [pc, #12]	; (80067ec <HAL_RCC_GetHCLKFreq+0x14>)
 80067de:	681b      	ldr	r3, [r3, #0]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	2000705c 	.word	0x2000705c

080067f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067f4:	f7ff fff0 	bl	80067d8 <HAL_RCC_GetHCLKFreq>
 80067f8:	4602      	mov	r2, r0
 80067fa:	4b05      	ldr	r3, [pc, #20]	; (8006810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	0a9b      	lsrs	r3, r3, #10
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	4903      	ldr	r1, [pc, #12]	; (8006814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006806:	5ccb      	ldrb	r3, [r1, r3]
 8006808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800680c:	4618      	mov	r0, r3
 800680e:	bd80      	pop	{r7, pc}
 8006810:	40023800 	.word	0x40023800
 8006814:	080073b4 	.word	0x080073b4

08006818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e041      	b.n	80068ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d106      	bne.n	8006844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7fd f8a2 	bl	8003988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	3304      	adds	r3, #4
 8006854:	4619      	mov	r1, r3
 8006856:	4610      	mov	r0, r2
 8006858:	f000 f950 	bl	8006afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
	...

080068b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d001      	beq.n	80068d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e03c      	b.n	800694a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1e      	ldr	r2, [pc, #120]	; (8006958 <HAL_TIM_Base_Start+0xa0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d018      	beq.n	8006914 <HAL_TIM_Base_Start+0x5c>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ea:	d013      	beq.n	8006914 <HAL_TIM_Base_Start+0x5c>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a1a      	ldr	r2, [pc, #104]	; (800695c <HAL_TIM_Base_Start+0xa4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00e      	beq.n	8006914 <HAL_TIM_Base_Start+0x5c>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a19      	ldr	r2, [pc, #100]	; (8006960 <HAL_TIM_Base_Start+0xa8>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d009      	beq.n	8006914 <HAL_TIM_Base_Start+0x5c>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a17      	ldr	r2, [pc, #92]	; (8006964 <HAL_TIM_Base_Start+0xac>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d004      	beq.n	8006914 <HAL_TIM_Base_Start+0x5c>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a16      	ldr	r2, [pc, #88]	; (8006968 <HAL_TIM_Base_Start+0xb0>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d111      	bne.n	8006938 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f003 0307 	and.w	r3, r3, #7
 800691e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b06      	cmp	r3, #6
 8006924:	d010      	beq.n	8006948 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f042 0201 	orr.w	r2, r2, #1
 8006934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006936:	e007      	b.n	8006948 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0201 	orr.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	40010000 	.word	0x40010000
 800695c:	40000400 	.word	0x40000400
 8006960:	40000800 	.word	0x40000800
 8006964:	40000c00 	.word	0x40000c00
 8006968:	40014000 	.word	0x40014000

0800696c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006980:	2b01      	cmp	r3, #1
 8006982:	d101      	bne.n	8006988 <HAL_TIM_ConfigClockSource+0x1c>
 8006984:	2302      	movs	r3, #2
 8006986:	e0b4      	b.n	8006af2 <HAL_TIM_ConfigClockSource+0x186>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c0:	d03e      	beq.n	8006a40 <HAL_TIM_ConfigClockSource+0xd4>
 80069c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c6:	f200 8087 	bhi.w	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80069ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ce:	f000 8086 	beq.w	8006ade <HAL_TIM_ConfigClockSource+0x172>
 80069d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d6:	d87f      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80069d8:	2b70      	cmp	r3, #112	; 0x70
 80069da:	d01a      	beq.n	8006a12 <HAL_TIM_ConfigClockSource+0xa6>
 80069dc:	2b70      	cmp	r3, #112	; 0x70
 80069de:	d87b      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80069e0:	2b60      	cmp	r3, #96	; 0x60
 80069e2:	d050      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x11a>
 80069e4:	2b60      	cmp	r3, #96	; 0x60
 80069e6:	d877      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80069e8:	2b50      	cmp	r3, #80	; 0x50
 80069ea:	d03c      	beq.n	8006a66 <HAL_TIM_ConfigClockSource+0xfa>
 80069ec:	2b50      	cmp	r3, #80	; 0x50
 80069ee:	d873      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80069f0:	2b40      	cmp	r3, #64	; 0x40
 80069f2:	d058      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0x13a>
 80069f4:	2b40      	cmp	r3, #64	; 0x40
 80069f6:	d86f      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80069f8:	2b30      	cmp	r3, #48	; 0x30
 80069fa:	d064      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x15a>
 80069fc:	2b30      	cmp	r3, #48	; 0x30
 80069fe:	d86b      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	d060      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d867      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d05c      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8006a0c:	2b10      	cmp	r3, #16
 8006a0e:	d05a      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8006a10:	e062      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	6899      	ldr	r1, [r3, #8]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f000 f965 	bl	8006cf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	609a      	str	r2, [r3, #8]
      break;
 8006a3e:	e04f      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6818      	ldr	r0, [r3, #0]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	6899      	ldr	r1, [r3, #8]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f000 f94e 	bl	8006cf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a62:	609a      	str	r2, [r3, #8]
      break;
 8006a64:	e03c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6859      	ldr	r1, [r3, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	461a      	mov	r2, r3
 8006a74:	f000 f8c2 	bl	8006bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2150      	movs	r1, #80	; 0x50
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 f91b 	bl	8006cba <TIM_ITRx_SetConfig>
      break;
 8006a84:	e02c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	6859      	ldr	r1, [r3, #4]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	461a      	mov	r2, r3
 8006a94:	f000 f8e1 	bl	8006c5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2160      	movs	r1, #96	; 0x60
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 f90b 	bl	8006cba <TIM_ITRx_SetConfig>
      break;
 8006aa4:	e01c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	6859      	ldr	r1, [r3, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	f000 f8a2 	bl	8006bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2140      	movs	r1, #64	; 0x40
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 f8fb 	bl	8006cba <TIM_ITRx_SetConfig>
      break;
 8006ac4:	e00c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	f000 f8f2 	bl	8006cba <TIM_ITRx_SetConfig>
      break;
 8006ad6:	e003      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	73fb      	strb	r3, [r7, #15]
      break;
 8006adc:	e000      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ade:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
	...

08006afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a34      	ldr	r2, [pc, #208]	; (8006be0 <TIM_Base_SetConfig+0xe4>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00f      	beq.n	8006b34 <TIM_Base_SetConfig+0x38>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1a:	d00b      	beq.n	8006b34 <TIM_Base_SetConfig+0x38>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a31      	ldr	r2, [pc, #196]	; (8006be4 <TIM_Base_SetConfig+0xe8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d007      	beq.n	8006b34 <TIM_Base_SetConfig+0x38>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a30      	ldr	r2, [pc, #192]	; (8006be8 <TIM_Base_SetConfig+0xec>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d003      	beq.n	8006b34 <TIM_Base_SetConfig+0x38>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a2f      	ldr	r2, [pc, #188]	; (8006bec <TIM_Base_SetConfig+0xf0>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d108      	bne.n	8006b46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a25      	ldr	r2, [pc, #148]	; (8006be0 <TIM_Base_SetConfig+0xe4>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d01b      	beq.n	8006b86 <TIM_Base_SetConfig+0x8a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b54:	d017      	beq.n	8006b86 <TIM_Base_SetConfig+0x8a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a22      	ldr	r2, [pc, #136]	; (8006be4 <TIM_Base_SetConfig+0xe8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d013      	beq.n	8006b86 <TIM_Base_SetConfig+0x8a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a21      	ldr	r2, [pc, #132]	; (8006be8 <TIM_Base_SetConfig+0xec>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00f      	beq.n	8006b86 <TIM_Base_SetConfig+0x8a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a20      	ldr	r2, [pc, #128]	; (8006bec <TIM_Base_SetConfig+0xf0>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d00b      	beq.n	8006b86 <TIM_Base_SetConfig+0x8a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a1f      	ldr	r2, [pc, #124]	; (8006bf0 <TIM_Base_SetConfig+0xf4>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d007      	beq.n	8006b86 <TIM_Base_SetConfig+0x8a>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a1e      	ldr	r2, [pc, #120]	; (8006bf4 <TIM_Base_SetConfig+0xf8>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d003      	beq.n	8006b86 <TIM_Base_SetConfig+0x8a>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a1d      	ldr	r2, [pc, #116]	; (8006bf8 <TIM_Base_SetConfig+0xfc>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d108      	bne.n	8006b98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a08      	ldr	r2, [pc, #32]	; (8006be0 <TIM_Base_SetConfig+0xe4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d103      	bne.n	8006bcc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	691a      	ldr	r2, [r3, #16]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	615a      	str	r2, [r3, #20]
}
 8006bd2:	bf00      	nop
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	40010000 	.word	0x40010000
 8006be4:	40000400 	.word	0x40000400
 8006be8:	40000800 	.word	0x40000800
 8006bec:	40000c00 	.word	0x40000c00
 8006bf0:	40014000 	.word	0x40014000
 8006bf4:	40014400 	.word	0x40014400
 8006bf8:	40014800 	.word	0x40014800

08006bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	f023 0201 	bic.w	r2, r3, #1
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f023 030a 	bic.w	r3, r3, #10
 8006c38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	621a      	str	r2, [r3, #32]
}
 8006c4e:	bf00      	nop
 8006c50:	371c      	adds	r7, #28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b087      	sub	sp, #28
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	f023 0210 	bic.w	r2, r3, #16
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	031b      	lsls	r3, r3, #12
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	621a      	str	r2, [r3, #32]
}
 8006cae:	bf00      	nop
 8006cb0:	371c      	adds	r7, #28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b085      	sub	sp, #20
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	f043 0307 	orr.w	r3, r3, #7
 8006cdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	609a      	str	r2, [r3, #8]
}
 8006ce4:	bf00      	nop
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	021a      	lsls	r2, r3, #8
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	431a      	orrs	r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	609a      	str	r2, [r3, #8]
}
 8006d24:	bf00      	nop
 8006d26:	371c      	adds	r7, #28
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d101      	bne.n	8006d48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e050      	b.n	8006dea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a1c      	ldr	r2, [pc, #112]	; (8006df8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d018      	beq.n	8006dbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d94:	d013      	beq.n	8006dbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a18      	ldr	r2, [pc, #96]	; (8006dfc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d00e      	beq.n	8006dbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a16      	ldr	r2, [pc, #88]	; (8006e00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d009      	beq.n	8006dbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a15      	ldr	r2, [pc, #84]	; (8006e04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d004      	beq.n	8006dbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a13      	ldr	r2, [pc, #76]	; (8006e08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d10c      	bne.n	8006dd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	40010000 	.word	0x40010000
 8006dfc:	40000400 	.word	0x40000400
 8006e00:	40000800 	.word	0x40000800
 8006e04:	40000c00 	.word	0x40000c00
 8006e08:	40014000 	.word	0x40014000

08006e0c <memset>:
 8006e0c:	4402      	add	r2, r0
 8006e0e:	4603      	mov	r3, r0
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d100      	bne.n	8006e16 <memset+0xa>
 8006e14:	4770      	bx	lr
 8006e16:	f803 1b01 	strb.w	r1, [r3], #1
 8006e1a:	e7f9      	b.n	8006e10 <memset+0x4>

08006e1c <__errno>:
 8006e1c:	4b01      	ldr	r3, [pc, #4]	; (8006e24 <__errno+0x8>)
 8006e1e:	6818      	ldr	r0, [r3, #0]
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	200070b4 	.word	0x200070b4

08006e28 <__libc_init_array>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	4d0d      	ldr	r5, [pc, #52]	; (8006e60 <__libc_init_array+0x38>)
 8006e2c:	4c0d      	ldr	r4, [pc, #52]	; (8006e64 <__libc_init_array+0x3c>)
 8006e2e:	1b64      	subs	r4, r4, r5
 8006e30:	10a4      	asrs	r4, r4, #2
 8006e32:	2600      	movs	r6, #0
 8006e34:	42a6      	cmp	r6, r4
 8006e36:	d109      	bne.n	8006e4c <__libc_init_array+0x24>
 8006e38:	4d0b      	ldr	r5, [pc, #44]	; (8006e68 <__libc_init_array+0x40>)
 8006e3a:	4c0c      	ldr	r4, [pc, #48]	; (8006e6c <__libc_init_array+0x44>)
 8006e3c:	f000 faa6 	bl	800738c <_init>
 8006e40:	1b64      	subs	r4, r4, r5
 8006e42:	10a4      	asrs	r4, r4, #2
 8006e44:	2600      	movs	r6, #0
 8006e46:	42a6      	cmp	r6, r4
 8006e48:	d105      	bne.n	8006e56 <__libc_init_array+0x2e>
 8006e4a:	bd70      	pop	{r4, r5, r6, pc}
 8006e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e50:	4798      	blx	r3
 8006e52:	3601      	adds	r6, #1
 8006e54:	e7ee      	b.n	8006e34 <__libc_init_array+0xc>
 8006e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e5a:	4798      	blx	r3
 8006e5c:	3601      	adds	r6, #1
 8006e5e:	e7f2      	b.n	8006e46 <__libc_init_array+0x1e>
 8006e60:	080073d0 	.word	0x080073d0
 8006e64:	080073d0 	.word	0x080073d0
 8006e68:	080073d0 	.word	0x080073d0
 8006e6c:	080073d4 	.word	0x080073d4

08006e70 <log10>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	ed2d 8b02 	vpush	{d8}
 8006e76:	ec55 4b10 	vmov	r4, r5, d0
 8006e7a:	f000 f841 	bl	8006f00 <__ieee754_log10>
 8006e7e:	4622      	mov	r2, r4
 8006e80:	462b      	mov	r3, r5
 8006e82:	4620      	mov	r0, r4
 8006e84:	4629      	mov	r1, r5
 8006e86:	eeb0 8a40 	vmov.f32	s16, s0
 8006e8a:	eef0 8a60 	vmov.f32	s17, s1
 8006e8e:	f7f9 fdf9 	bl	8000a84 <__aeabi_dcmpun>
 8006e92:	b998      	cbnz	r0, 8006ebc <log10+0x4c>
 8006e94:	2200      	movs	r2, #0
 8006e96:	2300      	movs	r3, #0
 8006e98:	4620      	mov	r0, r4
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	f7f9 fdd4 	bl	8000a48 <__aeabi_dcmple>
 8006ea0:	b160      	cbz	r0, 8006ebc <log10+0x4c>
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	f7f9 fdb9 	bl	8000a20 <__aeabi_dcmpeq>
 8006eae:	b160      	cbz	r0, 8006eca <log10+0x5a>
 8006eb0:	f7ff ffb4 	bl	8006e1c <__errno>
 8006eb4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8006ee0 <log10+0x70>
 8006eb8:	2322      	movs	r3, #34	; 0x22
 8006eba:	6003      	str	r3, [r0, #0]
 8006ebc:	eeb0 0a48 	vmov.f32	s0, s16
 8006ec0:	eef0 0a68 	vmov.f32	s1, s17
 8006ec4:	ecbd 8b02 	vpop	{d8}
 8006ec8:	bd38      	pop	{r3, r4, r5, pc}
 8006eca:	f7ff ffa7 	bl	8006e1c <__errno>
 8006ece:	ecbd 8b02 	vpop	{d8}
 8006ed2:	2321      	movs	r3, #33	; 0x21
 8006ed4:	6003      	str	r3, [r0, #0]
 8006ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eda:	4803      	ldr	r0, [pc, #12]	; (8006ee8 <log10+0x78>)
 8006edc:	f000 b808 	b.w	8006ef0 <nan>
 8006ee0:	00000000 	.word	0x00000000
 8006ee4:	fff00000 	.word	0xfff00000
 8006ee8:	080073c4 	.word	0x080073c4
 8006eec:	00000000 	.word	0x00000000

08006ef0 <nan>:
 8006ef0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006ef8 <nan+0x8>
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	00000000 	.word	0x00000000
 8006efc:	7ff80000 	.word	0x7ff80000

08006f00 <__ieee754_log10>:
 8006f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f04:	ec55 4b10 	vmov	r4, r5, d0
 8006f08:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8006f0c:	462b      	mov	r3, r5
 8006f0e:	da2f      	bge.n	8006f70 <__ieee754_log10+0x70>
 8006f10:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8006f14:	4322      	orrs	r2, r4
 8006f16:	d109      	bne.n	8006f2c <__ieee754_log10+0x2c>
 8006f18:	493b      	ldr	r1, [pc, #236]	; (8007008 <__ieee754_log10+0x108>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	2000      	movs	r0, #0
 8006f20:	f7f9 fc40 	bl	80007a4 <__aeabi_ddiv>
 8006f24:	ec41 0b10 	vmov	d0, r0, r1
 8006f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f2c:	2d00      	cmp	r5, #0
 8006f2e:	da09      	bge.n	8006f44 <__ieee754_log10+0x44>
 8006f30:	ee10 2a10 	vmov	r2, s0
 8006f34:	ee10 0a10 	vmov	r0, s0
 8006f38:	4629      	mov	r1, r5
 8006f3a:	f7f9 f951 	bl	80001e0 <__aeabi_dsub>
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2300      	movs	r3, #0
 8006f42:	e7ed      	b.n	8006f20 <__ieee754_log10+0x20>
 8006f44:	4b31      	ldr	r3, [pc, #196]	; (800700c <__ieee754_log10+0x10c>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	4629      	mov	r1, r5
 8006f4a:	ee10 0a10 	vmov	r0, s0
 8006f4e:	f7f9 faff 	bl	8000550 <__aeabi_dmul>
 8006f52:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8006f56:	4604      	mov	r4, r0
 8006f58:	460d      	mov	r5, r1
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	492c      	ldr	r1, [pc, #176]	; (8007010 <__ieee754_log10+0x110>)
 8006f5e:	428b      	cmp	r3, r1
 8006f60:	dd08      	ble.n	8006f74 <__ieee754_log10+0x74>
 8006f62:	4622      	mov	r2, r4
 8006f64:	462b      	mov	r3, r5
 8006f66:	4620      	mov	r0, r4
 8006f68:	4629      	mov	r1, r5
 8006f6a:	f7f9 f93b 	bl	80001e4 <__adddf3>
 8006f6e:	e7d9      	b.n	8006f24 <__ieee754_log10+0x24>
 8006f70:	2200      	movs	r2, #0
 8006f72:	e7f3      	b.n	8006f5c <__ieee754_log10+0x5c>
 8006f74:	1518      	asrs	r0, r3, #20
 8006f76:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8006f7a:	4410      	add	r0, r2
 8006f7c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8006f80:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006f84:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8006f88:	f7f9 fa78 	bl	800047c <__aeabi_i2d>
 8006f8c:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8006f90:	3303      	adds	r3, #3
 8006f92:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8006f96:	ec45 4b10 	vmov	d0, r4, r5
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	460f      	mov	r7, r1
 8006f9e:	f000 f83b 	bl	8007018 <__ieee754_log>
 8006fa2:	a313      	add	r3, pc, #76	; (adr r3, 8006ff0 <__ieee754_log10+0xf0>)
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	4630      	mov	r0, r6
 8006faa:	4639      	mov	r1, r7
 8006fac:	ec59 8b10 	vmov	r8, r9, d0
 8006fb0:	f7f9 face 	bl	8000550 <__aeabi_dmul>
 8006fb4:	a310      	add	r3, pc, #64	; (adr r3, 8006ff8 <__ieee754_log10+0xf8>)
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	4604      	mov	r4, r0
 8006fbc:	460d      	mov	r5, r1
 8006fbe:	4640      	mov	r0, r8
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	f7f9 fac5 	bl	8000550 <__aeabi_dmul>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4620      	mov	r0, r4
 8006fcc:	4629      	mov	r1, r5
 8006fce:	f7f9 f909 	bl	80001e4 <__adddf3>
 8006fd2:	a30b      	add	r3, pc, #44	; (adr r3, 8007000 <__ieee754_log10+0x100>)
 8006fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd8:	4604      	mov	r4, r0
 8006fda:	460d      	mov	r5, r1
 8006fdc:	4630      	mov	r0, r6
 8006fde:	4639      	mov	r1, r7
 8006fe0:	f7f9 fab6 	bl	8000550 <__aeabi_dmul>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4620      	mov	r0, r4
 8006fea:	4629      	mov	r1, r5
 8006fec:	e7bd      	b.n	8006f6a <__ieee754_log10+0x6a>
 8006fee:	bf00      	nop
 8006ff0:	11f12b36 	.word	0x11f12b36
 8006ff4:	3d59fef3 	.word	0x3d59fef3
 8006ff8:	1526e50e 	.word	0x1526e50e
 8006ffc:	3fdbcb7b 	.word	0x3fdbcb7b
 8007000:	509f6000 	.word	0x509f6000
 8007004:	3fd34413 	.word	0x3fd34413
 8007008:	c3500000 	.word	0xc3500000
 800700c:	43500000 	.word	0x43500000
 8007010:	7fefffff 	.word	0x7fefffff
 8007014:	00000000 	.word	0x00000000

08007018 <__ieee754_log>:
 8007018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800701c:	ec51 0b10 	vmov	r0, r1, d0
 8007020:	ed2d 8b04 	vpush	{d8-d9}
 8007024:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007028:	b083      	sub	sp, #12
 800702a:	460d      	mov	r5, r1
 800702c:	da29      	bge.n	8007082 <__ieee754_log+0x6a>
 800702e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007032:	4303      	orrs	r3, r0
 8007034:	ee10 2a10 	vmov	r2, s0
 8007038:	d10c      	bne.n	8007054 <__ieee754_log+0x3c>
 800703a:	49cf      	ldr	r1, [pc, #828]	; (8007378 <__ieee754_log+0x360>)
 800703c:	2200      	movs	r2, #0
 800703e:	2300      	movs	r3, #0
 8007040:	2000      	movs	r0, #0
 8007042:	f7f9 fbaf 	bl	80007a4 <__aeabi_ddiv>
 8007046:	ec41 0b10 	vmov	d0, r0, r1
 800704a:	b003      	add	sp, #12
 800704c:	ecbd 8b04 	vpop	{d8-d9}
 8007050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007054:	2900      	cmp	r1, #0
 8007056:	da05      	bge.n	8007064 <__ieee754_log+0x4c>
 8007058:	460b      	mov	r3, r1
 800705a:	f7f9 f8c1 	bl	80001e0 <__aeabi_dsub>
 800705e:	2200      	movs	r2, #0
 8007060:	2300      	movs	r3, #0
 8007062:	e7ee      	b.n	8007042 <__ieee754_log+0x2a>
 8007064:	4bc5      	ldr	r3, [pc, #788]	; (800737c <__ieee754_log+0x364>)
 8007066:	2200      	movs	r2, #0
 8007068:	f7f9 fa72 	bl	8000550 <__aeabi_dmul>
 800706c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8007070:	460d      	mov	r5, r1
 8007072:	4ac3      	ldr	r2, [pc, #780]	; (8007380 <__ieee754_log+0x368>)
 8007074:	4295      	cmp	r5, r2
 8007076:	dd06      	ble.n	8007086 <__ieee754_log+0x6e>
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	f7f9 f8b2 	bl	80001e4 <__adddf3>
 8007080:	e7e1      	b.n	8007046 <__ieee754_log+0x2e>
 8007082:	2300      	movs	r3, #0
 8007084:	e7f5      	b.n	8007072 <__ieee754_log+0x5a>
 8007086:	152c      	asrs	r4, r5, #20
 8007088:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800708c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007090:	441c      	add	r4, r3
 8007092:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8007096:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800709a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800709e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80070a2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80070a6:	ea42 0105 	orr.w	r1, r2, r5
 80070aa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80070ae:	2200      	movs	r2, #0
 80070b0:	4bb4      	ldr	r3, [pc, #720]	; (8007384 <__ieee754_log+0x36c>)
 80070b2:	f7f9 f895 	bl	80001e0 <__aeabi_dsub>
 80070b6:	1cab      	adds	r3, r5, #2
 80070b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070bc:	2b02      	cmp	r3, #2
 80070be:	4682      	mov	sl, r0
 80070c0:	468b      	mov	fp, r1
 80070c2:	f04f 0200 	mov.w	r2, #0
 80070c6:	dc53      	bgt.n	8007170 <__ieee754_log+0x158>
 80070c8:	2300      	movs	r3, #0
 80070ca:	f7f9 fca9 	bl	8000a20 <__aeabi_dcmpeq>
 80070ce:	b1d0      	cbz	r0, 8007106 <__ieee754_log+0xee>
 80070d0:	2c00      	cmp	r4, #0
 80070d2:	f000 8122 	beq.w	800731a <__ieee754_log+0x302>
 80070d6:	4620      	mov	r0, r4
 80070d8:	f7f9 f9d0 	bl	800047c <__aeabi_i2d>
 80070dc:	a390      	add	r3, pc, #576	; (adr r3, 8007320 <__ieee754_log+0x308>)
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	4606      	mov	r6, r0
 80070e4:	460f      	mov	r7, r1
 80070e6:	f7f9 fa33 	bl	8000550 <__aeabi_dmul>
 80070ea:	a38f      	add	r3, pc, #572	; (adr r3, 8007328 <__ieee754_log+0x310>)
 80070ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f0:	4604      	mov	r4, r0
 80070f2:	460d      	mov	r5, r1
 80070f4:	4630      	mov	r0, r6
 80070f6:	4639      	mov	r1, r7
 80070f8:	f7f9 fa2a 	bl	8000550 <__aeabi_dmul>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	4620      	mov	r0, r4
 8007102:	4629      	mov	r1, r5
 8007104:	e7ba      	b.n	800707c <__ieee754_log+0x64>
 8007106:	a38a      	add	r3, pc, #552	; (adr r3, 8007330 <__ieee754_log+0x318>)
 8007108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710c:	4650      	mov	r0, sl
 800710e:	4659      	mov	r1, fp
 8007110:	f7f9 fa1e 	bl	8000550 <__aeabi_dmul>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	2000      	movs	r0, #0
 800711a:	499b      	ldr	r1, [pc, #620]	; (8007388 <__ieee754_log+0x370>)
 800711c:	f7f9 f860 	bl	80001e0 <__aeabi_dsub>
 8007120:	4652      	mov	r2, sl
 8007122:	4606      	mov	r6, r0
 8007124:	460f      	mov	r7, r1
 8007126:	465b      	mov	r3, fp
 8007128:	4650      	mov	r0, sl
 800712a:	4659      	mov	r1, fp
 800712c:	f7f9 fa10 	bl	8000550 <__aeabi_dmul>
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	4630      	mov	r0, r6
 8007136:	4639      	mov	r1, r7
 8007138:	f7f9 fa0a 	bl	8000550 <__aeabi_dmul>
 800713c:	4606      	mov	r6, r0
 800713e:	460f      	mov	r7, r1
 8007140:	b914      	cbnz	r4, 8007148 <__ieee754_log+0x130>
 8007142:	4632      	mov	r2, r6
 8007144:	463b      	mov	r3, r7
 8007146:	e0a2      	b.n	800728e <__ieee754_log+0x276>
 8007148:	4620      	mov	r0, r4
 800714a:	f7f9 f997 	bl	800047c <__aeabi_i2d>
 800714e:	a374      	add	r3, pc, #464	; (adr r3, 8007320 <__ieee754_log+0x308>)
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	4680      	mov	r8, r0
 8007156:	4689      	mov	r9, r1
 8007158:	f7f9 f9fa 	bl	8000550 <__aeabi_dmul>
 800715c:	a372      	add	r3, pc, #456	; (adr r3, 8007328 <__ieee754_log+0x310>)
 800715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007162:	4604      	mov	r4, r0
 8007164:	460d      	mov	r5, r1
 8007166:	4640      	mov	r0, r8
 8007168:	4649      	mov	r1, r9
 800716a:	f7f9 f9f1 	bl	8000550 <__aeabi_dmul>
 800716e:	e0a7      	b.n	80072c0 <__ieee754_log+0x2a8>
 8007170:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007174:	f7f9 f836 	bl	80001e4 <__adddf3>
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	4650      	mov	r0, sl
 800717e:	4659      	mov	r1, fp
 8007180:	f7f9 fb10 	bl	80007a4 <__aeabi_ddiv>
 8007184:	ec41 0b18 	vmov	d8, r0, r1
 8007188:	4620      	mov	r0, r4
 800718a:	f7f9 f977 	bl	800047c <__aeabi_i2d>
 800718e:	ec53 2b18 	vmov	r2, r3, d8
 8007192:	ec41 0b19 	vmov	d9, r0, r1
 8007196:	ec51 0b18 	vmov	r0, r1, d8
 800719a:	f7f9 f9d9 	bl	8000550 <__aeabi_dmul>
 800719e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80071a2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80071a6:	9301      	str	r3, [sp, #4]
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	4680      	mov	r8, r0
 80071ae:	4689      	mov	r9, r1
 80071b0:	f7f9 f9ce 	bl	8000550 <__aeabi_dmul>
 80071b4:	a360      	add	r3, pc, #384	; (adr r3, 8007338 <__ieee754_log+0x320>)
 80071b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ba:	4606      	mov	r6, r0
 80071bc:	460f      	mov	r7, r1
 80071be:	f7f9 f9c7 	bl	8000550 <__aeabi_dmul>
 80071c2:	a35f      	add	r3, pc, #380	; (adr r3, 8007340 <__ieee754_log+0x328>)
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	f7f9 f80c 	bl	80001e4 <__adddf3>
 80071cc:	4632      	mov	r2, r6
 80071ce:	463b      	mov	r3, r7
 80071d0:	f7f9 f9be 	bl	8000550 <__aeabi_dmul>
 80071d4:	a35c      	add	r3, pc, #368	; (adr r3, 8007348 <__ieee754_log+0x330>)
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	f7f9 f803 	bl	80001e4 <__adddf3>
 80071de:	4632      	mov	r2, r6
 80071e0:	463b      	mov	r3, r7
 80071e2:	f7f9 f9b5 	bl	8000550 <__aeabi_dmul>
 80071e6:	a35a      	add	r3, pc, #360	; (adr r3, 8007350 <__ieee754_log+0x338>)
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	f7f8 fffa 	bl	80001e4 <__adddf3>
 80071f0:	4642      	mov	r2, r8
 80071f2:	464b      	mov	r3, r9
 80071f4:	f7f9 f9ac 	bl	8000550 <__aeabi_dmul>
 80071f8:	a357      	add	r3, pc, #348	; (adr r3, 8007358 <__ieee754_log+0x340>)
 80071fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fe:	4680      	mov	r8, r0
 8007200:	4689      	mov	r9, r1
 8007202:	4630      	mov	r0, r6
 8007204:	4639      	mov	r1, r7
 8007206:	f7f9 f9a3 	bl	8000550 <__aeabi_dmul>
 800720a:	a355      	add	r3, pc, #340	; (adr r3, 8007360 <__ieee754_log+0x348>)
 800720c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007210:	f7f8 ffe8 	bl	80001e4 <__adddf3>
 8007214:	4632      	mov	r2, r6
 8007216:	463b      	mov	r3, r7
 8007218:	f7f9 f99a 	bl	8000550 <__aeabi_dmul>
 800721c:	a352      	add	r3, pc, #328	; (adr r3, 8007368 <__ieee754_log+0x350>)
 800721e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007222:	f7f8 ffdf 	bl	80001e4 <__adddf3>
 8007226:	4632      	mov	r2, r6
 8007228:	463b      	mov	r3, r7
 800722a:	f7f9 f991 	bl	8000550 <__aeabi_dmul>
 800722e:	460b      	mov	r3, r1
 8007230:	4602      	mov	r2, r0
 8007232:	4649      	mov	r1, r9
 8007234:	4640      	mov	r0, r8
 8007236:	f7f8 ffd5 	bl	80001e4 <__adddf3>
 800723a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800723e:	9b01      	ldr	r3, [sp, #4]
 8007240:	3551      	adds	r5, #81	; 0x51
 8007242:	431d      	orrs	r5, r3
 8007244:	2d00      	cmp	r5, #0
 8007246:	4680      	mov	r8, r0
 8007248:	4689      	mov	r9, r1
 800724a:	dd48      	ble.n	80072de <__ieee754_log+0x2c6>
 800724c:	4b4e      	ldr	r3, [pc, #312]	; (8007388 <__ieee754_log+0x370>)
 800724e:	2200      	movs	r2, #0
 8007250:	4650      	mov	r0, sl
 8007252:	4659      	mov	r1, fp
 8007254:	f7f9 f97c 	bl	8000550 <__aeabi_dmul>
 8007258:	4652      	mov	r2, sl
 800725a:	465b      	mov	r3, fp
 800725c:	f7f9 f978 	bl	8000550 <__aeabi_dmul>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4606      	mov	r6, r0
 8007266:	460f      	mov	r7, r1
 8007268:	4640      	mov	r0, r8
 800726a:	4649      	mov	r1, r9
 800726c:	f7f8 ffba 	bl	80001e4 <__adddf3>
 8007270:	ec53 2b18 	vmov	r2, r3, d8
 8007274:	f7f9 f96c 	bl	8000550 <__aeabi_dmul>
 8007278:	4680      	mov	r8, r0
 800727a:	4689      	mov	r9, r1
 800727c:	b964      	cbnz	r4, 8007298 <__ieee754_log+0x280>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	4630      	mov	r0, r6
 8007284:	4639      	mov	r1, r7
 8007286:	f7f8 ffab 	bl	80001e0 <__aeabi_dsub>
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	4650      	mov	r0, sl
 8007290:	4659      	mov	r1, fp
 8007292:	f7f8 ffa5 	bl	80001e0 <__aeabi_dsub>
 8007296:	e6d6      	b.n	8007046 <__ieee754_log+0x2e>
 8007298:	a321      	add	r3, pc, #132	; (adr r3, 8007320 <__ieee754_log+0x308>)
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	ec51 0b19 	vmov	r0, r1, d9
 80072a2:	f7f9 f955 	bl	8000550 <__aeabi_dmul>
 80072a6:	a320      	add	r3, pc, #128	; (adr r3, 8007328 <__ieee754_log+0x310>)
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	4604      	mov	r4, r0
 80072ae:	460d      	mov	r5, r1
 80072b0:	ec51 0b19 	vmov	r0, r1, d9
 80072b4:	f7f9 f94c 	bl	8000550 <__aeabi_dmul>
 80072b8:	4642      	mov	r2, r8
 80072ba:	464b      	mov	r3, r9
 80072bc:	f7f8 ff92 	bl	80001e4 <__adddf3>
 80072c0:	4602      	mov	r2, r0
 80072c2:	460b      	mov	r3, r1
 80072c4:	4630      	mov	r0, r6
 80072c6:	4639      	mov	r1, r7
 80072c8:	f7f8 ff8a 	bl	80001e0 <__aeabi_dsub>
 80072cc:	4652      	mov	r2, sl
 80072ce:	465b      	mov	r3, fp
 80072d0:	f7f8 ff86 	bl	80001e0 <__aeabi_dsub>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	4620      	mov	r0, r4
 80072da:	4629      	mov	r1, r5
 80072dc:	e7d9      	b.n	8007292 <__ieee754_log+0x27a>
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	4650      	mov	r0, sl
 80072e4:	4659      	mov	r1, fp
 80072e6:	f7f8 ff7b 	bl	80001e0 <__aeabi_dsub>
 80072ea:	ec53 2b18 	vmov	r2, r3, d8
 80072ee:	f7f9 f92f 	bl	8000550 <__aeabi_dmul>
 80072f2:	4606      	mov	r6, r0
 80072f4:	460f      	mov	r7, r1
 80072f6:	2c00      	cmp	r4, #0
 80072f8:	f43f af23 	beq.w	8007142 <__ieee754_log+0x12a>
 80072fc:	a308      	add	r3, pc, #32	; (adr r3, 8007320 <__ieee754_log+0x308>)
 80072fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007302:	ec51 0b19 	vmov	r0, r1, d9
 8007306:	f7f9 f923 	bl	8000550 <__aeabi_dmul>
 800730a:	a307      	add	r3, pc, #28	; (adr r3, 8007328 <__ieee754_log+0x310>)
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	4604      	mov	r4, r0
 8007312:	460d      	mov	r5, r1
 8007314:	ec51 0b19 	vmov	r0, r1, d9
 8007318:	e727      	b.n	800716a <__ieee754_log+0x152>
 800731a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8007370 <__ieee754_log+0x358>
 800731e:	e694      	b.n	800704a <__ieee754_log+0x32>
 8007320:	fee00000 	.word	0xfee00000
 8007324:	3fe62e42 	.word	0x3fe62e42
 8007328:	35793c76 	.word	0x35793c76
 800732c:	3dea39ef 	.word	0x3dea39ef
 8007330:	55555555 	.word	0x55555555
 8007334:	3fd55555 	.word	0x3fd55555
 8007338:	df3e5244 	.word	0xdf3e5244
 800733c:	3fc2f112 	.word	0x3fc2f112
 8007340:	96cb03de 	.word	0x96cb03de
 8007344:	3fc74664 	.word	0x3fc74664
 8007348:	94229359 	.word	0x94229359
 800734c:	3fd24924 	.word	0x3fd24924
 8007350:	55555593 	.word	0x55555593
 8007354:	3fe55555 	.word	0x3fe55555
 8007358:	d078c69f 	.word	0xd078c69f
 800735c:	3fc39a09 	.word	0x3fc39a09
 8007360:	1d8e78af 	.word	0x1d8e78af
 8007364:	3fcc71c5 	.word	0x3fcc71c5
 8007368:	9997fa04 	.word	0x9997fa04
 800736c:	3fd99999 	.word	0x3fd99999
	...
 8007378:	c3500000 	.word	0xc3500000
 800737c:	43500000 	.word	0x43500000
 8007380:	7fefffff 	.word	0x7fefffff
 8007384:	3ff00000 	.word	0x3ff00000
 8007388:	3fe00000 	.word	0x3fe00000

0800738c <_init>:
 800738c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738e:	bf00      	nop
 8007390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007392:	bc08      	pop	{r3}
 8007394:	469e      	mov	lr, r3
 8007396:	4770      	bx	lr

08007398 <_fini>:
 8007398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739a:	bf00      	nop
 800739c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800739e:	bc08      	pop	{r3}
 80073a0:	469e      	mov	lr, r3
 80073a2:	4770      	bx	lr
