
AudioDSP-v3.1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800627c  0800627c  0001627c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062a0  080062a0  000270fc  2**0
                  CONTENTS
  4 .ARM          00000008  080062a0  080062a0  000162a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062a8  080062a8  000270fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062a8  080062a8  000162a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062ac  080062ac  000162ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000070fc  20000000  080062b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  200070fc  0800d3ac  000270fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200075b4  0800d3ac  000275b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000270fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002712c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d6c1  00000000  00000000  0002716f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001de1  00000000  00000000  00034830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00036618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aed  00000000  00000000  000373f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e35c  00000000  00000000  00037ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a73  00000000  00000000  00066241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013d40a  00000000  00000000  00076cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fd4  00000000  00000000  001b40c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  001b8094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200070fc 	.word	0x200070fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006264 	.word	0x08006264

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20007100 	.word	0x20007100
 80001d4:	08006264 	.word	0x08006264

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b970 	b.w	8000de8 <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9e08      	ldr	r6, [sp, #32]
 8000b26:	460d      	mov	r5, r1
 8000b28:	4604      	mov	r4, r0
 8000b2a:	460f      	mov	r7, r1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d14a      	bne.n	8000bc6 <__udivmoddi4+0xa6>
 8000b30:	428a      	cmp	r2, r1
 8000b32:	4694      	mov	ip, r2
 8000b34:	d965      	bls.n	8000c02 <__udivmoddi4+0xe2>
 8000b36:	fab2 f382 	clz	r3, r2
 8000b3a:	b143      	cbz	r3, 8000b4e <__udivmoddi4+0x2e>
 8000b3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b40:	f1c3 0220 	rsb	r2, r3, #32
 8000b44:	409f      	lsls	r7, r3
 8000b46:	fa20 f202 	lsr.w	r2, r0, r2
 8000b4a:	4317      	orrs	r7, r2
 8000b4c:	409c      	lsls	r4, r3
 8000b4e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b52:	fa1f f58c 	uxth.w	r5, ip
 8000b56:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b5a:	0c22      	lsrs	r2, r4, #16
 8000b5c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b60:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b64:	fb01 f005 	mul.w	r0, r1, r5
 8000b68:	4290      	cmp	r0, r2
 8000b6a:	d90a      	bls.n	8000b82 <__udivmoddi4+0x62>
 8000b6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b70:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b74:	f080 811c 	bcs.w	8000db0 <__udivmoddi4+0x290>
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	f240 8119 	bls.w	8000db0 <__udivmoddi4+0x290>
 8000b7e:	3902      	subs	r1, #2
 8000b80:	4462      	add	r2, ip
 8000b82:	1a12      	subs	r2, r2, r0
 8000b84:	b2a4      	uxth	r4, r4
 8000b86:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b8a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b92:	fb00 f505 	mul.w	r5, r0, r5
 8000b96:	42a5      	cmp	r5, r4
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x90>
 8000b9a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ba2:	f080 8107 	bcs.w	8000db4 <__udivmoddi4+0x294>
 8000ba6:	42a5      	cmp	r5, r4
 8000ba8:	f240 8104 	bls.w	8000db4 <__udivmoddi4+0x294>
 8000bac:	4464      	add	r4, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb4:	1b64      	subs	r4, r4, r5
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11e      	cbz	r6, 8000bc2 <__udivmoddi4+0xa2>
 8000bba:	40dc      	lsrs	r4, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e9c6 4300 	strd	r4, r3, [r6]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d908      	bls.n	8000bdc <__udivmoddi4+0xbc>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	f000 80ed 	beq.w	8000daa <__udivmoddi4+0x28a>
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bdc:	fab3 f183 	clz	r1, r3
 8000be0:	2900      	cmp	r1, #0
 8000be2:	d149      	bne.n	8000c78 <__udivmoddi4+0x158>
 8000be4:	42ab      	cmp	r3, r5
 8000be6:	d302      	bcc.n	8000bee <__udivmoddi4+0xce>
 8000be8:	4282      	cmp	r2, r0
 8000bea:	f200 80f8 	bhi.w	8000dde <__udivmoddi4+0x2be>
 8000bee:	1a84      	subs	r4, r0, r2
 8000bf0:	eb65 0203 	sbc.w	r2, r5, r3
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	4617      	mov	r7, r2
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d0e2      	beq.n	8000bc2 <__udivmoddi4+0xa2>
 8000bfc:	e9c6 4700 	strd	r4, r7, [r6]
 8000c00:	e7df      	b.n	8000bc2 <__udivmoddi4+0xa2>
 8000c02:	b902      	cbnz	r2, 8000c06 <__udivmoddi4+0xe6>
 8000c04:	deff      	udf	#255	; 0xff
 8000c06:	fab2 f382 	clz	r3, r2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f040 8090 	bne.w	8000d30 <__udivmoddi4+0x210>
 8000c10:	1a8a      	subs	r2, r1, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c20:	fb07 2015 	mls	r0, r7, r5, r2
 8000c24:	0c22      	lsrs	r2, r4, #16
 8000c26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c2a:	fb0e f005 	mul.w	r0, lr, r5
 8000c2e:	4290      	cmp	r0, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x124>
 8000c32:	eb1c 0202 	adds.w	r2, ip, r2
 8000c36:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x122>
 8000c3c:	4290      	cmp	r0, r2
 8000c3e:	f200 80cb 	bhi.w	8000dd8 <__udivmoddi4+0x2b8>
 8000c42:	4645      	mov	r5, r8
 8000c44:	1a12      	subs	r2, r2, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c4c:	fb07 2210 	mls	r2, r7, r0, r2
 8000c50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c54:	fb0e fe00 	mul.w	lr, lr, r0
 8000c58:	45a6      	cmp	lr, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x14e>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0x14c>
 8000c66:	45a6      	cmp	lr, r4
 8000c68:	f200 80bb 	bhi.w	8000de2 <__udivmoddi4+0x2c2>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c76:	e79f      	b.n	8000bb8 <__udivmoddi4+0x98>
 8000c78:	f1c1 0720 	rsb	r7, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c86:	fa05 f401 	lsl.w	r4, r5, r1
 8000c8a:	fa20 f307 	lsr.w	r3, r0, r7
 8000c8e:	40fd      	lsrs	r5, r7
 8000c90:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	fb09 5518 	mls	r5, r9, r8, r5
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cac:	42a5      	cmp	r5, r4
 8000cae:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb2:	fa00 f001 	lsl.w	r0, r0, r1
 8000cb6:	d90b      	bls.n	8000cd0 <__udivmoddi4+0x1b0>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc0:	f080 8088 	bcs.w	8000dd4 <__udivmoddi4+0x2b4>
 8000cc4:	42a5      	cmp	r5, r4
 8000cc6:	f240 8085 	bls.w	8000dd4 <__udivmoddi4+0x2b4>
 8000cca:	f1a8 0802 	sub.w	r8, r8, #2
 8000cce:	4464      	add	r4, ip
 8000cd0:	1b64      	subs	r4, r4, r5
 8000cd2:	b29d      	uxth	r5, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ce0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1da>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cf0:	d26c      	bcs.n	8000dcc <__udivmoddi4+0x2ac>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	d96a      	bls.n	8000dcc <__udivmoddi4+0x2ac>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fba3 9502 	umull	r9, r5, r3, r2
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	42ac      	cmp	r4, r5
 8000d08:	46c8      	mov	r8, r9
 8000d0a:	46ae      	mov	lr, r5
 8000d0c:	d356      	bcc.n	8000dbc <__udivmoddi4+0x29c>
 8000d0e:	d053      	beq.n	8000db8 <__udivmoddi4+0x298>
 8000d10:	b156      	cbz	r6, 8000d28 <__udivmoddi4+0x208>
 8000d12:	ebb0 0208 	subs.w	r2, r0, r8
 8000d16:	eb64 040e 	sbc.w	r4, r4, lr
 8000d1a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d1e:	40ca      	lsrs	r2, r1
 8000d20:	40cc      	lsrs	r4, r1
 8000d22:	4317      	orrs	r7, r2
 8000d24:	e9c6 7400 	strd	r7, r4, [r6]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d30:	f1c3 0120 	rsb	r1, r3, #32
 8000d34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d38:	fa20 f201 	lsr.w	r2, r0, r1
 8000d3c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d40:	409d      	lsls	r5, r3
 8000d42:	432a      	orrs	r2, r5
 8000d44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d50:	fb07 1510 	mls	r5, r7, r0, r1
 8000d54:	0c11      	lsrs	r1, r2, #16
 8000d56:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d5a:	fb00 f50e 	mul.w	r5, r0, lr
 8000d5e:	428d      	cmp	r5, r1
 8000d60:	fa04 f403 	lsl.w	r4, r4, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x258>
 8000d66:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6e:	d22f      	bcs.n	8000dd0 <__udivmoddi4+0x2b0>
 8000d70:	428d      	cmp	r5, r1
 8000d72:	d92d      	bls.n	8000dd0 <__udivmoddi4+0x2b0>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1b49      	subs	r1, r1, r5
 8000d7a:	b292      	uxth	r2, r2
 8000d7c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d80:	fb07 1115 	mls	r1, r7, r5, r1
 8000d84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d88:	fb05 f10e 	mul.w	r1, r5, lr
 8000d8c:	4291      	cmp	r1, r2
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x282>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d98:	d216      	bcs.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d9a:	4291      	cmp	r1, r2
 8000d9c:	d914      	bls.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d9e:	3d02      	subs	r5, #2
 8000da0:	4462      	add	r2, ip
 8000da2:	1a52      	subs	r2, r2, r1
 8000da4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000da8:	e738      	b.n	8000c1c <__udivmoddi4+0xfc>
 8000daa:	4631      	mov	r1, r6
 8000dac:	4630      	mov	r0, r6
 8000dae:	e708      	b.n	8000bc2 <__udivmoddi4+0xa2>
 8000db0:	4639      	mov	r1, r7
 8000db2:	e6e6      	b.n	8000b82 <__udivmoddi4+0x62>
 8000db4:	4610      	mov	r0, r2
 8000db6:	e6fb      	b.n	8000bb0 <__udivmoddi4+0x90>
 8000db8:	4548      	cmp	r0, r9
 8000dba:	d2a9      	bcs.n	8000d10 <__udivmoddi4+0x1f0>
 8000dbc:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	e7a3      	b.n	8000d10 <__udivmoddi4+0x1f0>
 8000dc8:	4645      	mov	r5, r8
 8000dca:	e7ea      	b.n	8000da2 <__udivmoddi4+0x282>
 8000dcc:	462b      	mov	r3, r5
 8000dce:	e794      	b.n	8000cfa <__udivmoddi4+0x1da>
 8000dd0:	4640      	mov	r0, r8
 8000dd2:	e7d1      	b.n	8000d78 <__udivmoddi4+0x258>
 8000dd4:	46d0      	mov	r8, sl
 8000dd6:	e77b      	b.n	8000cd0 <__udivmoddi4+0x1b0>
 8000dd8:	3d02      	subs	r5, #2
 8000dda:	4462      	add	r2, ip
 8000ddc:	e732      	b.n	8000c44 <__udivmoddi4+0x124>
 8000dde:	4608      	mov	r0, r1
 8000de0:	e70a      	b.n	8000bf8 <__udivmoddi4+0xd8>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	e742      	b.n	8000c6e <__udivmoddi4+0x14e>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <default_download_IC_1>:
/*
 * Default Download
 */
#define DEFAULT_DOWNLOAD_SIZE_IC_1 75

void default_download_IC_1(uint16_t devAddress) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	80fb      	strh	r3, [r7, #6]
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOFT_RESET_IC_1_ADDR, REG_SOFT_RESET_IC_1_BYTE, R0_SOFT_RESET_IC_1_Default );
 8000df6:	88f8      	ldrh	r0, [r7, #6]
 8000df8:	4bc5      	ldr	r3, [pc, #788]	; (8001110 <default_download_IC_1+0x324>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	f64f 0190 	movw	r1, #63632	; 0xf890
 8000e00:	f001 fcf2 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOFT_RESET_IC_1_ADDR, REG_SOFT_RESET_IC_1_BYTE, R1_SOFT_RESET_IC_1_Default );
 8000e04:	88f8      	ldrh	r0, [r7, #6]
 8000e06:	4bc3      	ldr	r3, [pc, #780]	; (8001114 <default_download_IC_1+0x328>)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	f64f 0190 	movw	r1, #63632	; 0xf890
 8000e0e:	f001 fceb 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( devAddress, R2_RESET_DELAY_IC_1_SIZE, R2_RESET_DELAY_IC_1_Default );
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	4ac0      	ldr	r2, [pc, #768]	; (8001118 <default_download_IC_1+0x32c>)
 8000e16:	2102      	movs	r1, #2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 fd09 	bl	8002830 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R3_HIBERNATE_IC_1_Default );
 8000e1e:	88f8      	ldrh	r0, [r7, #6]
 8000e20:	4bbe      	ldr	r3, [pc, #760]	; (800111c <default_download_IC_1+0x330>)
 8000e22:	2202      	movs	r2, #2
 8000e24:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8000e28:	f001 fcde 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R4_HIBERNATE_IC_1_Default );
 8000e2c:	88f8      	ldrh	r0, [r7, #6]
 8000e2e:	4bbc      	ldr	r3, [pc, #752]	; (8001120 <default_download_IC_1+0x334>)
 8000e30:	2202      	movs	r2, #2
 8000e32:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8000e36:	f001 fcd7 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( devAddress, R5_HIBERNATE_DELAY_IC_1_SIZE, R5_HIBERNATE_DELAY_IC_1_Default );
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	4ab9      	ldr	r2, [pc, #740]	; (8001124 <default_download_IC_1+0x338>)
 8000e3e:	2102      	movs	r1, #2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 fcf5 	bl	8002830 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R6_KILL_CORE_IC_1_Default );
 8000e46:	88f8      	ldrh	r0, [r7, #6]
 8000e48:	4bb7      	ldr	r3, [pc, #732]	; (8001128 <default_download_IC_1+0x33c>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	f24f 4103 	movw	r1, #62467	; 0xf403
 8000e50:	f001 fcca 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R7_KILL_CORE_IC_1_Default );
 8000e54:	88f8      	ldrh	r0, [r7, #6]
 8000e56:	4bb5      	ldr	r3, [pc, #724]	; (800112c <default_download_IC_1+0x340>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	f24f 4103 	movw	r1, #62467	; 0xf403
 8000e5e:	f001 fcc3 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_PLL_ENABLE_IC_1_ADDR, REG_PLL_ENABLE_IC_1_BYTE, R8_PLL_ENABLE_IC_1_Default );
 8000e62:	88f8      	ldrh	r0, [r7, #6]
 8000e64:	4bb2      	ldr	r3, [pc, #712]	; (8001130 <default_download_IC_1+0x344>)
 8000e66:	2202      	movs	r2, #2
 8000e68:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000e6c:	f001 fcbc 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_PLL_CTRL1_IC_1_ADDR, REG_PLL_CTRL1_IC_1_BYTE, R9_PLL_CTRL1_IC_1_Default );
 8000e70:	88f8      	ldrh	r0, [r7, #6]
 8000e72:	4bb0      	ldr	r3, [pc, #704]	; (8001134 <default_download_IC_1+0x348>)
 8000e74:	2202      	movs	r2, #2
 8000e76:	f24f 0101 	movw	r1, #61441	; 0xf001
 8000e7a:	f001 fcb5 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_PLL_CLK_SRC_IC_1_ADDR, REG_PLL_CLK_SRC_IC_1_BYTE, R10_PLL_CLK_SRC_IC_1_Default );
 8000e7e:	88f8      	ldrh	r0, [r7, #6]
 8000e80:	4bad      	ldr	r3, [pc, #692]	; (8001138 <default_download_IC_1+0x34c>)
 8000e82:	2202      	movs	r2, #2
 8000e84:	f24f 0102 	movw	r1, #61442	; 0xf002
 8000e88:	f001 fcae 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MCLK_OUT_IC_1_ADDR, REG_MCLK_OUT_IC_1_BYTE, R11_MCLK_OUT_IC_1_Default );
 8000e8c:	88f8      	ldrh	r0, [r7, #6]
 8000e8e:	4bab      	ldr	r3, [pc, #684]	; (800113c <default_download_IC_1+0x350>)
 8000e90:	2202      	movs	r2, #2
 8000e92:	f24f 0105 	movw	r1, #61445	; 0xf005
 8000e96:	f001 fca7 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_PLL_ENABLE_IC_1_ADDR, REG_PLL_ENABLE_IC_1_BYTE, R12_PLL_ENABLE_IC_1_Default );
 8000e9a:	88f8      	ldrh	r0, [r7, #6]
 8000e9c:	4ba8      	ldr	r3, [pc, #672]	; (8001140 <default_download_IC_1+0x354>)
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000ea4:	f001 fca0 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( devAddress, R13_PLL_LOCK_DELAY_IC_1_SIZE, R13_PLL_LOCK_DELAY_IC_1_Default );
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	4aa6      	ldr	r2, [pc, #664]	; (8001144 <default_download_IC_1+0x358>)
 8000eac:	2102      	movs	r1, #2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 fcbe 	bl	8002830 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_POWER_ENABLE0_IC_1_ADDR, REG_POWER_ENABLE0_IC_1_BYTE, R14_POWER_ENABLE0_IC_1_Default );
 8000eb4:	88f8      	ldrh	r0, [r7, #6]
 8000eb6:	4ba4      	ldr	r3, [pc, #656]	; (8001148 <default_download_IC_1+0x35c>)
 8000eb8:	2202      	movs	r2, #2
 8000eba:	f24f 0150 	movw	r1, #61520	; 0xf050
 8000ebe:	f001 fc93 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_POWER_ENABLE1_IC_1_ADDR, REG_POWER_ENABLE1_IC_1_BYTE, R15_POWER_ENABLE1_IC_1_Default );
 8000ec2:	88f8      	ldrh	r0, [r7, #6]
 8000ec4:	4ba1      	ldr	r3, [pc, #644]	; (800114c <default_download_IC_1+0x360>)
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	f24f 0151 	movw	r1, #61521	; 0xf051
 8000ecc:	f001 fc8c 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_CLK_GEN1_M_IC_1_ADDR, REG_CLK_GEN1_M_IC_1_BYTE, R16_CLK_GEN1_M_IC_1_Default );
 8000ed0:	88f8      	ldrh	r0, [r7, #6]
 8000ed2:	4b9f      	ldr	r3, [pc, #636]	; (8001150 <default_download_IC_1+0x364>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	f24f 0120 	movw	r1, #61472	; 0xf020
 8000eda:	f001 fc85 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_CLK_GEN1_N_IC_1_ADDR, REG_CLK_GEN1_N_IC_1_BYTE, R17_CLK_GEN1_N_IC_1_Default );
 8000ede:	88f8      	ldrh	r0, [r7, #6]
 8000ee0:	4b9c      	ldr	r3, [pc, #624]	; (8001154 <default_download_IC_1+0x368>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	f24f 0121 	movw	r1, #61473	; 0xf021
 8000ee8:	f001 fc7e 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_CLK_GEN2_M_IC_1_ADDR, REG_CLK_GEN2_M_IC_1_BYTE, R18_CLK_GEN2_M_IC_1_Default );
 8000eec:	88f8      	ldrh	r0, [r7, #6]
 8000eee:	4b9a      	ldr	r3, [pc, #616]	; (8001158 <default_download_IC_1+0x36c>)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	f24f 0122 	movw	r1, #61474	; 0xf022
 8000ef6:	f001 fc77 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_CLK_GEN2_N_IC_1_ADDR, REG_CLK_GEN2_N_IC_1_BYTE, R19_CLK_GEN2_N_IC_1_Default );
 8000efa:	88f8      	ldrh	r0, [r7, #6]
 8000efc:	4b97      	ldr	r3, [pc, #604]	; (800115c <default_download_IC_1+0x370>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	f24f 0123 	movw	r1, #61475	; 0xf023
 8000f04:	f001 fc70 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_CLK_GEN3_M_IC_1_ADDR, REG_CLK_GEN3_M_IC_1_BYTE, R20_CLK_GEN3_M_IC_1_Default );
 8000f08:	88f8      	ldrh	r0, [r7, #6]
 8000f0a:	4b95      	ldr	r3, [pc, #596]	; (8001160 <default_download_IC_1+0x374>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	f24f 0124 	movw	r1, #61476	; 0xf024
 8000f12:	f001 fc69 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_CLK_GEN3_N_IC_1_ADDR, REG_CLK_GEN3_N_IC_1_BYTE, R21_CLK_GEN3_N_IC_1_Default );
 8000f16:	88f8      	ldrh	r0, [r7, #6]
 8000f18:	4b92      	ldr	r3, [pc, #584]	; (8001164 <default_download_IC_1+0x378>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	f24f 0125 	movw	r1, #61477	; 0xf025
 8000f20:	f001 fc62 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP0_MODE_IC_1_ADDR, REG_MP0_MODE_IC_1_BYTE, R22_MP0_MODE_IC_1_Default );
 8000f24:	88f8      	ldrh	r0, [r7, #6]
 8000f26:	4b90      	ldr	r3, [pc, #576]	; (8001168 <default_download_IC_1+0x37c>)
 8000f28:	2202      	movs	r2, #2
 8000f2a:	f24f 5110 	movw	r1, #62736	; 0xf510
 8000f2e:	f001 fc5b 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP1_MODE_IC_1_ADDR, REG_MP1_MODE_IC_1_BYTE, R23_MP1_MODE_IC_1_Default );
 8000f32:	88f8      	ldrh	r0, [r7, #6]
 8000f34:	4b8d      	ldr	r3, [pc, #564]	; (800116c <default_download_IC_1+0x380>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	f24f 5111 	movw	r1, #62737	; 0xf511
 8000f3c:	f001 fc54 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP2_MODE_IC_1_ADDR, REG_MP2_MODE_IC_1_BYTE, R24_MP2_MODE_IC_1_Default );
 8000f40:	88f8      	ldrh	r0, [r7, #6]
 8000f42:	4b8b      	ldr	r3, [pc, #556]	; (8001170 <default_download_IC_1+0x384>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	f24f 5112 	movw	r1, #62738	; 0xf512
 8000f4a:	f001 fc4d 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP3_MODE_IC_1_ADDR, REG_MP3_MODE_IC_1_BYTE, R25_MP3_MODE_IC_1_Default );
 8000f4e:	88f8      	ldrh	r0, [r7, #6]
 8000f50:	4b88      	ldr	r3, [pc, #544]	; (8001174 <default_download_IC_1+0x388>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	f24f 5113 	movw	r1, #62739	; 0xf513
 8000f58:	f001 fc46 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP6_MODE_IC_1_ADDR, REG_MP6_MODE_IC_1_BYTE, R26_MP6_MODE_IC_1_Default );
 8000f5c:	88f8      	ldrh	r0, [r7, #6]
 8000f5e:	4b86      	ldr	r3, [pc, #536]	; (8001178 <default_download_IC_1+0x38c>)
 8000f60:	2202      	movs	r2, #2
 8000f62:	f24f 5116 	movw	r1, #62742	; 0xf516
 8000f66:	f001 fc3f 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP7_MODE_IC_1_ADDR, REG_MP7_MODE_IC_1_BYTE, R27_MP7_MODE_IC_1_Default );
 8000f6a:	88f8      	ldrh	r0, [r7, #6]
 8000f6c:	4b83      	ldr	r3, [pc, #524]	; (800117c <default_download_IC_1+0x390>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	f24f 5117 	movw	r1, #62743	; 0xf517
 8000f74:	f001 fc38 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SCLK_SCL_PIN_IC_1_ADDR, REG_SCLK_SCL_PIN_IC_1_BYTE, R28_SCLK_SCL_PIN_IC_1_Default );
 8000f78:	88f8      	ldrh	r0, [r7, #6]
 8000f7a:	4b81      	ldr	r3, [pc, #516]	; (8001180 <default_download_IC_1+0x394>)
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	f24f 7199 	movw	r1, #63385	; 0xf799
 8000f82:	f001 fc31 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MISO_SDA_PIN_IC_1_ADDR, REG_MISO_SDA_PIN_IC_1_BYTE, R29_MISO_SDA_PIN_IC_1_Default );
 8000f86:	88f8      	ldrh	r0, [r7, #6]
 8000f88:	4b7e      	ldr	r3, [pc, #504]	; (8001184 <default_download_IC_1+0x398>)
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	f24f 719a 	movw	r1, #63386	; 0xf79a
 8000f90:	f001 fc2a 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SS_PIN_IC_1_ADDR, REG_SS_PIN_IC_1_BYTE, R30_SS_PIN_IC_1_Default );
 8000f94:	88f8      	ldrh	r0, [r7, #6]
 8000f96:	4b7c      	ldr	r3, [pc, #496]	; (8001188 <default_download_IC_1+0x39c>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	f24f 719b 	movw	r1, #63387	; 0xf79b
 8000f9e:	f001 fc23 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MOSI_ADDR1_PIN_IC_1_ADDR, REG_MOSI_ADDR1_PIN_IC_1_BYTE, R31_MOSI_ADDR1_PIN_IC_1_Default );
 8000fa2:	88f8      	ldrh	r0, [r7, #6]
 8000fa4:	4b79      	ldr	r3, [pc, #484]	; (800118c <default_download_IC_1+0x3a0>)
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	f24f 719c 	movw	r1, #63388	; 0xf79c
 8000fac:	f001 fc1c 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE0_IC_1_ADDR, REG_SOUT_SOURCE0_IC_1_BYTE, R32_SOUT_SOURCE0_IC_1_Default );
 8000fb0:	88f8      	ldrh	r0, [r7, #6]
 8000fb2:	4b77      	ldr	r3, [pc, #476]	; (8001190 <default_download_IC_1+0x3a4>)
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f24f 1180 	movw	r1, #61824	; 0xf180
 8000fba:	f001 fc15 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE1_IC_1_ADDR, REG_SOUT_SOURCE1_IC_1_BYTE, R33_SOUT_SOURCE1_IC_1_Default );
 8000fbe:	88f8      	ldrh	r0, [r7, #6]
 8000fc0:	4b74      	ldr	r3, [pc, #464]	; (8001194 <default_download_IC_1+0x3a8>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	f24f 1181 	movw	r1, #61825	; 0xf181
 8000fc8:	f001 fc0e 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE2_IC_1_ADDR, REG_SOUT_SOURCE2_IC_1_BYTE, R34_SOUT_SOURCE2_IC_1_Default );
 8000fcc:	88f8      	ldrh	r0, [r7, #6]
 8000fce:	4b72      	ldr	r3, [pc, #456]	; (8001198 <default_download_IC_1+0x3ac>)
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	f24f 1182 	movw	r1, #61826	; 0xf182
 8000fd6:	f001 fc07 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE3_IC_1_ADDR, REG_SOUT_SOURCE3_IC_1_BYTE, R35_SOUT_SOURCE3_IC_1_Default );
 8000fda:	88f8      	ldrh	r0, [r7, #6]
 8000fdc:	4b6f      	ldr	r3, [pc, #444]	; (800119c <default_download_IC_1+0x3b0>)
 8000fde:	2202      	movs	r2, #2
 8000fe0:	f24f 1183 	movw	r1, #61827	; 0xf183
 8000fe4:	f001 fc00 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE4_IC_1_ADDR, REG_SOUT_SOURCE4_IC_1_BYTE, R36_SOUT_SOURCE4_IC_1_Default );
 8000fe8:	88f8      	ldrh	r0, [r7, #6]
 8000fea:	4b6d      	ldr	r3, [pc, #436]	; (80011a0 <default_download_IC_1+0x3b4>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	f24f 1184 	movw	r1, #61828	; 0xf184
 8000ff2:	f001 fbf9 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE5_IC_1_ADDR, REG_SOUT_SOURCE5_IC_1_BYTE, R37_SOUT_SOURCE5_IC_1_Default );
 8000ff6:	88f8      	ldrh	r0, [r7, #6]
 8000ff8:	4b6a      	ldr	r3, [pc, #424]	; (80011a4 <default_download_IC_1+0x3b8>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	f24f 1185 	movw	r1, #61829	; 0xf185
 8001000:	f001 fbf2 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE6_IC_1_ADDR, REG_SOUT_SOURCE6_IC_1_BYTE, R38_SOUT_SOURCE6_IC_1_Default );
 8001004:	88f8      	ldrh	r0, [r7, #6]
 8001006:	4b68      	ldr	r3, [pc, #416]	; (80011a8 <default_download_IC_1+0x3bc>)
 8001008:	2202      	movs	r2, #2
 800100a:	f24f 1186 	movw	r1, #61830	; 0xf186
 800100e:	f001 fbeb 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE7_IC_1_ADDR, REG_SOUT_SOURCE7_IC_1_BYTE, R39_SOUT_SOURCE7_IC_1_Default );
 8001012:	88f8      	ldrh	r0, [r7, #6]
 8001014:	4b65      	ldr	r3, [pc, #404]	; (80011ac <default_download_IC_1+0x3c0>)
 8001016:	2202      	movs	r2, #2
 8001018:	f24f 1187 	movw	r1, #61831	; 0xf187
 800101c:	f001 fbe4 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE8_IC_1_ADDR, REG_SOUT_SOURCE8_IC_1_BYTE, R40_SOUT_SOURCE8_IC_1_Default );
 8001020:	88f8      	ldrh	r0, [r7, #6]
 8001022:	4b63      	ldr	r3, [pc, #396]	; (80011b0 <default_download_IC_1+0x3c4>)
 8001024:	2202      	movs	r2, #2
 8001026:	f24f 1188 	movw	r1, #61832	; 0xf188
 800102a:	f001 fbdd 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE9_IC_1_ADDR, REG_SOUT_SOURCE9_IC_1_BYTE, R41_SOUT_SOURCE9_IC_1_Default );
 800102e:	88f8      	ldrh	r0, [r7, #6]
 8001030:	4b60      	ldr	r3, [pc, #384]	; (80011b4 <default_download_IC_1+0x3c8>)
 8001032:	2202      	movs	r2, #2
 8001034:	f24f 1189 	movw	r1, #61833	; 0xf189
 8001038:	f001 fbd6 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE10_IC_1_ADDR, REG_SOUT_SOURCE10_IC_1_BYTE, R42_SOUT_SOURCE10_IC_1_Default );
 800103c:	88f8      	ldrh	r0, [r7, #6]
 800103e:	4b5e      	ldr	r3, [pc, #376]	; (80011b8 <default_download_IC_1+0x3cc>)
 8001040:	2202      	movs	r2, #2
 8001042:	f24f 118a 	movw	r1, #61834	; 0xf18a
 8001046:	f001 fbcf 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE11_IC_1_ADDR, REG_SOUT_SOURCE11_IC_1_BYTE, R43_SOUT_SOURCE11_IC_1_Default );
 800104a:	88f8      	ldrh	r0, [r7, #6]
 800104c:	4b5b      	ldr	r3, [pc, #364]	; (80011bc <default_download_IC_1+0x3d0>)
 800104e:	2202      	movs	r2, #2
 8001050:	f24f 118b 	movw	r1, #61835	; 0xf18b
 8001054:	f001 fbc8 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE12_IC_1_ADDR, REG_SOUT_SOURCE12_IC_1_BYTE, R44_SOUT_SOURCE12_IC_1_Default );
 8001058:	88f8      	ldrh	r0, [r7, #6]
 800105a:	4b59      	ldr	r3, [pc, #356]	; (80011c0 <default_download_IC_1+0x3d4>)
 800105c:	2202      	movs	r2, #2
 800105e:	f24f 118c 	movw	r1, #61836	; 0xf18c
 8001062:	f001 fbc1 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE13_IC_1_ADDR, REG_SOUT_SOURCE13_IC_1_BYTE, R45_SOUT_SOURCE13_IC_1_Default );
 8001066:	88f8      	ldrh	r0, [r7, #6]
 8001068:	4b56      	ldr	r3, [pc, #344]	; (80011c4 <default_download_IC_1+0x3d8>)
 800106a:	2202      	movs	r2, #2
 800106c:	f24f 118d 	movw	r1, #61837	; 0xf18d
 8001070:	f001 fbba 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE14_IC_1_ADDR, REG_SOUT_SOURCE14_IC_1_BYTE, R46_SOUT_SOURCE14_IC_1_Default );
 8001074:	88f8      	ldrh	r0, [r7, #6]
 8001076:	4b54      	ldr	r3, [pc, #336]	; (80011c8 <default_download_IC_1+0x3dc>)
 8001078:	2202      	movs	r2, #2
 800107a:	f24f 118e 	movw	r1, #61838	; 0xf18e
 800107e:	f001 fbb3 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE15_IC_1_ADDR, REG_SOUT_SOURCE15_IC_1_BYTE, R47_SOUT_SOURCE15_IC_1_Default );
 8001082:	88f8      	ldrh	r0, [r7, #6]
 8001084:	4b51      	ldr	r3, [pc, #324]	; (80011cc <default_download_IC_1+0x3e0>)
 8001086:	2202      	movs	r2, #2
 8001088:	f24f 118f 	movw	r1, #61839	; 0xf18f
 800108c:	f001 fbac 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE16_IC_1_ADDR, REG_SOUT_SOURCE16_IC_1_BYTE, R48_SOUT_SOURCE16_IC_1_Default );
 8001090:	88f8      	ldrh	r0, [r7, #6]
 8001092:	4b4f      	ldr	r3, [pc, #316]	; (80011d0 <default_download_IC_1+0x3e4>)
 8001094:	2202      	movs	r2, #2
 8001096:	f24f 1190 	movw	r1, #61840	; 0xf190
 800109a:	f001 fba5 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE17_IC_1_ADDR, REG_SOUT_SOURCE17_IC_1_BYTE, R49_SOUT_SOURCE17_IC_1_Default );
 800109e:	88f8      	ldrh	r0, [r7, #6]
 80010a0:	4b4c      	ldr	r3, [pc, #304]	; (80011d4 <default_download_IC_1+0x3e8>)
 80010a2:	2202      	movs	r2, #2
 80010a4:	f24f 1191 	movw	r1, #61841	; 0xf191
 80010a8:	f001 fb9e 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE18_IC_1_ADDR, REG_SOUT_SOURCE18_IC_1_BYTE, R50_SOUT_SOURCE18_IC_1_Default );
 80010ac:	88f8      	ldrh	r0, [r7, #6]
 80010ae:	4b4a      	ldr	r3, [pc, #296]	; (80011d8 <default_download_IC_1+0x3ec>)
 80010b0:	2202      	movs	r2, #2
 80010b2:	f24f 1192 	movw	r1, #61842	; 0xf192
 80010b6:	f001 fb97 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE19_IC_1_ADDR, REG_SOUT_SOURCE19_IC_1_BYTE, R51_SOUT_SOURCE19_IC_1_Default );
 80010ba:	88f8      	ldrh	r0, [r7, #6]
 80010bc:	4b47      	ldr	r3, [pc, #284]	; (80011dc <default_download_IC_1+0x3f0>)
 80010be:	2202      	movs	r2, #2
 80010c0:	f24f 1193 	movw	r1, #61843	; 0xf193
 80010c4:	f001 fb90 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE20_IC_1_ADDR, REG_SOUT_SOURCE20_IC_1_BYTE, R52_SOUT_SOURCE20_IC_1_Default );
 80010c8:	88f8      	ldrh	r0, [r7, #6]
 80010ca:	4b45      	ldr	r3, [pc, #276]	; (80011e0 <default_download_IC_1+0x3f4>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	f24f 1194 	movw	r1, #61844	; 0xf194
 80010d2:	f001 fb89 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE21_IC_1_ADDR, REG_SOUT_SOURCE21_IC_1_BYTE, R53_SOUT_SOURCE21_IC_1_Default );
 80010d6:	88f8      	ldrh	r0, [r7, #6]
 80010d8:	4b42      	ldr	r3, [pc, #264]	; (80011e4 <default_download_IC_1+0x3f8>)
 80010da:	2202      	movs	r2, #2
 80010dc:	f24f 1195 	movw	r1, #61845	; 0xf195
 80010e0:	f001 fb82 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE22_IC_1_ADDR, REG_SOUT_SOURCE22_IC_1_BYTE, R54_SOUT_SOURCE22_IC_1_Default );
 80010e4:	88f8      	ldrh	r0, [r7, #6]
 80010e6:	4b40      	ldr	r3, [pc, #256]	; (80011e8 <default_download_IC_1+0x3fc>)
 80010e8:	2202      	movs	r2, #2
 80010ea:	f24f 1196 	movw	r1, #61846	; 0xf196
 80010ee:	f001 fb7b 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SOUT_SOURCE23_IC_1_ADDR, REG_SOUT_SOURCE23_IC_1_BYTE, R55_SOUT_SOURCE23_IC_1_Default );
 80010f2:	88f8      	ldrh	r0, [r7, #6]
 80010f4:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <default_download_IC_1+0x400>)
 80010f6:	2202      	movs	r2, #2
 80010f8:	f24f 1197 	movw	r1, #61847	; 0xf197
 80010fc:	f001 fb74 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_0_0_IC_1_ADDR, REG_SERIAL_BYTE_0_0_IC_1_BYTE, R56_SERIAL_BYTE_0_0_IC_1_Default );
 8001100:	88f8      	ldrh	r0, [r7, #6]
 8001102:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <default_download_IC_1+0x404>)
 8001104:	2202      	movs	r2, #2
 8001106:	f44f 4172 	mov.w	r1, #61952	; 0xf200
 800110a:	f001 fb6d 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
 800110e:	e071      	b.n	80011f4 <default_download_IC_1+0x408>
 8001110:	20007118 	.word	0x20007118
 8001114:	20006fa0 	.word	0x20006fa0
 8001118:	20006fa4 	.word	0x20006fa4
 800111c:	2000711c 	.word	0x2000711c
 8001120:	20006fa8 	.word	0x20006fa8
 8001124:	20006fac 	.word	0x20006fac
 8001128:	20007120 	.word	0x20007120
 800112c:	20006fb0 	.word	0x20006fb0
 8001130:	20007124 	.word	0x20007124
 8001134:	20006fb4 	.word	0x20006fb4
 8001138:	20006fb8 	.word	0x20006fb8
 800113c:	20006fbc 	.word	0x20006fbc
 8001140:	20006fc0 	.word	0x20006fc0
 8001144:	20006fc4 	.word	0x20006fc4
 8001148:	20006fc8 	.word	0x20006fc8
 800114c:	20006fcc 	.word	0x20006fcc
 8001150:	20006fd0 	.word	0x20006fd0
 8001154:	20006fd4 	.word	0x20006fd4
 8001158:	20006fd8 	.word	0x20006fd8
 800115c:	20006fdc 	.word	0x20006fdc
 8001160:	20006fe0 	.word	0x20006fe0
 8001164:	20006fe4 	.word	0x20006fe4
 8001168:	20006fe8 	.word	0x20006fe8
 800116c:	20006fec 	.word	0x20006fec
 8001170:	20006ff0 	.word	0x20006ff0
 8001174:	20006ff4 	.word	0x20006ff4
 8001178:	20006ff8 	.word	0x20006ff8
 800117c:	20006ffc 	.word	0x20006ffc
 8001180:	20007000 	.word	0x20007000
 8001184:	20007004 	.word	0x20007004
 8001188:	20007008 	.word	0x20007008
 800118c:	2000700c 	.word	0x2000700c
 8001190:	20007010 	.word	0x20007010
 8001194:	20007014 	.word	0x20007014
 8001198:	20007018 	.word	0x20007018
 800119c:	2000701c 	.word	0x2000701c
 80011a0:	20007020 	.word	0x20007020
 80011a4:	20007024 	.word	0x20007024
 80011a8:	20007028 	.word	0x20007028
 80011ac:	2000702c 	.word	0x2000702c
 80011b0:	20007030 	.word	0x20007030
 80011b4:	20007034 	.word	0x20007034
 80011b8:	20007038 	.word	0x20007038
 80011bc:	2000703c 	.word	0x2000703c
 80011c0:	20007040 	.word	0x20007040
 80011c4:	20007044 	.word	0x20007044
 80011c8:	20007048 	.word	0x20007048
 80011cc:	2000704c 	.word	0x2000704c
 80011d0:	20007050 	.word	0x20007050
 80011d4:	20007054 	.word	0x20007054
 80011d8:	20007058 	.word	0x20007058
 80011dc:	2000705c 	.word	0x2000705c
 80011e0:	20007060 	.word	0x20007060
 80011e4:	20007064 	.word	0x20007064
 80011e8:	20007068 	.word	0x20007068
 80011ec:	2000706c 	.word	0x2000706c
 80011f0:	20007070 	.word	0x20007070
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_1_0_IC_1_ADDR, REG_SERIAL_BYTE_1_0_IC_1_BYTE, R57_SERIAL_BYTE_1_0_IC_1_Default );
 80011f4:	88f8      	ldrh	r0, [r7, #6]
 80011f6:	4b41      	ldr	r3, [pc, #260]	; (80012fc <default_download_IC_1+0x510>)
 80011f8:	2202      	movs	r2, #2
 80011fa:	f24f 2104 	movw	r1, #61956	; 0xf204
 80011fe:	f001 faf3 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_2_0_IC_1_ADDR, REG_SERIAL_BYTE_2_0_IC_1_BYTE, R58_SERIAL_BYTE_2_0_IC_1_Default );
 8001202:	88f8      	ldrh	r0, [r7, #6]
 8001204:	4b3e      	ldr	r3, [pc, #248]	; (8001300 <default_download_IC_1+0x514>)
 8001206:	2202      	movs	r2, #2
 8001208:	f24f 2108 	movw	r1, #61960	; 0xf208
 800120c:	f001 faec 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_3_0_IC_1_ADDR, REG_SERIAL_BYTE_3_0_IC_1_BYTE, R59_SERIAL_BYTE_3_0_IC_1_Default );
 8001210:	88f8      	ldrh	r0, [r7, #6]
 8001212:	4b3c      	ldr	r3, [pc, #240]	; (8001304 <default_download_IC_1+0x518>)
 8001214:	2202      	movs	r2, #2
 8001216:	f24f 210c 	movw	r1, #61964	; 0xf20c
 800121a:	f001 fae5 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_4_0_IC_1_ADDR, REG_SERIAL_BYTE_4_0_IC_1_BYTE, R60_SERIAL_BYTE_4_0_IC_1_Default );
 800121e:	88f8      	ldrh	r0, [r7, #6]
 8001220:	4b39      	ldr	r3, [pc, #228]	; (8001308 <default_download_IC_1+0x51c>)
 8001222:	2202      	movs	r2, #2
 8001224:	f24f 2110 	movw	r1, #61968	; 0xf210
 8001228:	f001 fade 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_5_0_IC_1_ADDR, REG_SERIAL_BYTE_5_0_IC_1_BYTE, R61_SERIAL_BYTE_5_0_IC_1_Default );
 800122c:	88f8      	ldrh	r0, [r7, #6]
 800122e:	4b37      	ldr	r3, [pc, #220]	; (800130c <default_download_IC_1+0x520>)
 8001230:	2202      	movs	r2, #2
 8001232:	f24f 2114 	movw	r1, #61972	; 0xf214
 8001236:	f001 fad7 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_6_0_IC_1_ADDR, REG_SERIAL_BYTE_6_0_IC_1_BYTE, R62_SERIAL_BYTE_6_0_IC_1_Default );
 800123a:	88f8      	ldrh	r0, [r7, #6]
 800123c:	4b34      	ldr	r3, [pc, #208]	; (8001310 <default_download_IC_1+0x524>)
 800123e:	2202      	movs	r2, #2
 8001240:	f24f 2118 	movw	r1, #61976	; 0xf218
 8001244:	f001 fad0 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_SERIAL_BYTE_7_0_IC_1_ADDR, REG_SERIAL_BYTE_7_0_IC_1_BYTE, R63_SERIAL_BYTE_7_0_IC_1_Default );
 8001248:	88f8      	ldrh	r0, [r7, #6]
 800124a:	4b32      	ldr	r3, [pc, #200]	; (8001314 <default_download_IC_1+0x528>)
 800124c:	2202      	movs	r2, #2
 800124e:	f24f 211c 	movw	r1, #61980	; 0xf21c
 8001252:	f001 fac9 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_MP7_MODE1_IC_1_ADDR, REG_MP7_MODE1_IC_1_BYTE, R64_MP7_MODE1_IC_1_Default );
 8001256:	88f8      	ldrh	r0, [r7, #6]
 8001258:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <default_download_IC_1+0x52c>)
 800125a:	2202      	movs	r2, #2
 800125c:	f24f 51c7 	movw	r1, #62919	; 0xf5c7
 8001260:	f001 fac2 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
 8001264:	88f8      	ldrh	r0, [r7, #6]
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <default_download_IC_1+0x530>)
 8001268:	f243 6278 	movw	r2, #13944	; 0x3678
 800126c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001270:	f001 faba 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, PARAM_ADDR_IC_1, PARAM_SIZE_IC_1, Param_Data_IC_1 );
 8001274:	88f8      	ldrh	r0, [r7, #6]
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <default_download_IC_1+0x534>)
 8001278:	f642 4238 	movw	r2, #11320	; 0x2c38
 800127c:	2100      	movs	r1, #0
 800127e:	f001 fab3 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, DM1_DATA_ADDR_IC_1, DM1_DATA_SIZE_IC_1, DM1_DATA_Data_IC_1 );
 8001282:	88f8      	ldrh	r0, [r7, #6]
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <default_download_IC_1+0x538>)
 8001286:	f44f 624f 	mov.w	r2, #3312	; 0xcf0
 800128a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800128e:	f001 faab 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R68_KILL_CORE_IC_1_Default );
 8001292:	88f8      	ldrh	r0, [r7, #6]
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <default_download_IC_1+0x53c>)
 8001296:	2202      	movs	r2, #2
 8001298:	f24f 4103 	movw	r1, #62467	; 0xf403
 800129c:	f001 faa4 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_START_ADDRESS_IC_1_ADDR, REG_START_ADDRESS_IC_1_BYTE, R69_START_ADDRESS_IC_1_Default );
 80012a0:	88f8      	ldrh	r0, [r7, #6]
 80012a2:	4b22      	ldr	r3, [pc, #136]	; (800132c <default_download_IC_1+0x540>)
 80012a4:	2202      	movs	r2, #2
 80012a6:	f24f 4104 	movw	r1, #62468	; 0xf404
 80012aa:	f001 fa9d 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_START_PULSE_IC_1_ADDR, REG_START_PULSE_IC_1_BYTE, R70_START_PULSE_IC_1_Default );
 80012ae:	88f8      	ldrh	r0, [r7, #6]
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <default_download_IC_1+0x544>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	f24f 4101 	movw	r1, #62465	; 0xf401
 80012b8:	f001 fa96 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_START_CORE_IC_1_ADDR, REG_START_CORE_IC_1_BYTE, R71_START_CORE_IC_1_Default );
 80012bc:	88f8      	ldrh	r0, [r7, #6]
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <default_download_IC_1+0x548>)
 80012c0:	2202      	movs	r2, #2
 80012c2:	f24f 4102 	movw	r1, #62466	; 0xf402
 80012c6:	f001 fa8f 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_START_CORE_IC_1_ADDR, REG_START_CORE_IC_1_BYTE, R72_START_CORE_IC_1_Default );
 80012ca:	88f8      	ldrh	r0, [r7, #6]
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <default_download_IC_1+0x54c>)
 80012ce:	2202      	movs	r2, #2
 80012d0:	f24f 4102 	movw	r1, #62466	; 0xf402
 80012d4:	f001 fa88 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( devAddress, R73_START_DELAY_IC_1_SIZE, R73_START_DELAY_IC_1_Default );
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	4a18      	ldr	r2, [pc, #96]	; (800133c <default_download_IC_1+0x550>)
 80012dc:	2102      	movs	r1, #2
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 faa6 	bl	8002830 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( devAddress, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R74_HIBERNATE_IC_1_Default );
 80012e4:	88f8      	ldrh	r0, [r7, #6]
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <default_download_IC_1+0x554>)
 80012e8:	2202      	movs	r2, #2
 80012ea:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 80012ee:	f001 fa7b 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20007074 	.word	0x20007074
 8001300:	20007078 	.word	0x20007078
 8001304:	2000707c 	.word	0x2000707c
 8001308:	20007080 	.word	0x20007080
 800130c:	20007084 	.word	0x20007084
 8001310:	20007088 	.word	0x20007088
 8001314:	2000708c 	.word	0x2000708c
 8001318:	20007090 	.word	0x20007090
 800131c:	20000cf0 	.word	0x20000cf0
 8001320:	20004368 	.word	0x20004368
 8001324:	20000000 	.word	0x20000000
 8001328:	20007128 	.word	0x20007128
 800132c:	2000712c 	.word	0x2000712c
 8001330:	20007094 	.word	0x20007094
 8001334:	20007130 	.word	0x20007130
 8001338:	20007098 	.word	0x20007098
 800133c:	2000709c 	.word	0x2000709c
 8001340:	20007134 	.word	0x20007134

08001344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 800134a:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	  uint16_t k = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
	  uint16_t pote_aux = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
	  uint32_t loud_data[30]; // Fixed loudness values
	  uint32_t boost_data[30]; // Fixed boost loudness values
	  uint32_t comp_data[30]; // Fixed compensation values

	  // Band Address Assign
	  BandAddress[0] = MOD_BAND32_SEL_DCINPALG145X4VALUE_ADDR;
 8001358:	f640 0382 	movw	r3, #2178	; 0x882
 800135c:	f8a7 31e4 	strh.w	r3, [r7, #484]	; 0x1e4
	  BandAddress[1] = MOD_BAND64_SEL_DCINPALG145X5VALUE_ADDR;
 8001360:	f640 0383 	movw	r3, #2179	; 0x883
 8001364:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
	  BandAddress[2] = MOD_BAND128_SEL_DCINPALG145X6VALUE_ADDR;
 8001368:	f640 037a 	movw	r3, #2170	; 0x87a
 800136c:	f8a7 31e8 	strh.w	r3, [r7, #488]	; 0x1e8
	  BandAddress[3] = MOD_BAND256_SEL_DCINPALG145X7VALUE_ADDR;
 8001370:	f640 037b 	movw	r3, #2171	; 0x87b
 8001374:	f8a7 31ea 	strh.w	r3, [r7, #490]	; 0x1ea
	  BandAddress[4] = MOD_BAND512_SEL_DCINPALG145X8VALUE_ADDR;
 8001378:	f640 0372 	movw	r3, #2162	; 0x872
 800137c:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
	  BandAddress[5] = MOD_BAND1K_SEL_DCINPALG145X9VALUE_ADDR;
 8001380:	f640 0373 	movw	r3, #2163	; 0x873
 8001384:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	  BandAddress[6] = MOD_BAND2K_SEL_DCINPALG145X10VALUE_ADDR;
 8001388:	f640 036a 	movw	r3, #2154	; 0x86a
 800138c:	f8a7 31f0 	strh.w	r3, [r7, #496]	; 0x1f0
	  BandAddress[7] = MOD_BAND4K_SEL_DCINPALG145X11VALUE_ADDR;
 8001390:	f640 036b 	movw	r3, #2155	; 0x86b
 8001394:	f8a7 31f2 	strh.w	r3, [r7, #498]	; 0x1f2
	  BandAddress[8] = MOD_BAND8K_SEL_DCINPALG145X12VALUE_ADDR;
 8001398:	f240 73af 	movw	r3, #1967	; 0x7af
 800139c:	f8a7 31f4 	strh.w	r3, [r7, #500]	; 0x1f4
	  BandAddress[9] = MOD_BAND16K_SEL_DCINPALG145X13VALUE_ADDR;
 80013a0:	f640 035c 	movw	r3, #2140	; 0x85c
 80013a4:	f8a7 31f6 	strh.w	r3, [r7, #502]	; 0x1f6
	  //BandAddress[VOL_SUB] = MOD_VOLHP_GAINALGNS145X4GAIN_ADDR; // Subwoofer Volume
	  BandAddress[VOL_ARRAY] = MOD_VOL_GAINALGNS145X1GAIN_ADDR; // General Volume
 80013a8:	f640 0362 	movw	r3, #2146	; 0x862
 80013ac:	f8a7 31fa 	strh.w	r3, [r7, #506]	; 0x1fa
	  BandAddress[LOUD_LOW_ARRAY] = MOD_LOUD_ALG0_LEVEL0_ADDR;
 80013b0:	f240 13d1 	movw	r3, #465	; 0x1d1
 80013b4:	f8a7 31fc 	strh.w	r3, [r7, #508]	; 0x1fc
	  BandAddress[LOUD_HIGH_ARRAY] = MOD_LOUD_ALG0_LEVEL1_ADDR;
 80013b8:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
 80013bc:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
	  BandAddress[LOUD_GRL_ARRAY] = MOD_LOUD_SEL_DCINPALG145X15VALUE_ADDR;
 80013c0:	f640 035e 	movw	r3, #2142	; 0x85e
 80013c4:	f8a7 3200 	strh.w	r3, [r7, #512]	; 0x200

	  // 8.24 FixPoint Volume
	  vol_data[29] = 0x01000000; // 0dB
 80013c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	  vol_data[28] = 0x00CB5918; // -2dB
 80013d0:	4bc2      	ldr	r3, [pc, #776]	; (80016dc <main+0x398>)
 80013d2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	  vol_data[27] = 0x00A1866C; // -4dB
 80013d6:	4bc2      	ldr	r3, [pc, #776]	; (80016e0 <main+0x39c>)
 80013d8:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	  vol_data[26] = 0x00804DCE; // -6dB
 80013dc:	4bc1      	ldr	r3, [pc, #772]	; (80016e4 <main+0x3a0>)
 80013de:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	  vol_data[25] = 0x0065EA5A; // -8dB
 80013e2:	4bc1      	ldr	r3, [pc, #772]	; (80016e8 <main+0x3a4>)
 80013e4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	  vol_data[24] = 0x0050F44E; // -10dB
 80013e8:	4bc0      	ldr	r3, [pc, #768]	; (80016ec <main+0x3a8>)
 80013ea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	  vol_data[23] = 0x00404DE6; // -12dB
 80013ee:	4bc0      	ldr	r3, [pc, #768]	; (80016f0 <main+0x3ac>)
 80013f0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	  vol_data[22] = 0x00331427; // -14dB (-7.2dB)
 80013f4:	4bbf      	ldr	r3, [pc, #764]	; (80016f4 <main+0x3b0>)
 80013f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	  vol_data[21] = 0x002892C2; // -16dB
 80013fa:	4bbf      	ldr	r3, [pc, #764]	; (80016f8 <main+0x3b4>)
 80013fc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	  vol_data[20] = 0x00203A7E; // -18dB
 8001400:	4bbe      	ldr	r3, [pc, #760]	; (80016fc <main+0x3b8>)
 8001402:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	  vol_data[19] = 0x0019999A; // -20dB
 8001406:	4bbe      	ldr	r3, [pc, #760]	; (8001700 <main+0x3bc>)
 8001408:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	  vol_data[18] = 0x001455B6; // -22dB
 800140c:	4bbd      	ldr	r3, [pc, #756]	; (8001704 <main+0x3c0>)
 800140e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	  vol_data[17] = 0x0010270B; // -24dB
 8001412:	4bbd      	ldr	r3, [pc, #756]	; (8001708 <main+0x3c4>)
 8001414:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	  vol_data[16] = 0x000CD495; // -26dB
 8001418:	4bbc      	ldr	r3, [pc, #752]	; (800170c <main+0x3c8>)
 800141a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	  vol_data[15] = 0x000A3109; // -28dB
 800141e:	4bbc      	ldr	r3, [pc, #752]	; (8001710 <main+0x3cc>)
 8001420:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	  vol_data[14] = 0x0008186E; // -30dB
 8001424:	4bbb      	ldr	r3, [pc, #748]	; (8001714 <main+0x3d0>)
 8001426:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	  vol_data[13] = 0x00066E31; // -32dB
 800142a:	4bbb      	ldr	r3, [pc, #748]	; (8001718 <main+0x3d4>)
 800142c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	  vol_data[12] = 0x00051B9D; // -34dB
 8001430:	4bba      	ldr	r3, [pc, #744]	; (800171c <main+0x3d8>)
 8001432:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	  vol_data[11] = 0x00040EAD; // -36dB
 8001436:	4bba      	ldr	r3, [pc, #744]	; (8001720 <main+0x3dc>)
 8001438:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	  vol_data[10] = 0x0003390D; // -38dB
 800143c:	4bb9      	ldr	r3, [pc, #740]	; (8001724 <main+0x3e0>)
 800143e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	  vol_data[9] = 0x00028F5C; // -40dB
 8001442:	4bb9      	ldr	r3, [pc, #740]	; (8001728 <main+0x3e4>)
 8001444:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	  vol_data[8] = 0x00020892; // -42dB
 8001448:	4bb8      	ldr	r3, [pc, #736]	; (800172c <main+0x3e8>)
 800144a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	  vol_data[7] = 0x00019D81; // -44dB
 800144e:	4bb8      	ldr	r3, [pc, #736]	; (8001730 <main+0x3ec>)
 8001450:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  vol_data[6] = 0x00014875; // -46dB
 8001454:	4bb7      	ldr	r3, [pc, #732]	; (8001734 <main+0x3f0>)
 8001456:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	  vol_data[5] = 0x000104E7; // -48dB
 800145a:	4bb7      	ldr	r3, [pc, #732]	; (8001738 <main+0x3f4>)
 800145c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	  vol_data[4] = 0x0000CF3E; // -50dB
 8001460:	f64c 733e 	movw	r3, #53054	; 0xcf3e
 8001464:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	  vol_data[3] = 0x0000A49E; // -52dB
 8001468:	f24a 439e 	movw	r3, #42142	; 0xa49e
 800146c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	  vol_data[2] = 0x000082C3; // -54dB
 8001470:	f248 23c3 	movw	r3, #33475	; 0x82c3
 8001474:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	  vol_data[1] = 0x000067DE; // -56dB
 8001478:	f246 73de 	movw	r3, #26590	; 0x67de
 800147c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	  vol_data[0] = 0x00005281; // -58dB
 8001480:	f245 2381 	movw	r3, #21121	; 0x5281
 8001484:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

	  // 8.24 FixPoint Loudness
	  loud_data[29] = 0x01000000; // 0dB
 8001488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800148c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001490:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001494:	675a      	str	r2, [r3, #116]	; 0x74
	  loud_data[28] = 0x00F1ADF9; // -0.5dB
 8001496:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800149a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800149e:	4aa7      	ldr	r2, [pc, #668]	; (800173c <main+0x3f8>)
 80014a0:	671a      	str	r2, [r3, #112]	; 0x70
	  loud_data[27] = 0x00E42905; // -1dB
 80014a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014aa:	4aa5      	ldr	r2, [pc, #660]	; (8001740 <main+0x3fc>)
 80014ac:	66da      	str	r2, [r3, #108]	; 0x6c
	  loud_data[26] = 0x00D765AC; // -1.5dB
 80014ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014b6:	4aa3      	ldr	r2, [pc, #652]	; (8001744 <main+0x400>)
 80014b8:	669a      	str	r2, [r3, #104]	; 0x68
	  loud_data[25] = 0x00CB5918; // -2dB
 80014ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014c2:	4a86      	ldr	r2, [pc, #536]	; (80016dc <main+0x398>)
 80014c4:	665a      	str	r2, [r3, #100]	; 0x64
	  loud_data[24] = 0x00BFF911; // -2.5dB
 80014c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014ce:	4a9e      	ldr	r2, [pc, #632]	; (8001748 <main+0x404>)
 80014d0:	661a      	str	r2, [r3, #96]	; 0x60
	  loud_data[23] = 0x00B53BEF; // -3dB
 80014d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014da:	4a9c      	ldr	r2, [pc, #624]	; (800174c <main+0x408>)
 80014dc:	65da      	str	r2, [r3, #92]	; 0x5c
	  loud_data[22] = 0x00AB1896; // -3.5dB
 80014de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014e6:	4a9a      	ldr	r2, [pc, #616]	; (8001750 <main+0x40c>)
 80014e8:	659a      	str	r2, [r3, #88]	; 0x58
	  loud_data[21] = 0x00A1866C; // -4dB
 80014ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014f2:	4a7b      	ldr	r2, [pc, #492]	; (80016e0 <main+0x39c>)
 80014f4:	655a      	str	r2, [r3, #84]	; 0x54
	  loud_data[20] = 0x00987D50; // -4.5dB
 80014f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014fe:	4a95      	ldr	r2, [pc, #596]	; (8001754 <main+0x410>)
 8001500:	651a      	str	r2, [r3, #80]	; 0x50
	  loud_data[19] = 0x008FF59A; // -5dB
 8001502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001506:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800150a:	4a93      	ldr	r2, [pc, #588]	; (8001758 <main+0x414>)
 800150c:	64da      	str	r2, [r3, #76]	; 0x4c
	  loud_data[18] = 0x0087E80B; // -5.5dB
 800150e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001512:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001516:	4a91      	ldr	r2, [pc, #580]	; (800175c <main+0x418>)
 8001518:	649a      	str	r2, [r3, #72]	; 0x48
	  loud_data[17] = 0x00804DCE; // -6dB
 800151a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800151e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001522:	4a70      	ldr	r2, [pc, #448]	; (80016e4 <main+0x3a0>)
 8001524:	645a      	str	r2, [r3, #68]	; 0x44
	  loud_data[16] = 0x00792071; // -6.5dB
 8001526:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800152a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800152e:	4a8c      	ldr	r2, [pc, #560]	; (8001760 <main+0x41c>)
 8001530:	641a      	str	r2, [r3, #64]	; 0x40
	  loud_data[15] = 0x007259DB; // -7dB
 8001532:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001536:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800153a:	4a8a      	ldr	r2, [pc, #552]	; (8001764 <main+0x420>)
 800153c:	63da      	str	r2, [r3, #60]	; 0x3c
	  loud_data[14] = 0x006BF44D; // -7.5dB
 800153e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001542:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001546:	4a88      	ldr	r2, [pc, #544]	; (8001768 <main+0x424>)
 8001548:	639a      	str	r2, [r3, #56]	; 0x38
	  loud_data[13] = 0x0065EA5A; // -8dB
 800154a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800154e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001552:	4a65      	ldr	r2, [pc, #404]	; (80016e8 <main+0x3a4>)
 8001554:	635a      	str	r2, [r3, #52]	; 0x34
	  loud_data[12] = 0x006036E1; // -8.5dB
 8001556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800155a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800155e:	4a83      	ldr	r2, [pc, #524]	; (800176c <main+0x428>)
 8001560:	631a      	str	r2, [r3, #48]	; 0x30
	  loud_data[11] = 0x005AD50D; // -9dB
 8001562:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001566:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800156a:	4a81      	ldr	r2, [pc, #516]	; (8001770 <main+0x42c>)
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c
	  loud_data[10] = 0x0055C04C; // -9.5dB
 800156e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001572:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001576:	4a7f      	ldr	r2, [pc, #508]	; (8001774 <main+0x430>)
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
	  loud_data[9] = 0x0050F44E; // -10dB
 800157a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800157e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001582:	4a5a      	ldr	r2, [pc, #360]	; (80016ec <main+0x3a8>)
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
	  loud_data[8] = 0x004C6D01; // -10.5dB
 8001586:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800158a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800158e:	4a7a      	ldr	r2, [pc, #488]	; (8001778 <main+0x434>)
 8001590:	621a      	str	r2, [r3, #32]
	  loud_data[7] = 0x0048268E; // -11dB
 8001592:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001596:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800159a:	4a78      	ldr	r2, [pc, #480]	; (800177c <main+0x438>)
 800159c:	61da      	str	r2, [r3, #28]
	  loud_data[6] = 0x00441D54; // -11.5dB
 800159e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015a6:	4a76      	ldr	r2, [pc, #472]	; (8001780 <main+0x43c>)
 80015a8:	619a      	str	r2, [r3, #24]
	  loud_data[5] = 0x00404DE6; // -12dB
 80015aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015b2:	4a4f      	ldr	r2, [pc, #316]	; (80016f0 <main+0x3ac>)
 80015b4:	615a      	str	r2, [r3, #20]
	  loud_data[4] = 0x003CB509; // -12.5dB
 80015b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015be:	4a71      	ldr	r2, [pc, #452]	; (8001784 <main+0x440>)
 80015c0:	611a      	str	r2, [r3, #16]
	  loud_data[3] = 0x00394FAF; // -13dB
 80015c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015ca:	4a6f      	ldr	r2, [pc, #444]	; (8001788 <main+0x444>)
 80015cc:	60da      	str	r2, [r3, #12]
	  loud_data[2] = 0x00361AF6; // -13.5dB
 80015ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015d6:	4a6d      	ldr	r2, [pc, #436]	; (800178c <main+0x448>)
 80015d8:	609a      	str	r2, [r3, #8]
	  loud_data[1] = 0x00331427; // -14dB
 80015da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015e2:	4a44      	ldr	r2, [pc, #272]	; (80016f4 <main+0x3b0>)
 80015e4:	605a      	str	r2, [r3, #4]
	  loud_data[0] = 0x003038AF; // -14.5dB
 80015e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015ee:	4a68      	ldr	r2, [pc, #416]	; (8001790 <main+0x44c>)
 80015f0:	601a      	str	r2, [r3, #0]

	  // 8.24 Compensation FixPoint
	  comp_data[29] = 0x01000000; // 0dB
 80015f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015fe:	675a      	str	r2, [r3, #116]	; 0x74
	  comp_data[28] = 0x010F2B41; // +0.5dB
 8001600:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001604:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001608:	4a62      	ldr	r2, [pc, #392]	; (8001794 <main+0x450>)
 800160a:	671a      	str	r2, [r3, #112]	; 0x70
	  comp_data[27] = 0x011F3C9A; // +1dB
 800160c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001610:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001614:	4a60      	ldr	r2, [pc, #384]	; (8001798 <main+0x454>)
 8001616:	66da      	str	r2, [r3, #108]	; 0x6c
	  comp_data[26] = 0x013041AF; // +1.5dB
 8001618:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800161c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001620:	4a5e      	ldr	r2, [pc, #376]	; (800179c <main+0x458>)
 8001622:	669a      	str	r2, [r3, #104]	; 0x68
	  comp_data[25] = 0x014248F0; // +2dB
 8001624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001628:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800162c:	4a5c      	ldr	r2, [pc, #368]	; (80017a0 <main+0x45c>)
 800162e:	665a      	str	r2, [r3, #100]	; 0x64
	  comp_data[24] = 0x015561A9; // +2.5dB
 8001630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001634:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001638:	4a5a      	ldr	r2, [pc, #360]	; (80017a4 <main+0x460>)
 800163a:	661a      	str	r2, [r3, #96]	; 0x60
	  comp_data[23] = 0x01699C0F; // +3dB
 800163c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001640:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001644:	4a58      	ldr	r2, [pc, #352]	; (80017a8 <main+0x464>)
 8001646:	65da      	str	r2, [r3, #92]	; 0x5c
	  comp_data[22] = 0x017F094D; // +3.5dB
 8001648:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800164c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001650:	4a56      	ldr	r2, [pc, #344]	; (80017ac <main+0x468>)
 8001652:	659a      	str	r2, [r3, #88]	; 0x58
	  comp_data[21] = 0x0195BB8F; // +4dB
 8001654:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001658:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800165c:	4a54      	ldr	r2, [pc, #336]	; (80017b0 <main+0x46c>)
 800165e:	655a      	str	r2, [r3, #84]	; 0x54
	  comp_data[20] = 0x01ADC61A; // +4.5dB
 8001660:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001664:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001668:	4a52      	ldr	r2, [pc, #328]	; (80017b4 <main+0x470>)
 800166a:	651a      	str	r2, [r3, #80]	; 0x50
	  comp_data[19] = 0x01C73D52; // +5dB
 800166c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001670:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001674:	4a50      	ldr	r2, [pc, #320]	; (80017b8 <main+0x474>)
 8001676:	64da      	str	r2, [r3, #76]	; 0x4c
	  comp_data[18] = 0x01E236D4; // +5.5dB
 8001678:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800167c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001680:	4a4e      	ldr	r2, [pc, #312]	; (80017bc <main+0x478>)
 8001682:	649a      	str	r2, [r3, #72]	; 0x48
	  comp_data[17] = 0x01FEC983; // +6dB
 8001684:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001688:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800168c:	4a4c      	ldr	r2, [pc, #304]	; (80017c0 <main+0x47c>)
 800168e:	645a      	str	r2, [r3, #68]	; 0x44
	  comp_data[16] = 0x021D0D9E; // +6.5dB
 8001690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001694:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001698:	4a4a      	ldr	r2, [pc, #296]	; (80017c4 <main+0x480>)
 800169a:	641a      	str	r2, [r3, #64]	; 0x40
	  comp_data[15] = 0x023D1CD4; // +7dB
 800169c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016a4:	4a48      	ldr	r2, [pc, #288]	; (80017c8 <main+0x484>)
 80016a6:	63da      	str	r2, [r3, #60]	; 0x3c
	  comp_data[14] = 0x025F1259; // +7.5dB
 80016a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016b0:	4a46      	ldr	r2, [pc, #280]	; (80017cc <main+0x488>)
 80016b2:	639a      	str	r2, [r3, #56]	; 0x38
	  comp_data[13] = 0x02830AFD; // +8dB
 80016b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016bc:	4a44      	ldr	r2, [pc, #272]	; (80017d0 <main+0x48c>)
 80016be:	635a      	str	r2, [r3, #52]	; 0x34
	  comp_data[12] = 0x02A92547; // +8.5dB
 80016c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016c8:	4a42      	ldr	r2, [pc, #264]	; (80017d4 <main+0x490>)
 80016ca:	631a      	str	r2, [r3, #48]	; 0x30
	  comp_data[11] = 0x02D1818B; // +9dB
 80016cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016d4:	4a40      	ldr	r2, [pc, #256]	; (80017d8 <main+0x494>)
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80016d8:	e080      	b.n	80017dc <main+0x498>
 80016da:	bf00      	nop
 80016dc:	00cb5918 	.word	0x00cb5918
 80016e0:	00a1866c 	.word	0x00a1866c
 80016e4:	00804dce 	.word	0x00804dce
 80016e8:	0065ea5a 	.word	0x0065ea5a
 80016ec:	0050f44e 	.word	0x0050f44e
 80016f0:	00404de6 	.word	0x00404de6
 80016f4:	00331427 	.word	0x00331427
 80016f8:	002892c2 	.word	0x002892c2
 80016fc:	00203a7e 	.word	0x00203a7e
 8001700:	0019999a 	.word	0x0019999a
 8001704:	001455b6 	.word	0x001455b6
 8001708:	0010270b 	.word	0x0010270b
 800170c:	000cd495 	.word	0x000cd495
 8001710:	000a3109 	.word	0x000a3109
 8001714:	0008186e 	.word	0x0008186e
 8001718:	00066e31 	.word	0x00066e31
 800171c:	00051b9d 	.word	0x00051b9d
 8001720:	00040ead 	.word	0x00040ead
 8001724:	0003390d 	.word	0x0003390d
 8001728:	00028f5c 	.word	0x00028f5c
 800172c:	00020892 	.word	0x00020892
 8001730:	00019d81 	.word	0x00019d81
 8001734:	00014875 	.word	0x00014875
 8001738:	000104e7 	.word	0x000104e7
 800173c:	00f1adf9 	.word	0x00f1adf9
 8001740:	00e42905 	.word	0x00e42905
 8001744:	00d765ac 	.word	0x00d765ac
 8001748:	00bff911 	.word	0x00bff911
 800174c:	00b53bef 	.word	0x00b53bef
 8001750:	00ab1896 	.word	0x00ab1896
 8001754:	00987d50 	.word	0x00987d50
 8001758:	008ff59a 	.word	0x008ff59a
 800175c:	0087e80b 	.word	0x0087e80b
 8001760:	00792071 	.word	0x00792071
 8001764:	007259db 	.word	0x007259db
 8001768:	006bf44d 	.word	0x006bf44d
 800176c:	006036e1 	.word	0x006036e1
 8001770:	005ad50d 	.word	0x005ad50d
 8001774:	0055c04c 	.word	0x0055c04c
 8001778:	004c6d01 	.word	0x004c6d01
 800177c:	0048268e 	.word	0x0048268e
 8001780:	00441d54 	.word	0x00441d54
 8001784:	003cb509 	.word	0x003cb509
 8001788:	00394faf 	.word	0x00394faf
 800178c:	00361af6 	.word	0x00361af6
 8001790:	003038af 	.word	0x003038af
 8001794:	010f2b41 	.word	0x010f2b41
 8001798:	011f3c9a 	.word	0x011f3c9a
 800179c:	013041af 	.word	0x013041af
 80017a0:	014248f0 	.word	0x014248f0
 80017a4:	015561a9 	.word	0x015561a9
 80017a8:	01699c0f 	.word	0x01699c0f
 80017ac:	017f094d 	.word	0x017f094d
 80017b0:	0195bb8f 	.word	0x0195bb8f
 80017b4:	01adc61a 	.word	0x01adc61a
 80017b8:	01c73d52 	.word	0x01c73d52
 80017bc:	01e236d4 	.word	0x01e236d4
 80017c0:	01fec983 	.word	0x01fec983
 80017c4:	021d0d9e 	.word	0x021d0d9e
 80017c8:	023d1cd4 	.word	0x023d1cd4
 80017cc:	025f1259 	.word	0x025f1259
 80017d0:	02830afd 	.word	0x02830afd
 80017d4:	02a92547 	.word	0x02a92547
 80017d8:	02d1818b 	.word	0x02d1818b
	  comp_data[10] = 0x02FC4209; // +9.5dB
 80017dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017e4:	4a7c      	ldr	r2, [pc, #496]	; (80019d8 <main+0x694>)
 80017e6:	629a      	str	r2, [r3, #40]	; 0x28
	  comp_data[9] = 0x03298B07; // +10dB
 80017e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017f0:	4a7a      	ldr	r2, [pc, #488]	; (80019dc <main+0x698>)
 80017f2:	625a      	str	r2, [r3, #36]	; 0x24
	  comp_data[8] = 0x035982F3; // +10.5dB
 80017f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017fc:	4a78      	ldr	r2, [pc, #480]	; (80019e0 <main+0x69c>)
 80017fe:	621a      	str	r2, [r3, #32]
	  comp_data[7] = 0x038C5281; // +11dB
 8001800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001804:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001808:	4a76      	ldr	r2, [pc, #472]	; (80019e4 <main+0x6a0>)
 800180a:	61da      	str	r2, [r3, #28]
	  comp_data[6] = 0x03C224CD; // +11.5dB
 800180c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001810:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001814:	4a74      	ldr	r2, [pc, #464]	; (80019e8 <main+0x6a4>)
 8001816:	619a      	str	r2, [r3, #24]
	  comp_data[5] = 0x03FB2784; // +12dB
 8001818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001820:	4a72      	ldr	r2, [pc, #456]	; (80019ec <main+0x6a8>)
 8001822:	615a      	str	r2, [r3, #20]
	  comp_data[4] = 0x04378B05; // +12.5dB
 8001824:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001828:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800182c:	4a70      	ldr	r2, [pc, #448]	; (80019f0 <main+0x6ac>)
 800182e:	611a      	str	r2, [r3, #16]
	  comp_data[3] = 0x0477828F; // +13dB
 8001830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001834:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001838:	4a6e      	ldr	r2, [pc, #440]	; (80019f4 <main+0x6b0>)
 800183a:	60da      	str	r2, [r3, #12]
	  comp_data[2] = 0x04BB4469; // +13.5dB
 800183c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001840:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001844:	4a6c      	ldr	r2, [pc, #432]	; (80019f8 <main+0x6b4>)
 8001846:	609a      	str	r2, [r3, #8]
	  comp_data[1] = 0x05030A11; // +14dB
 8001848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001850:	4a6a      	ldr	r2, [pc, #424]	; (80019fc <main+0x6b8>)
 8001852:	605a      	str	r2, [r3, #4]
	  comp_data[0] = 0x054F106E; // +14.5dB
 8001854:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001858:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800185c:	4a68      	ldr	r2, [pc, #416]	; (8001a00 <main+0x6bc>)
 800185e:	601a      	str	r2, [r3, #0]

	  // 8.24 FixPoint Bass and Treble Loudness
	  boost_data[29] = 0x02800000; // 2.50
 8001860:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001864:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001868:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
 800186c:	675a      	str	r2, [r3, #116]	; 0x74
	  boost_data[28] = 0x02666666; // 2.40
 800186e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001872:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001876:	4a63      	ldr	r2, [pc, #396]	; (8001a04 <main+0x6c0>)
 8001878:	671a      	str	r2, [r3, #112]	; 0x70
	  boost_data[27] = 0x02570a3c; // 2.34
 800187a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001882:	4a61      	ldr	r2, [pc, #388]	; (8001a08 <main+0x6c4>)
 8001884:	66da      	str	r2, [r3, #108]	; 0x6c
	  boost_data[26] = 0x02451eb8; // 2.27
 8001886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800188e:	4a5f      	ldr	r2, [pc, #380]	; (8001a0c <main+0x6c8>)
 8001890:	669a      	str	r2, [r3, #104]	; 0x68
	  boost_data[25] = 0x02333332; // 2.20
 8001892:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001896:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800189a:	4a5d      	ldr	r2, [pc, #372]	; (8001a10 <main+0x6cc>)
 800189c:	665a      	str	r2, [r3, #100]	; 0x64
	  boost_data[24] = 0x022147ae; // 2.13
 800189e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018a6:	4a5b      	ldr	r2, [pc, #364]	; (8001a14 <main+0x6d0>)
 80018a8:	661a      	str	r2, [r3, #96]	; 0x60
	  boost_data[23] = 0x020f5c28; // 2.06
 80018aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018b2:	4a59      	ldr	r2, [pc, #356]	; (8001a18 <main+0x6d4>)
 80018b4:	65da      	str	r2, [r3, #92]	; 0x5c
	  boost_data[22] = 0x02000000; // 2.00
 80018b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018c2:	659a      	str	r2, [r3, #88]	; 0x58
	  boost_data[21] = 0x01ee147a; // 1.93
 80018c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018cc:	4a53      	ldr	r2, [pc, #332]	; (8001a1c <main+0x6d8>)
 80018ce:	655a      	str	r2, [r3, #84]	; 0x54
	  boost_data[20] = 0x01dc28f4; // 1.86
 80018d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018d8:	4a51      	ldr	r2, [pc, #324]	; (8001a20 <main+0x6dc>)
 80018da:	651a      	str	r2, [r3, #80]	; 0x50
	  boost_data[19] = 0x01ca3d70; // 1.79
 80018dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018e4:	4a4f      	ldr	r2, [pc, #316]	; (8001a24 <main+0x6e0>)
 80018e6:	64da      	str	r2, [r3, #76]	; 0x4c
	  boost_data[18] = 0x01b851ea; // 1.72
 80018e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ec:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018f0:	4a4d      	ldr	r2, [pc, #308]	; (8001a28 <main+0x6e4>)
 80018f2:	649a      	str	r2, [r3, #72]	; 0x48
	  boost_data[17] = 0x01a8f5c2; // 1.66
 80018f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018fc:	4a4b      	ldr	r2, [pc, #300]	; (8001a2c <main+0x6e8>)
 80018fe:	645a      	str	r2, [r3, #68]	; 0x44
	  boost_data[16] = 0x01970a3c; // 1.59
 8001900:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001904:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001908:	4a49      	ldr	r2, [pc, #292]	; (8001a30 <main+0x6ec>)
 800190a:	641a      	str	r2, [r3, #64]	; 0x40
	  boost_data[15] = 0x01851eb8; // 1.52
 800190c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001910:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001914:	4a47      	ldr	r2, [pc, #284]	; (8001a34 <main+0x6f0>)
 8001916:	63da      	str	r2, [r3, #60]	; 0x3c
	  boost_data[14] = 0x01733332; // 1.45
 8001918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001920:	4a45      	ldr	r2, [pc, #276]	; (8001a38 <main+0x6f4>)
 8001922:	639a      	str	r2, [r3, #56]	; 0x38
	  boost_data[13] = 0x016147ae; // 1.38
 8001924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001928:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800192c:	4a43      	ldr	r2, [pc, #268]	; (8001a3c <main+0x6f8>)
 800192e:	635a      	str	r2, [r3, #52]	; 0x34
	  boost_data[12] = 0x0151eb84; // 1.32
 8001930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001934:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001938:	4a41      	ldr	r2, [pc, #260]	; (8001a40 <main+0x6fc>)
 800193a:	631a      	str	r2, [r3, #48]	; 0x30
	  boost_data[11] = 0x01400000; // 1.25
 800193c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001940:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001944:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c
	  boost_data[10] = 0x012e147a; // 1.18
 800194a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800194e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001952:	4a3c      	ldr	r2, [pc, #240]	; (8001a44 <main+0x700>)
 8001954:	629a      	str	r2, [r3, #40]	; 0x28
	  boost_data[9] =  0x011c28f4; // 1.11
 8001956:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800195e:	4a3a      	ldr	r2, [pc, #232]	; (8001a48 <main+0x704>)
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
	  boost_data[8] =  0x010a3d70; // 1.04
 8001962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001966:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800196a:	4a38      	ldr	r2, [pc, #224]	; (8001a4c <main+0x708>)
 800196c:	621a      	str	r2, [r3, #32]
	  boost_data[7] =  0x00fae146; // 0.98
 800196e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001972:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001976:	4a36      	ldr	r2, [pc, #216]	; (8001a50 <main+0x70c>)
 8001978:	61da      	str	r2, [r3, #28]
	  boost_data[6] =  0x00e8f5c2; // 0.91
 800197a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001982:	4a34      	ldr	r2, [pc, #208]	; (8001a54 <main+0x710>)
 8001984:	619a      	str	r2, [r3, #24]
	  boost_data[5] =  0x00d70a3c; // 0.84
 8001986:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800198e:	4a32      	ldr	r2, [pc, #200]	; (8001a58 <main+0x714>)
 8001990:	615a      	str	r2, [r3, #20]
	  boost_data[4] =  0x00c51eb8; // 0.77
 8001992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001996:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800199a:	4a30      	ldr	r2, [pc, #192]	; (8001a5c <main+0x718>)
 800199c:	611a      	str	r2, [r3, #16]
	  boost_data[3] =  0x00b33332; // 0.70
 800199e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019a6:	4a2e      	ldr	r2, [pc, #184]	; (8001a60 <main+0x71c>)
 80019a8:	60da      	str	r2, [r3, #12]
	  boost_data[2] =  0x00a3d70a; // 0.64
 80019aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019b2:	4a2c      	ldr	r2, [pc, #176]	; (8001a64 <main+0x720>)
 80019b4:	609a      	str	r2, [r3, #8]
	  boost_data[1] =  0x0091eb84; // 0.57
 80019b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019be:	4a2a      	ldr	r2, [pc, #168]	; (8001a68 <main+0x724>)
 80019c0:	605a      	str	r2, [r3, #4]
	  boost_data[0] =  0x00800000; // 0.50
 80019c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80019ce:	601a      	str	r2, [r3, #0]

	  for(k=0; k<30; k++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 80019d6:	e098      	b.n	8001b0a <main+0x7c6>
 80019d8:	02fc4209 	.word	0x02fc4209
 80019dc:	03298b07 	.word	0x03298b07
 80019e0:	035982f3 	.word	0x035982f3
 80019e4:	038c5281 	.word	0x038c5281
 80019e8:	03c224cd 	.word	0x03c224cd
 80019ec:	03fb2784 	.word	0x03fb2784
 80019f0:	04378b05 	.word	0x04378b05
 80019f4:	0477828f 	.word	0x0477828f
 80019f8:	04bb4469 	.word	0x04bb4469
 80019fc:	05030a11 	.word	0x05030a11
 8001a00:	054f106e 	.word	0x054f106e
 8001a04:	02666666 	.word	0x02666666
 8001a08:	02570a3c 	.word	0x02570a3c
 8001a0c:	02451eb8 	.word	0x02451eb8
 8001a10:	02333332 	.word	0x02333332
 8001a14:	022147ae 	.word	0x022147ae
 8001a18:	020f5c28 	.word	0x020f5c28
 8001a1c:	01ee147a 	.word	0x01ee147a
 8001a20:	01dc28f4 	.word	0x01dc28f4
 8001a24:	01ca3d70 	.word	0x01ca3d70
 8001a28:	01b851ea 	.word	0x01b851ea
 8001a2c:	01a8f5c2 	.word	0x01a8f5c2
 8001a30:	01970a3c 	.word	0x01970a3c
 8001a34:	01851eb8 	.word	0x01851eb8
 8001a38:	01733332 	.word	0x01733332
 8001a3c:	016147ae 	.word	0x016147ae
 8001a40:	0151eb84 	.word	0x0151eb84
 8001a44:	012e147a 	.word	0x012e147a
 8001a48:	011c28f4 	.word	0x011c28f4
 8001a4c:	010a3d70 	.word	0x010a3d70
 8001a50:	00fae146 	.word	0x00fae146
 8001a54:	00e8f5c2 	.word	0x00e8f5c2
 8001a58:	00d70a3c 	.word	0x00d70a3c
 8001a5c:	00c51eb8 	.word	0x00c51eb8
 8001a60:	00b33332 	.word	0x00b33332
 8001a64:	00a3d70a 	.word	0x00a3d70a
 8001a68:	0091eb84 	.word	0x0091eb84
	  {
		  log_in_table[k] = 4096.0*log10(1.0+(3.0*k/10.0));
 8001a6c:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd03 	bl	800047c <__aeabi_i2d>
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	4bbc      	ldr	r3, [pc, #752]	; (8001d6c <main+0xa28>)
 8001a7c:	f7fe fd68 	bl	8000550 <__aeabi_dmul>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	4bb8      	ldr	r3, [pc, #736]	; (8001d70 <main+0xa2c>)
 8001a8e:	f7fe fe89 	bl	80007a4 <__aeabi_ddiv>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	4bb5      	ldr	r3, [pc, #724]	; (8001d74 <main+0xa30>)
 8001aa0:	f7fe fba0 	bl	80001e4 <__adddf3>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	ec43 2b17 	vmov	d7, r2, r3
 8001aac:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab0:	eef0 0a67 	vmov.f32	s1, s15
 8001ab4:	f004 f948 	bl	8005d48 <log10>
 8001ab8:	ec51 0b10 	vmov	r0, r1, d0
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	4bad      	ldr	r3, [pc, #692]	; (8001d78 <main+0xa34>)
 8001ac2:	f7fe fd45 	bl	8000550 <__aeabi_dmul>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	f8b7 4206 	ldrh.w	r4, [r7, #518]	; 0x206
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f7fe ffed 	bl	8000ab0 <__aeabi_d2uiz>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	4ba8      	ldr	r3, [pc, #672]	; (8001d7c <main+0xa38>)
 8001adc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		  linear_in_table[k] = 4096*k/30;
 8001ae0:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001ae4:	031b      	lsls	r3, r3, #12
 8001ae6:	4aa6      	ldr	r2, [pc, #664]	; (8001d80 <main+0xa3c>)
 8001ae8:	fb82 1203 	smull	r1, r2, r2, r3
 8001aec:	441a      	add	r2, r3
 8001aee:	1112      	asrs	r2, r2, #4
 8001af0:	17db      	asrs	r3, r3, #31
 8001af2:	1ad2      	subs	r2, r2, r3
 8001af4:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001af8:	b291      	uxth	r1, r2
 8001afa:	4aa2      	ldr	r2, [pc, #648]	; (8001d84 <main+0xa40>)
 8001afc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(k=0; k<30; k++)
 8001b00:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001b04:	3301      	adds	r3, #1
 8001b06:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001b0a:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001b0e:	2b1d      	cmp	r3, #29
 8001b10:	d9ac      	bls.n	8001a6c <main+0x728>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b12:	f001 faaf 	bl	8003074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b16:	f000 fb21 	bl	800215c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b1a:	f000 fde5 	bl	80026e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b1e:	f000 fdc3 	bl	80026a8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b22:	f000 fb87 	bl	8002234 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001b26:	f000 fd25 	bl	8002574 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001b2a:	f000 fc99 	bl	8002460 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001b2e:	f000 fcc5 	bl	80024bc <MX_I2C2_Init>
  MX_I2C3_Init();
 8001b32:	f000 fcf1 	bl	8002518 <MX_I2C3_Init>
  MX_TIM4_Init();
 8001b36:	f000 fd6b 	bl	8002610 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Start timer for delay function
  HAL_TIM_Base_Start(&htim4);
 8001b3a:	4893      	ldr	r0, [pc, #588]	; (8001d88 <main+0xa44>)
 8001b3c:	f003 fe28 	bl	8005790 <HAL_TIM_Base_Start>

  // Reset DSPs
  HAL_GPIO_WritePin(nRST_DSP0_GPIO_Port, nRST_DSP0_Pin, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2120      	movs	r1, #32
 8001b44:	4891      	ldr	r0, [pc, #580]	; (8001d8c <main+0xa48>)
 8001b46:	f002 fd19 	bl	800457c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nRST_DSP1_GPIO_Port, nRST_DSP1_Pin, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b50:	488e      	ldr	r0, [pc, #568]	; (8001d8c <main+0xa48>)
 8001b52:	f002 fd13 	bl	800457c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nRST_DSP2_GPIO_Port, nRST_DSP2_Pin, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b5c:	488b      	ldr	r0, [pc, #556]	; (8001d8c <main+0xa48>)
 8001b5e:	f002 fd0d 	bl	800457c <HAL_GPIO_WritePin>

  HAL_Delay(100);
 8001b62:	2064      	movs	r0, #100	; 0x64
 8001b64:	f001 faf8 	bl	8003158 <HAL_Delay>

  // Disable CLK
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_RESET);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b6e:	4888      	ldr	r0, [pc, #544]	; (8001d90 <main+0xa4c>)
 8001b70:	f002 fd04 	bl	800457c <HAL_GPIO_WritePin>

  // Configure DACs
  HAL_GPIO_WritePin(FMT_GPIO_Port, FMT_Pin, GPIO_PIN_RESET); // 16-to-24 bit I2S Format
 8001b74:	2200      	movs	r2, #0
 8001b76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b7a:	4885      	ldr	r0, [pc, #532]	; (8001d90 <main+0xa4c>)
 8001b7c:	f002 fcfe 	bl	800457c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DEMP1_GPIO_Port, DEMP1_Pin, GPIO_PIN_RESET); // De-Emphasis
 8001b80:	2200      	movs	r2, #0
 8001b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b86:	4882      	ldr	r0, [pc, #520]	; (8001d90 <main+0xa4c>)
 8001b88:	f002 fcf8 	bl	800457c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DEMP0_GPIO_Port, DEMP0_Pin, GPIO_PIN_SET);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b92:	487f      	ldr	r0, [pc, #508]	; (8001d90 <main+0xa4c>)
 8001b94:	f002 fcf2 	bl	800457c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUTE_GPIO_Port, MUTE_Pin, GPIO_PIN_RESET); // Mute OFF
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b9e:	487d      	ldr	r0, [pc, #500]	; (8001d94 <main+0xa50>)
 8001ba0:	f002 fcec 	bl	800457c <HAL_GPIO_WritePin>

  // Enable CLK
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001baa:	4879      	ldr	r0, [pc, #484]	; (8001d90 <main+0xa4c>)
 8001bac:	f002 fce6 	bl	800457c <HAL_GPIO_WritePin>

  // Mute DSPs
  HAL_GPIO_WritePin(GPIO_MCU0_GPIO_Port, GPIO_MCU0_Pin, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2110      	movs	r1, #16
 8001bb4:	4875      	ldr	r0, [pc, #468]	; (8001d8c <main+0xa48>)
 8001bb6:	f002 fce1 	bl	800457c <HAL_GPIO_WritePin>

  // Enable DSPs
  HAL_GPIO_WritePin(nRST_DSP0_GPIO_Port, nRST_DSP0_Pin, GPIO_PIN_SET);
 8001bba:	2201      	movs	r2, #1
 8001bbc:	2120      	movs	r1, #32
 8001bbe:	4873      	ldr	r0, [pc, #460]	; (8001d8c <main+0xa48>)
 8001bc0:	f002 fcdc 	bl	800457c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nRST_DSP1_GPIO_Port, nRST_DSP1_Pin, GPIO_PIN_SET);
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bca:	4870      	ldr	r0, [pc, #448]	; (8001d8c <main+0xa48>)
 8001bcc:	f002 fcd6 	bl	800457c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nRST_DSP2_GPIO_Port, nRST_DSP2_Pin, GPIO_PIN_SET);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bd6:	486d      	ldr	r0, [pc, #436]	; (8001d8c <main+0xa48>)
 8001bd8:	f002 fcd0 	bl	800457c <HAL_GPIO_WritePin>

  // DSPs Software Download
  default_download_IC_1(DSP0_ADDR);
 8001bdc:	2070      	movs	r0, #112	; 0x70
 8001bde:	f7ff f905 	bl	8000dec <default_download_IC_1>
  default_download_IC_1(DSP1_ADDR);
 8001be2:	2072      	movs	r0, #114	; 0x72
 8001be4:	f7ff f902 	bl	8000dec <default_download_IC_1>
  default_download_IC_1(DSP2_ADDR);
 8001be8:	2074      	movs	r0, #116	; 0x74
 8001bea:	f7ff f8ff 	bl	8000dec <default_download_IC_1>

  // Configure ADCs
  auxData[0] = 0xFE;
 8001bee:	4b6a      	ldr	r3, [pc, #424]	; (8001d98 <main+0xa54>)
 8001bf0:	22fe      	movs	r2, #254	; 0xfe
 8001bf2:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c2, ADC0_ADDR, 0x00, 1, auxData, 1, 1000);
 8001bf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf8:	9302      	str	r3, [sp, #8]
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	4b66      	ldr	r3, [pc, #408]	; (8001d98 <main+0xa54>)
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2301      	movs	r3, #1
 8001c04:	2200      	movs	r2, #0
 8001c06:	2194      	movs	r1, #148	; 0x94
 8001c08:	4864      	ldr	r0, [pc, #400]	; (8001d9c <main+0xa58>)
 8001c0a:	f002 fe15 	bl	8004838 <HAL_I2C_Mem_Write>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b63      	ldr	r3, [pc, #396]	; (8001da0 <main+0xa5c>)
 8001c14:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c2, ADC1_ADDR, 0x00, 1, auxData, 1, 1000);
 8001c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1a:	9302      	str	r3, [sp, #8]
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	4b5d      	ldr	r3, [pc, #372]	; (8001d98 <main+0xa54>)
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2301      	movs	r3, #1
 8001c26:	2200      	movs	r2, #0
 8001c28:	2196      	movs	r1, #150	; 0x96
 8001c2a:	485c      	ldr	r0, [pc, #368]	; (8001d9c <main+0xa58>)
 8001c2c:	f002 fe04 	bl	8004838 <HAL_I2C_Mem_Write>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b5a      	ldr	r3, [pc, #360]	; (8001da0 <main+0xa5c>)
 8001c36:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c3, ADC2_ADDR, 0x00, 1, auxData, 1, 1000);
 8001c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3c:	9302      	str	r3, [sp, #8]
 8001c3e:	2301      	movs	r3, #1
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	4b55      	ldr	r3, [pc, #340]	; (8001d98 <main+0xa54>)
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	2301      	movs	r3, #1
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2194      	movs	r1, #148	; 0x94
 8001c4c:	4855      	ldr	r0, [pc, #340]	; (8001da4 <main+0xa60>)
 8001c4e:	f002 fdf3 	bl	8004838 <HAL_I2C_Mem_Write>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b52      	ldr	r3, [pc, #328]	; (8001da0 <main+0xa5c>)
 8001c58:	701a      	strb	r2, [r3, #0]
  auxData[0] = 0x47;
 8001c5a:	4b4f      	ldr	r3, [pc, #316]	; (8001d98 <main+0xa54>)
 8001c5c:	2247      	movs	r2, #71	; 0x47
 8001c5e:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c2, ADC0_ADDR, 0x20, 1, auxData, 1, 1000);
 8001c60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c64:	9302      	str	r3, [sp, #8]
 8001c66:	2301      	movs	r3, #1
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	4b4b      	ldr	r3, [pc, #300]	; (8001d98 <main+0xa54>)
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2301      	movs	r3, #1
 8001c70:	2220      	movs	r2, #32
 8001c72:	2194      	movs	r1, #148	; 0x94
 8001c74:	4849      	ldr	r0, [pc, #292]	; (8001d9c <main+0xa58>)
 8001c76:	f002 fddf 	bl	8004838 <HAL_I2C_Mem_Write>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b48      	ldr	r3, [pc, #288]	; (8001da0 <main+0xa5c>)
 8001c80:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c2, ADC1_ADDR, 0x20, 1, auxData, 1, 1000);
 8001c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c86:	9302      	str	r3, [sp, #8]
 8001c88:	2301      	movs	r3, #1
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	4b42      	ldr	r3, [pc, #264]	; (8001d98 <main+0xa54>)
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2301      	movs	r3, #1
 8001c92:	2220      	movs	r2, #32
 8001c94:	2196      	movs	r1, #150	; 0x96
 8001c96:	4841      	ldr	r0, [pc, #260]	; (8001d9c <main+0xa58>)
 8001c98:	f002 fdce 	bl	8004838 <HAL_I2C_Mem_Write>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b3f      	ldr	r3, [pc, #252]	; (8001da0 <main+0xa5c>)
 8001ca2:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c3, ADC2_ADDR, 0x20, 1, auxData, 1, 1000);
 8001ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca8:	9302      	str	r3, [sp, #8]
 8001caa:	2301      	movs	r3, #1
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	4b3a      	ldr	r3, [pc, #232]	; (8001d98 <main+0xa54>)
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	2194      	movs	r1, #148	; 0x94
 8001cb8:	483a      	ldr	r0, [pc, #232]	; (8001da4 <main+0xa60>)
 8001cba:	f002 fdbd 	bl	8004838 <HAL_I2C_Mem_Write>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b37      	ldr	r3, [pc, #220]	; (8001da0 <main+0xa5c>)
 8001cc4:	701a      	strb	r2, [r3, #0]

  // Un-mute DSPs
  HAL_GPIO_WritePin(GPIO_MCU0_GPIO_Port, GPIO_MCU0_Pin, GPIO_PIN_SET);
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	2110      	movs	r1, #16
 8001cca:	4830      	ldr	r0, [pc, #192]	; (8001d8c <main+0xa48>)
 8001ccc:	f002 fc56 	bl	800457c <HAL_GPIO_WritePin>

  // Set flag ADC to update
  for(k=0; k<ADC_POT; k++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001cd6:	e00a      	b.n	8001cee <main+0x9aa>
  {
	  flag[k] = 1;
 8001cd8:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001cdc:	4a32      	ldr	r2, [pc, #200]	; (8001da8 <main+0xa64>)
 8001cde:	2101      	movs	r1, #1
 8001ce0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(k=0; k<ADC_POT; k++)
 8001ce4:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001cee:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001cf2:	2b0e      	cmp	r3, #14
 8001cf4:	d9f0      	bls.n	8001cd8 <main+0x994>
  }

  // DMA Start
  HAL_TIM_Base_Start(&htim2);
 8001cf6:	482d      	ldr	r0, [pc, #180]	; (8001dac <main+0xa68>)
 8001cf8:	f003 fd4a 	bl	8005790 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, value, ADC_POT);
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	492c      	ldr	r1, [pc, #176]	; (8001db0 <main+0xa6c>)
 8001d00:	482c      	ldr	r0, [pc, #176]	; (8001db4 <main+0xa70>)
 8001d02:	f001 fa91 	bl	8003228 <HAL_ADC_Start_DMA>

  HAL_Delay(100);
 8001d06:	2064      	movs	r0, #100	; 0x64
 8001d08:	f001 fa26 	bl	8003158 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
 	  data_SafeLoad[2] = 0x00;
 8001d0c:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <main+0xa74>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	709a      	strb	r2, [r3, #2]
	  data_SafeLoad[1] = 0x00;
 8001d12:	4b29      	ldr	r3, [pc, #164]	; (8001db8 <main+0xa74>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	705a      	strb	r2, [r3, #1]
	  data_SafeLoad[0] = 0x00;
 8001d18:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <main+0xa74>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]

	  address_SafeLoad[1] = 0x00;
 8001d1e:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <main+0xa78>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	705a      	strb	r2, [r3, #1]
	  address_SafeLoad[0] = 0x00;
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <main+0xa78>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]

	  num_SafeLoad_Lower[3] = 0x01;
 8001d2a:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <main+0xa7c>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	70da      	strb	r2, [r3, #3]
	  num_SafeLoad_Lower[2] = 0x00;
 8001d30:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <main+0xa7c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	709a      	strb	r2, [r3, #2]
	  num_SafeLoad_Lower[1] = 0x00;
 8001d36:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <main+0xa7c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	705a      	strb	r2, [r3, #1]
	  num_SafeLoad_Lower[0] = 0x00;
 8001d3c:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <main+0xa7c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]

	  num_SafeLoad_Upper[3] = 0x00;
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <main+0xa80>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	70da      	strb	r2, [r3, #3]
	  num_SafeLoad_Upper[2] = 0x00;
 8001d48:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <main+0xa80>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	709a      	strb	r2, [r3, #2]
	  num_SafeLoad_Upper[1] = 0x00;
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <main+0xa80>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	705a      	strb	r2, [r3, #1]
	  num_SafeLoad_Upper[0] = 0x00;
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <main+0xa80>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]

	  if(update == 1)
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <main+0xa84>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d1d4      	bne.n	8001d0c <main+0x9c8>
	  {
		  for(k=0; k<10; k++) // Filters 32Hz - 16KHz
 8001d62:	2300      	movs	r3, #0
 8001d64:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001d68:	e06a      	b.n	8001e40 <main+0xafc>
 8001d6a:	bf00      	nop
 8001d6c:	40080000 	.word	0x40080000
 8001d70:	40240000 	.word	0x40240000
 8001d74:	3ff00000 	.word	0x3ff00000
 8001d78:	40b00000 	.word	0x40b00000
 8001d7c:	200073d0 	.word	0x200073d0
 8001d80:	88888889 	.word	0x88888889
 8001d84:	2000740c 	.word	0x2000740c
 8001d88:	20007324 	.word	0x20007324
 8001d8c:	40020400 	.word	0x40020400
 8001d90:	40020800 	.word	0x40020800
 8001d94:	40020000 	.word	0x40020000
 8001d98:	20007370 	.word	0x20007370
 8001d9c:	20007234 	.word	0x20007234
 8001da0:	2000736c 	.word	0x2000736c
 8001da4:	20007288 	.word	0x20007288
 8001da8:	20007448 	.word	0x20007448
 8001dac:	200072dc 	.word	0x200072dc
 8001db0:	20007374 	.word	0x20007374
 8001db4:	20007138 	.word	0x20007138
 8001db8:	20007468 	.word	0x20007468
 8001dbc:	2000746c 	.word	0x2000746c
 8001dc0:	20007470 	.word	0x20007470
 8001dc4:	20007474 	.word	0x20007474
 8001dc8:	20007466 	.word	0x20007466
		  {
			  if(flag[k] == 1)
 8001dcc:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001dd0:	4aca      	ldr	r2, [pc, #808]	; (80020fc <main+0xdb8>)
 8001dd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d12d      	bne.n	8001e36 <main+0xaf2>
			  {
				  flag[k] = 0;
 8001dda:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001dde:	4ac7      	ldr	r2, [pc, #796]	; (80020fc <main+0xdb8>)
 8001de0:	2100      	movs	r1, #0
 8001de2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  data_SafeLoad[3] = 29 - pote[k];
 8001de6:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001dea:	4ac5      	ldr	r2, [pc, #788]	; (8002100 <main+0xdbc>)
 8001dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	f1c3 031d 	rsb	r3, r3, #29
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4bc2      	ldr	r3, [pc, #776]	; (8002104 <main+0xdc0>)
 8001dfa:	70da      	strb	r2, [r3, #3]
				  address_SafeLoad[3] = 0xFF & (BandAddress[k]);
 8001dfc:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e06:	443b      	add	r3, r7
 8001e08:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4bbe      	ldr	r3, [pc, #760]	; (8002108 <main+0xdc4>)
 8001e10:	70da      	strb	r2, [r3, #3]
				  address_SafeLoad[2] = 0xFF & ((BandAddress[k])>>8);
 8001e12:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e1c:	443b      	add	r3, r7
 8001e1e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001e22:	0a1b      	lsrs	r3, r3, #8
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	4bb7      	ldr	r3, [pc, #732]	; (8002108 <main+0xdc4>)
 8001e2a:	709a      	strb	r2, [r3, #2]
				  Safeload_Write();
 8001e2c:	f000 fe5a 	bl	8002ae4 <Safeload_Write>
				  delay_us(100);
 8001e30:	2064      	movs	r0, #100	; 0x64
 8001e32:	f000 fe3d 	bl	8002ab0 <delay_us>
		  for(k=0; k<10; k++) // Filters 32Hz - 16KHz
 8001e36:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001e40:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001e44:	2b09      	cmp	r3, #9
 8001e46:	d9c1      	bls.n	8001dcc <main+0xa88>
			  }

		  }

		  if(flag[VOL_ARRAY] == 1) // Volume General
 8001e48:	4bac      	ldr	r3, [pc, #688]	; (80020fc <main+0xdb8>)
 8001e4a:	8adb      	ldrh	r3, [r3, #22]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d148      	bne.n	8001ee2 <main+0xb9e>
		  {
			  flag[VOL_ARRAY] = 0;
 8001e50:	4baa      	ldr	r3, [pc, #680]	; (80020fc <main+0xdb8>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	82da      	strh	r2, [r3, #22]
			  pote_aux = 29 - pote[VOL_ARRAY];
 8001e56:	4baa      	ldr	r3, [pc, #680]	; (8002100 <main+0xdbc>)
 8001e58:	8adb      	ldrh	r3, [r3, #22]
 8001e5a:	f1c3 031d 	rsb	r3, r3, #29
 8001e5e:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

			  data_SafeLoad[3] = 0xFF & (vol_data[pote_aux]);
 8001e62:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e6c:	443b      	add	r3, r7
 8001e6e:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4ba3      	ldr	r3, [pc, #652]	; (8002104 <main+0xdc0>)
 8001e76:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((vol_data[pote_aux])>>8);
 8001e78:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e82:	443b      	add	r3, r7
 8001e84:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	4b9d      	ldr	r3, [pc, #628]	; (8002104 <main+0xdc0>)
 8001e8e:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((vol_data[pote_aux])>>16);
 8001e90:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e9a:	443b      	add	r3, r7
 8001e9c:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001ea0:	0c1b      	lsrs	r3, r3, #16
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b97      	ldr	r3, [pc, #604]	; (8002104 <main+0xdc0>)
 8001ea6:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((vol_data[pote_aux])>>24);
 8001ea8:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001eb2:	443b      	add	r3, r7
 8001eb4:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001eb8:	0e1b      	lsrs	r3, r3, #24
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	4b91      	ldr	r3, [pc, #580]	; (8002104 <main+0xdc0>)
 8001ebe:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[VOL_ARRAY]);
 8001ec0:	f8b7 31fa 	ldrh.w	r3, [r7, #506]	; 0x1fa
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4b90      	ldr	r3, [pc, #576]	; (8002108 <main+0xdc4>)
 8001ec8:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[VOL_ARRAY])>>8);
 8001eca:	f8b7 31fa 	ldrh.w	r3, [r7, #506]	; 0x1fa
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	4b8c      	ldr	r3, [pc, #560]	; (8002108 <main+0xdc4>)
 8001ed6:	709a      	strb	r2, [r3, #2]
			  Safeload_Write();
 8001ed8:	f000 fe04 	bl	8002ae4 <Safeload_Write>
			  delay_us(100);
 8001edc:	2064      	movs	r0, #100	; 0x64
 8001ede:	f000 fde7 	bl	8002ab0 <delay_us>
//			  SIGMA_WRITE_REGISTER_BLOCK(DSP2_ADDR, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
//			  SIGMA_WRITE_REGISTER_BLOCK(DSP2_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_ADDR, 4, num_SafeLoad);
//			  delay_us(100);
//		  }

		  if(flag[LOUD_LOW_ARRAY] == 1) // Loudness Low Side
 8001ee2:	4b86      	ldr	r3, [pc, #536]	; (80020fc <main+0xdb8>)
 8001ee4:	8b1b      	ldrh	r3, [r3, #24]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d148      	bne.n	8001f7c <main+0xc38>
		  {
			  flag[LOUD_LOW_ARRAY] = 0;
 8001eea:	4b84      	ldr	r3, [pc, #528]	; (80020fc <main+0xdb8>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	831a      	strh	r2, [r3, #24]
			  pote_aux = 29 - pote[LOUD_LOW_ARRAY];
 8001ef0:	4b83      	ldr	r3, [pc, #524]	; (8002100 <main+0xdbc>)
 8001ef2:	8b1b      	ldrh	r3, [r3, #24]
 8001ef4:	f1c3 031d 	rsb	r3, r3, #29
 8001ef8:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

			  data_SafeLoad[3] = 0xFF & (boost_data[pote_aux]);
 8001efc:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8001f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f04:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b7d      	ldr	r3, [pc, #500]	; (8002104 <main+0xdc0>)
 8001f10:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((boost_data[pote_aux])>>8);
 8001f12:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8001f16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4b77      	ldr	r3, [pc, #476]	; (8002104 <main+0xdc0>)
 8001f28:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((boost_data[pote_aux])>>16);
 8001f2a:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8001f2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f32:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4b71      	ldr	r3, [pc, #452]	; (8002104 <main+0xdc0>)
 8001f40:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((boost_data[pote_aux])>>24);
 8001f42:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8001f46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f52:	0e1b      	lsrs	r3, r3, #24
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4b6b      	ldr	r3, [pc, #428]	; (8002104 <main+0xdc0>)
 8001f58:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_LOW_ARRAY]);
 8001f5a:	f8b7 31fc 	ldrh.w	r3, [r7, #508]	; 0x1fc
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b69      	ldr	r3, [pc, #420]	; (8002108 <main+0xdc4>)
 8001f62:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_LOW_ARRAY])>>8);
 8001f64:	f8b7 31fc 	ldrh.w	r3, [r7, #508]	; 0x1fc
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4b66      	ldr	r3, [pc, #408]	; (8002108 <main+0xdc4>)
 8001f70:	709a      	strb	r2, [r3, #2]
			  Safeload_Write();
 8001f72:	f000 fdb7 	bl	8002ae4 <Safeload_Write>
			  delay_us(100);
 8001f76:	2064      	movs	r0, #100	; 0x64
 8001f78:	f000 fd9a 	bl	8002ab0 <delay_us>
		  }

		  if(flag[LOUD_HIGH_ARRAY] == 1) // Loudness High Side
 8001f7c:	4b5f      	ldr	r3, [pc, #380]	; (80020fc <main+0xdb8>)
 8001f7e:	8b5b      	ldrh	r3, [r3, #26]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d148      	bne.n	8002016 <main+0xcd2>
		  {
			  flag[LOUD_HIGH_ARRAY] = 0;
 8001f84:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <main+0xdb8>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	835a      	strh	r2, [r3, #26]
			  pote_aux = 29 - pote[LOUD_HIGH_ARRAY];
 8001f8a:	4b5d      	ldr	r3, [pc, #372]	; (8002100 <main+0xdbc>)
 8001f8c:	8b5b      	ldrh	r3, [r3, #26]
 8001f8e:	f1c3 031d 	rsb	r3, r3, #29
 8001f92:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

			  data_SafeLoad[3] = 0xFF & (boost_data[pote_aux]);
 8001f96:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8001f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	4b56      	ldr	r3, [pc, #344]	; (8002104 <main+0xdc0>)
 8001faa:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((boost_data[pote_aux])>>8);
 8001fac:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8001fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	4b50      	ldr	r3, [pc, #320]	; (8002104 <main+0xdc0>)
 8001fc2:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((boost_data[pote_aux])>>16);
 8001fc4:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8001fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fcc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd4:	0c1b      	lsrs	r3, r3, #16
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	4b4a      	ldr	r3, [pc, #296]	; (8002104 <main+0xdc0>)
 8001fda:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((boost_data[pote_aux])>>24);
 8001fdc:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8001fe0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fec:	0e1b      	lsrs	r3, r3, #24
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	4b44      	ldr	r3, [pc, #272]	; (8002104 <main+0xdc0>)
 8001ff2:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_HIGH_ARRAY]);
 8001ff4:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4b43      	ldr	r3, [pc, #268]	; (8002108 <main+0xdc4>)
 8001ffc:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_HIGH_ARRAY])>>8);
 8001ffe:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	b29b      	uxth	r3, r3
 8002006:	b2da      	uxtb	r2, r3
 8002008:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <main+0xdc4>)
 800200a:	709a      	strb	r2, [r3, #2]
			  Safeload_Write();
 800200c:	f000 fd6a 	bl	8002ae4 <Safeload_Write>
			  delay_us(100);
 8002010:	2064      	movs	r0, #100	; 0x64
 8002012:	f000 fd4d 	bl	8002ab0 <delay_us>
		  }

		  if(flag[LOUD_GRL_ARRAY] == 1) // Loudness General
 8002016:	4b39      	ldr	r3, [pc, #228]	; (80020fc <main+0xdb8>)
 8002018:	8b9b      	ldrh	r3, [r3, #28]
 800201a:	2b01      	cmp	r3, #1
 800201c:	f040 808b 	bne.w	8002136 <main+0xdf2>
		  {
			  flag[LOUD_GRL_ARRAY] = 0;
 8002020:	4b36      	ldr	r3, [pc, #216]	; (80020fc <main+0xdb8>)
 8002022:	2200      	movs	r2, #0
 8002024:	839a      	strh	r2, [r3, #28]
			  pote_aux = pote[LOUD_GRL_ARRAY];
 8002026:	4b36      	ldr	r3, [pc, #216]	; (8002100 <main+0xdbc>)
 8002028:	8b9b      	ldrh	r3, [r3, #28]
 800202a:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

			  data_SafeLoad[3] = 0xFF & (loud_data[pote_aux]);
 800202e:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002036:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800203a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	4b30      	ldr	r3, [pc, #192]	; (8002104 <main+0xdc0>)
 8002042:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((loud_data[pote_aux])>>8);
 8002044:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	b2da      	uxtb	r2, r3
 8002058:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <main+0xdc0>)
 800205a:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((loud_data[pote_aux])>>16);
 800205c:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002060:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002064:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b24      	ldr	r3, [pc, #144]	; (8002104 <main+0xdc0>)
 8002072:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((loud_data[pote_aux])>>24);
 8002074:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002078:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800207c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002084:	0e1b      	lsrs	r3, r3, #24
 8002086:	b2da      	uxtb	r2, r3
 8002088:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <main+0xdc0>)
 800208a:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_GRL_ARRAY]);
 800208c:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <main+0xdc4>)
 8002094:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_GRL_ARRAY])>>8);
 8002096:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	b29b      	uxth	r3, r3
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <main+0xdc4>)
 80020a2:	709a      	strb	r2, [r3, #2]
			  Safeload_Write();
 80020a4:	f000 fd1e 	bl	8002ae4 <Safeload_Write>
			  delay_us(100);
 80020a8:	2064      	movs	r0, #100	; 0x64
 80020aa:	f000 fd01 	bl	8002ab0 <delay_us>

			  data_SafeLoad[3] = 0xFF & (comp_data[pote_aux]);
 80020ae:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 80020b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	4b10      	ldr	r3, [pc, #64]	; (8002104 <main+0xdc0>)
 80020c2:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((comp_data[pote_aux])>>8);
 80020c4:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 80020c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <main+0xdc0>)
 80020da:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((comp_data[pote_aux])>>16);
 80020dc:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 80020e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ec:	0c1b      	lsrs	r3, r3, #16
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <main+0xdc0>)
 80020f2:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((comp_data[pote_aux])>>24);
 80020f4:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 80020f8:	e008      	b.n	800210c <main+0xdc8>
 80020fa:	bf00      	nop
 80020fc:	20007448 	.word	0x20007448
 8002100:	200073b0 	.word	0x200073b0
 8002104:	20007468 	.word	0x20007468
 8002108:	2000746c 	.word	0x2000746c
 800210c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002110:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002118:	0e1b      	lsrs	r3, r3, #24
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <main+0xe04>)
 800211e:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (MOD_LOUD_COMP_GAINALGNS145X2GAIN_ADDR);
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <main+0xe08>)
 8002122:	2269      	movs	r2, #105	; 0x69
 8002124:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((MOD_LOUD_COMP_GAINALGNS145X2GAIN_ADDR)>>8);
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <main+0xe08>)
 8002128:	2208      	movs	r2, #8
 800212a:	709a      	strb	r2, [r3, #2]
			  Safeload_Write();
 800212c:	f000 fcda 	bl	8002ae4 <Safeload_Write>
			  delay_us(100);
 8002130:	2064      	movs	r0, #100	; 0x64
 8002132:	f000 fcbd 	bl	8002ab0 <delay_us>
		  }

		  update = 0;
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <main+0xe0c>)
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_DMA(&hadc1, value, ADC_POT);
 800213c:	220f      	movs	r2, #15
 800213e:	4905      	ldr	r1, [pc, #20]	; (8002154 <main+0xe10>)
 8002140:	4805      	ldr	r0, [pc, #20]	; (8002158 <main+0xe14>)
 8002142:	f001 f871 	bl	8003228 <HAL_ADC_Start_DMA>
 	  data_SafeLoad[2] = 0x00;
 8002146:	e5e1      	b.n	8001d0c <main+0x9c8>
 8002148:	20007468 	.word	0x20007468
 800214c:	2000746c 	.word	0x2000746c
 8002150:	20007466 	.word	0x20007466
 8002154:	20007374 	.word	0x20007374
 8002158:	20007138 	.word	0x20007138

0800215c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b094      	sub	sp, #80	; 0x50
 8002160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002162:	f107 0320 	add.w	r3, r7, #32
 8002166:	2230      	movs	r2, #48	; 0x30
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f003 fdba 	bl	8005ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002180:	2300      	movs	r3, #0
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	4b29      	ldr	r3, [pc, #164]	; (800222c <SystemClock_Config+0xd0>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	4a28      	ldr	r2, [pc, #160]	; (800222c <SystemClock_Config+0xd0>)
 800218a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218e:	6413      	str	r3, [r2, #64]	; 0x40
 8002190:	4b26      	ldr	r3, [pc, #152]	; (800222c <SystemClock_Config+0xd0>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800219c:	2300      	movs	r3, #0
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	4b23      	ldr	r3, [pc, #140]	; (8002230 <SystemClock_Config+0xd4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021a8:	4a21      	ldr	r2, [pc, #132]	; (8002230 <SystemClock_Config+0xd4>)
 80021aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	4b1f      	ldr	r3, [pc, #124]	; (8002230 <SystemClock_Config+0xd4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021bc:	2302      	movs	r3, #2
 80021be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021c0:	2301      	movs	r3, #1
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021c4:	2310      	movs	r3, #16
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c8:	2302      	movs	r3, #2
 80021ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021cc:	2300      	movs	r3, #0
 80021ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021d0:	2308      	movs	r3, #8
 80021d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80021d4:	2350      	movs	r3, #80	; 0x50
 80021d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021d8:	2302      	movs	r3, #2
 80021da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021dc:	2304      	movs	r3, #4
 80021de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021e0:	f107 0320 	add.w	r3, r7, #32
 80021e4:	4618      	mov	r0, r3
 80021e6:	f002 fe3f 	bl	8004e68 <HAL_RCC_OscConfig>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80021f0:	f000 fcd8 	bl	8002ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021f4:	230f      	movs	r3, #15
 80021f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021f8:	2302      	movs	r3, #2
 80021fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002204:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800220c:	f107 030c 	add.w	r3, r7, #12
 8002210:	2102      	movs	r1, #2
 8002212:	4618      	mov	r0, r3
 8002214:	f003 f8a0 	bl	8005358 <HAL_RCC_ClockConfig>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800221e:	f000 fcc1 	bl	8002ba4 <Error_Handler>
  }
}
 8002222:	bf00      	nop
 8002224:	3750      	adds	r7, #80	; 0x50
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023800 	.word	0x40023800
 8002230:	40007000 	.word	0x40007000

08002234 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800223a:	463b      	mov	r3, r7
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002246:	4b84      	ldr	r3, [pc, #528]	; (8002458 <MX_ADC1_Init+0x224>)
 8002248:	4a84      	ldr	r2, [pc, #528]	; (800245c <MX_ADC1_Init+0x228>)
 800224a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800224c:	4b82      	ldr	r3, [pc, #520]	; (8002458 <MX_ADC1_Init+0x224>)
 800224e:	2200      	movs	r2, #0
 8002250:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002252:	4b81      	ldr	r3, [pc, #516]	; (8002458 <MX_ADC1_Init+0x224>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002258:	4b7f      	ldr	r3, [pc, #508]	; (8002458 <MX_ADC1_Init+0x224>)
 800225a:	2201      	movs	r2, #1
 800225c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800225e:	4b7e      	ldr	r3, [pc, #504]	; (8002458 <MX_ADC1_Init+0x224>)
 8002260:	2200      	movs	r2, #0
 8002262:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002264:	4b7c      	ldr	r3, [pc, #496]	; (8002458 <MX_ADC1_Init+0x224>)
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800226c:	4b7a      	ldr	r3, [pc, #488]	; (8002458 <MX_ADC1_Init+0x224>)
 800226e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002274:	4b78      	ldr	r3, [pc, #480]	; (8002458 <MX_ADC1_Init+0x224>)
 8002276:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800227c:	4b76      	ldr	r3, [pc, #472]	; (8002458 <MX_ADC1_Init+0x224>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 15;
 8002282:	4b75      	ldr	r3, [pc, #468]	; (8002458 <MX_ADC1_Init+0x224>)
 8002284:	220f      	movs	r2, #15
 8002286:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002288:	4b73      	ldr	r3, [pc, #460]	; (8002458 <MX_ADC1_Init+0x224>)
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002290:	4b71      	ldr	r3, [pc, #452]	; (8002458 <MX_ADC1_Init+0x224>)
 8002292:	2200      	movs	r2, #0
 8002294:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002296:	4870      	ldr	r0, [pc, #448]	; (8002458 <MX_ADC1_Init+0x224>)
 8002298:	f000 ff82 	bl	80031a0 <HAL_ADC_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80022a2:	f000 fc7f 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80022aa:	2301      	movs	r3, #1
 80022ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80022ae:	2304      	movs	r3, #4
 80022b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022b2:	463b      	mov	r3, r7
 80022b4:	4619      	mov	r1, r3
 80022b6:	4868      	ldr	r0, [pc, #416]	; (8002458 <MX_ADC1_Init+0x224>)
 80022b8:	f001 f8ba 	bl	8003430 <HAL_ADC_ConfigChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80022c2:	f000 fc6f 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80022c6:	2301      	movs	r3, #1
 80022c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80022ca:	2302      	movs	r3, #2
 80022cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ce:	463b      	mov	r3, r7
 80022d0:	4619      	mov	r1, r3
 80022d2:	4861      	ldr	r0, [pc, #388]	; (8002458 <MX_ADC1_Init+0x224>)
 80022d4:	f001 f8ac 	bl	8003430 <HAL_ADC_ConfigChannel>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80022de:	f000 fc61 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80022e2:	2302      	movs	r3, #2
 80022e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80022e6:	2303      	movs	r3, #3
 80022e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ea:	463b      	mov	r3, r7
 80022ec:	4619      	mov	r1, r3
 80022ee:	485a      	ldr	r0, [pc, #360]	; (8002458 <MX_ADC1_Init+0x224>)
 80022f0:	f001 f89e 	bl	8003430 <HAL_ADC_ConfigChannel>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80022fa:	f000 fc53 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80022fe:	2303      	movs	r3, #3
 8002300:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002302:	2304      	movs	r3, #4
 8002304:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002306:	463b      	mov	r3, r7
 8002308:	4619      	mov	r1, r3
 800230a:	4853      	ldr	r0, [pc, #332]	; (8002458 <MX_ADC1_Init+0x224>)
 800230c:	f001 f890 	bl	8003430 <HAL_ADC_ConfigChannel>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8002316:	f000 fc45 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800231a:	2304      	movs	r3, #4
 800231c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800231e:	2305      	movs	r3, #5
 8002320:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002322:	463b      	mov	r3, r7
 8002324:	4619      	mov	r1, r3
 8002326:	484c      	ldr	r0, [pc, #304]	; (8002458 <MX_ADC1_Init+0x224>)
 8002328:	f001 f882 	bl	8003430 <HAL_ADC_ConfigChannel>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8002332:	f000 fc37 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002336:	2305      	movs	r3, #5
 8002338:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800233a:	2306      	movs	r3, #6
 800233c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800233e:	463b      	mov	r3, r7
 8002340:	4619      	mov	r1, r3
 8002342:	4845      	ldr	r0, [pc, #276]	; (8002458 <MX_ADC1_Init+0x224>)
 8002344:	f001 f874 	bl	8003430 <HAL_ADC_ConfigChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 800234e:	f000 fc29 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002352:	2306      	movs	r3, #6
 8002354:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002356:	2307      	movs	r3, #7
 8002358:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800235a:	463b      	mov	r3, r7
 800235c:	4619      	mov	r1, r3
 800235e:	483e      	ldr	r0, [pc, #248]	; (8002458 <MX_ADC1_Init+0x224>)
 8002360:	f001 f866 	bl	8003430 <HAL_ADC_ConfigChannel>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 800236a:	f000 fc1b 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800236e:	2307      	movs	r3, #7
 8002370:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002372:	2308      	movs	r3, #8
 8002374:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002376:	463b      	mov	r3, r7
 8002378:	4619      	mov	r1, r3
 800237a:	4837      	ldr	r0, [pc, #220]	; (8002458 <MX_ADC1_Init+0x224>)
 800237c:	f001 f858 	bl	8003430 <HAL_ADC_ConfigChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8002386:	f000 fc0d 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800238a:	2308      	movs	r3, #8
 800238c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800238e:	2309      	movs	r3, #9
 8002390:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002392:	463b      	mov	r3, r7
 8002394:	4619      	mov	r1, r3
 8002396:	4830      	ldr	r0, [pc, #192]	; (8002458 <MX_ADC1_Init+0x224>)
 8002398:	f001 f84a 	bl	8003430 <HAL_ADC_ConfigChannel>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 80023a2:	f000 fbff 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80023a6:	2309      	movs	r3, #9
 80023a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80023aa:	230a      	movs	r3, #10
 80023ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023ae:	463b      	mov	r3, r7
 80023b0:	4619      	mov	r1, r3
 80023b2:	4829      	ldr	r0, [pc, #164]	; (8002458 <MX_ADC1_Init+0x224>)
 80023b4:	f001 f83c 	bl	8003430 <HAL_ADC_ConfigChannel>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80023be:	f000 fbf1 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80023c2:	230a      	movs	r3, #10
 80023c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80023c6:	230b      	movs	r3, #11
 80023c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023ca:	463b      	mov	r3, r7
 80023cc:	4619      	mov	r1, r3
 80023ce:	4822      	ldr	r0, [pc, #136]	; (8002458 <MX_ADC1_Init+0x224>)
 80023d0:	f001 f82e 	bl	8003430 <HAL_ADC_ConfigChannel>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 80023da:	f000 fbe3 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80023de:	230b      	movs	r3, #11
 80023e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80023e2:	230c      	movs	r3, #12
 80023e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023e6:	463b      	mov	r3, r7
 80023e8:	4619      	mov	r1, r3
 80023ea:	481b      	ldr	r0, [pc, #108]	; (8002458 <MX_ADC1_Init+0x224>)
 80023ec:	f001 f820 	bl	8003430 <HAL_ADC_ConfigChannel>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 80023f6:	f000 fbd5 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80023fa:	230c      	movs	r3, #12
 80023fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80023fe:	230d      	movs	r3, #13
 8002400:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002402:	463b      	mov	r3, r7
 8002404:	4619      	mov	r1, r3
 8002406:	4814      	ldr	r0, [pc, #80]	; (8002458 <MX_ADC1_Init+0x224>)
 8002408:	f001 f812 	bl	8003430 <HAL_ADC_ConfigChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_ADC1_Init+0x1e2>
  {
    Error_Handler();
 8002412:	f000 fbc7 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002416:	230d      	movs	r3, #13
 8002418:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 800241a:	230e      	movs	r3, #14
 800241c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800241e:	463b      	mov	r3, r7
 8002420:	4619      	mov	r1, r3
 8002422:	480d      	ldr	r0, [pc, #52]	; (8002458 <MX_ADC1_Init+0x224>)
 8002424:	f001 f804 	bl	8003430 <HAL_ADC_ConfigChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_ADC1_Init+0x1fe>
  {
    Error_Handler();
 800242e:	f000 fbb9 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002432:	230e      	movs	r3, #14
 8002434:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8002436:	230f      	movs	r3, #15
 8002438:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800243a:	463b      	mov	r3, r7
 800243c:	4619      	mov	r1, r3
 800243e:	4806      	ldr	r0, [pc, #24]	; (8002458 <MX_ADC1_Init+0x224>)
 8002440:	f000 fff6 	bl	8003430 <HAL_ADC_ConfigChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_ADC1_Init+0x21a>
  {
    Error_Handler();
 800244a:	f000 fbab 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20007138 	.word	0x20007138
 800245c:	40012000 	.word	0x40012000

08002460 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <MX_I2C1_Init+0x50>)
 8002466:	4a13      	ldr	r2, [pc, #76]	; (80024b4 <MX_I2C1_Init+0x54>)
 8002468:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <MX_I2C1_Init+0x50>)
 800246c:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <MX_I2C1_Init+0x58>)
 800246e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <MX_I2C1_Init+0x50>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <MX_I2C1_Init+0x50>)
 8002478:	2200      	movs	r2, #0
 800247a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <MX_I2C1_Init+0x50>)
 800247e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002482:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <MX_I2C1_Init+0x50>)
 8002486:	2200      	movs	r2, #0
 8002488:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <MX_I2C1_Init+0x50>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <MX_I2C1_Init+0x50>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <MX_I2C1_Init+0x50>)
 8002498:	2200      	movs	r2, #0
 800249a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800249c:	4804      	ldr	r0, [pc, #16]	; (80024b0 <MX_I2C1_Init+0x50>)
 800249e:	f002 f887 	bl	80045b0 <HAL_I2C_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024a8:	f000 fb7c 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	200071e0 	.word	0x200071e0
 80024b4:	40005400 	.word	0x40005400
 80024b8:	00061a80 	.word	0x00061a80

080024bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <MX_I2C2_Init+0x50>)
 80024c2:	4a13      	ldr	r2, [pc, #76]	; (8002510 <MX_I2C2_Init+0x54>)
 80024c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <MX_I2C2_Init+0x50>)
 80024c8:	4a12      	ldr	r2, [pc, #72]	; (8002514 <MX_I2C2_Init+0x58>)
 80024ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <MX_I2C2_Init+0x50>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_I2C2_Init+0x50>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <MX_I2C2_Init+0x50>)
 80024da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024e0:	4b0a      	ldr	r3, [pc, #40]	; (800250c <MX_I2C2_Init+0x50>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <MX_I2C2_Init+0x50>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024ec:	4b07      	ldr	r3, [pc, #28]	; (800250c <MX_I2C2_Init+0x50>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <MX_I2C2_Init+0x50>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024f8:	4804      	ldr	r0, [pc, #16]	; (800250c <MX_I2C2_Init+0x50>)
 80024fa:	f002 f859 	bl	80045b0 <HAL_I2C_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002504:	f000 fb4e 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20007234 	.word	0x20007234
 8002510:	40005800 	.word	0x40005800
 8002514:	00061a80 	.word	0x00061a80

08002518 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <MX_I2C3_Init+0x50>)
 800251e:	4a13      	ldr	r2, [pc, #76]	; (800256c <MX_I2C3_Init+0x54>)
 8002520:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002522:	4b11      	ldr	r3, [pc, #68]	; (8002568 <MX_I2C3_Init+0x50>)
 8002524:	4a12      	ldr	r2, [pc, #72]	; (8002570 <MX_I2C3_Init+0x58>)
 8002526:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <MX_I2C3_Init+0x50>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <MX_I2C3_Init+0x50>)
 8002530:	2200      	movs	r2, #0
 8002532:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <MX_I2C3_Init+0x50>)
 8002536:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800253a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <MX_I2C3_Init+0x50>)
 800253e:	2200      	movs	r2, #0
 8002540:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <MX_I2C3_Init+0x50>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002548:	4b07      	ldr	r3, [pc, #28]	; (8002568 <MX_I2C3_Init+0x50>)
 800254a:	2200      	movs	r2, #0
 800254c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <MX_I2C3_Init+0x50>)
 8002550:	2200      	movs	r2, #0
 8002552:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002554:	4804      	ldr	r0, [pc, #16]	; (8002568 <MX_I2C3_Init+0x50>)
 8002556:	f002 f82b 	bl	80045b0 <HAL_I2C_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002560:	f000 fb20 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20007288 	.word	0x20007288
 800256c:	40005c00 	.word	0x40005c00
 8002570:	00061a80 	.word	0x00061a80

08002574 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800257a:	f107 0308 	add.w	r3, r7, #8
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002588:	463b      	mov	r3, r7
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002590:	4b1e      	ldr	r3, [pc, #120]	; (800260c <MX_TIM2_Init+0x98>)
 8002592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002596:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8002598:	4b1c      	ldr	r3, [pc, #112]	; (800260c <MX_TIM2_Init+0x98>)
 800259a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800259e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a0:	4b1a      	ldr	r3, [pc, #104]	; (800260c <MX_TIM2_Init+0x98>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 80025a6:	4b19      	ldr	r3, [pc, #100]	; (800260c <MX_TIM2_Init+0x98>)
 80025a8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80025ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ae:	4b17      	ldr	r3, [pc, #92]	; (800260c <MX_TIM2_Init+0x98>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b4:	4b15      	ldr	r3, [pc, #84]	; (800260c <MX_TIM2_Init+0x98>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025ba:	4814      	ldr	r0, [pc, #80]	; (800260c <MX_TIM2_Init+0x98>)
 80025bc:	f003 f898 	bl	80056f0 <HAL_TIM_Base_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80025c6:	f000 faed 	bl	8002ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025d0:	f107 0308 	add.w	r3, r7, #8
 80025d4:	4619      	mov	r1, r3
 80025d6:	480d      	ldr	r0, [pc, #52]	; (800260c <MX_TIM2_Init+0x98>)
 80025d8:	f003 f934 	bl	8005844 <HAL_TIM_ConfigClockSource>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80025e2:	f000 fadf 	bl	8002ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025e6:	2320      	movs	r3, #32
 80025e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025ee:	463b      	mov	r3, r7
 80025f0:	4619      	mov	r1, r3
 80025f2:	4806      	ldr	r0, [pc, #24]	; (800260c <MX_TIM2_Init+0x98>)
 80025f4:	f003 fb08 	bl	8005c08 <HAL_TIMEx_MasterConfigSynchronization>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80025fe:	f000 fad1 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	200072dc 	.word	0x200072dc

08002610 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002616:	f107 0308 	add.w	r3, r7, #8
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002624:	463b      	mov	r3, r7
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800262c:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <MX_TIM4_Init+0x90>)
 800262e:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <MX_TIM4_Init+0x94>)
 8002630:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80 - 1;
 8002632:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <MX_TIM4_Init+0x90>)
 8002634:	224f      	movs	r2, #79	; 0x4f
 8002636:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002638:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <MX_TIM4_Init+0x90>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 123;
 800263e:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <MX_TIM4_Init+0x90>)
 8002640:	227b      	movs	r2, #123	; 0x7b
 8002642:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002644:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <MX_TIM4_Init+0x90>)
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <MX_TIM4_Init+0x90>)
 800264c:	2200      	movs	r2, #0
 800264e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002650:	4813      	ldr	r0, [pc, #76]	; (80026a0 <MX_TIM4_Init+0x90>)
 8002652:	f003 f84d 	bl	80056f0 <HAL_TIM_Base_Init>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 800265c:	f000 faa2 	bl	8002ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002664:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002666:	f107 0308 	add.w	r3, r7, #8
 800266a:	4619      	mov	r1, r3
 800266c:	480c      	ldr	r0, [pc, #48]	; (80026a0 <MX_TIM4_Init+0x90>)
 800266e:	f003 f8e9 	bl	8005844 <HAL_TIM_ConfigClockSource>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8002678:	f000 fa94 	bl	8002ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800267c:	2300      	movs	r3, #0
 800267e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002684:	463b      	mov	r3, r7
 8002686:	4619      	mov	r1, r3
 8002688:	4805      	ldr	r0, [pc, #20]	; (80026a0 <MX_TIM4_Init+0x90>)
 800268a:	f003 fabd 	bl	8005c08 <HAL_TIMEx_MasterConfigSynchronization>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8002694:	f000 fa86 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002698:	bf00      	nop
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20007324 	.word	0x20007324
 80026a4:	40000800 	.word	0x40000800

080026a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <MX_DMA_Init+0x3c>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	4a0b      	ldr	r2, [pc, #44]	; (80026e4 <MX_DMA_Init+0x3c>)
 80026b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026bc:	6313      	str	r3, [r2, #48]	; 0x30
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <MX_DMA_Init+0x3c>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	2038      	movs	r0, #56	; 0x38
 80026d0:	f001 fa29 	bl	8003b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80026d4:	2038      	movs	r0, #56	; 0x38
 80026d6:	f001 fa42 	bl	8003b5e <HAL_NVIC_EnableIRQ>

}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800

080026e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ee:	f107 030c 	add.w	r3, r7, #12
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]
 80026fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	4b35      	ldr	r3, [pc, #212]	; (80027d8 <MX_GPIO_Init+0xf0>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a34      	ldr	r2, [pc, #208]	; (80027d8 <MX_GPIO_Init+0xf0>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b32      	ldr	r3, [pc, #200]	; (80027d8 <MX_GPIO_Init+0xf0>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	4b2e      	ldr	r3, [pc, #184]	; (80027d8 <MX_GPIO_Init+0xf0>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4a2d      	ldr	r2, [pc, #180]	; (80027d8 <MX_GPIO_Init+0xf0>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <MX_GPIO_Init+0xf0>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	603b      	str	r3, [r7, #0]
 800273a:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <MX_GPIO_Init+0xf0>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4a26      	ldr	r2, [pc, #152]	; (80027d8 <MX_GPIO_Init+0xf0>)
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
 8002746:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <MX_GPIO_Init+0xf0>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_SCK_Pin|DEMP1_Pin|DEMP0_Pin|FMT_Pin, GPIO_PIN_RESET);
 8002752:	2200      	movs	r2, #0
 8002754:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8002758:	4820      	ldr	r0, [pc, #128]	; (80027dc <MX_GPIO_Init+0xf4>)
 800275a:	f001 ff0f 	bl	800457c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUTE_GPIO_Port, MUTE_Pin, GPIO_PIN_RESET);
 800275e:	2200      	movs	r2, #0
 8002760:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002764:	481e      	ldr	r0, [pc, #120]	; (80027e0 <MX_GPIO_Init+0xf8>)
 8002766:	f001 ff09 	bl	800457c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_MCU0_Pin|nRST_DSP0_Pin|nRST_DSP1_Pin|nRST_DSP2_Pin, GPIO_PIN_RESET);
 800276a:	2200      	movs	r2, #0
 800276c:	f44f 714c 	mov.w	r1, #816	; 0x330
 8002770:	481c      	ldr	r0, [pc, #112]	; (80027e4 <MX_GPIO_Init+0xfc>)
 8002772:	f001 ff03 	bl	800457c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_SCK_Pin DEMP1_Pin DEMP0_Pin FMT_Pin */
  GPIO_InitStruct.Pin = EN_SCK_Pin|DEMP1_Pin|DEMP0_Pin|FMT_Pin;
 8002776:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800277a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277c:	2301      	movs	r3, #1
 800277e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002784:	2300      	movs	r3, #0
 8002786:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002788:	f107 030c 	add.w	r3, r7, #12
 800278c:	4619      	mov	r1, r3
 800278e:	4813      	ldr	r0, [pc, #76]	; (80027dc <MX_GPIO_Init+0xf4>)
 8002790:	f001 fd70 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : MUTE_Pin */
  GPIO_InitStruct.Pin = MUTE_Pin;
 8002794:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800279a:	2301      	movs	r3, #1
 800279c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MUTE_GPIO_Port, &GPIO_InitStruct);
 80027a6:	f107 030c 	add.w	r3, r7, #12
 80027aa:	4619      	mov	r1, r3
 80027ac:	480c      	ldr	r0, [pc, #48]	; (80027e0 <MX_GPIO_Init+0xf8>)
 80027ae:	f001 fd61 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_MCU0_Pin nRST_DSP0_Pin nRST_DSP1_Pin nRST_DSP2_Pin */
  GPIO_InitStruct.Pin = GPIO_MCU0_Pin|nRST_DSP0_Pin|nRST_DSP1_Pin|nRST_DSP2_Pin;
 80027b2:	f44f 734c 	mov.w	r3, #816	; 0x330
 80027b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b8:	2301      	movs	r3, #1
 80027ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c4:	f107 030c 	add.w	r3, r7, #12
 80027c8:	4619      	mov	r1, r3
 80027ca:	4806      	ldr	r0, [pc, #24]	; (80027e4 <MX_GPIO_Init+0xfc>)
 80027cc:	f001 fd52 	bl	8004274 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027d0:	bf00      	nop
 80027d2:	3720      	adds	r7, #32
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40020800 	.word	0x40020800
 80027e0:	40020000 	.word	0x40020000
 80027e4:	40020400 	.word	0x40020400

080027e8 <SIGMA_WRITE_REGISTER_BLOCK>:

/* USER CODE BEGIN 4 */
void SIGMA_WRITE_REGISTER_BLOCK(uint16_t devAddress, uint16_t address, uint16_t length, uint8_t *pData)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af04      	add	r7, sp, #16
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	4603      	mov	r3, r0
 80027f2:	81fb      	strh	r3, [r7, #14]
 80027f4:	460b      	mov	r3, r1
 80027f6:	81bb      	strh	r3, [r7, #12]
 80027f8:	4613      	mov	r3, r2
 80027fa:	817b      	strh	r3, [r7, #10]
	stat = HAL_I2C_Mem_Write(&hi2c1, devAddress, address, 2, pData, length, 1000);
 80027fc:	89ba      	ldrh	r2, [r7, #12]
 80027fe:	89f9      	ldrh	r1, [r7, #14]
 8002800:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002804:	9302      	str	r3, [sp, #8]
 8002806:	897b      	ldrh	r3, [r7, #10]
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2302      	movs	r3, #2
 8002810:	4805      	ldr	r0, [pc, #20]	; (8002828 <SIGMA_WRITE_REGISTER_BLOCK+0x40>)
 8002812:	f002 f811 	bl	8004838 <HAL_I2C_Mem_Write>
 8002816:	4603      	mov	r3, r0
 8002818:	461a      	mov	r2, r3
 800281a:	4b04      	ldr	r3, [pc, #16]	; (800282c <SIGMA_WRITE_REGISTER_BLOCK+0x44>)
 800281c:	701a      	strb	r2, [r3, #0]
}
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	200071e0 	.word	0x200071e0
 800282c:	2000736c 	.word	0x2000736c

08002830 <SIGMA_WRITE_DELAY>:

void SIGMA_WRITE_DELAY(uint16_t devAddress, uint16_t length, uint8_t *pData)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	603a      	str	r2, [r7, #0]
 800283a:	80fb      	strh	r3, [r7, #6]
 800283c:	460b      	mov	r3, r1
 800283e:	80bb      	strh	r3, [r7, #4]
	HAL_Delay(11);
 8002840:	200b      	movs	r0, #11
 8002842:	f000 fc89 	bl	8003158 <HAL_Delay>
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]
	uint32_t j = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	613b      	str	r3, [r7, #16]
	uint32_t k = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]


	for(k=VOL_SUB; k<ADC_POT; k++) // For volume, loud low, loud high, loud general
 8002864:	230a      	movs	r3, #10
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	e080      	b.n	800296c <HAL_ADC_ConvCpltCallback+0x11c>
	{
		for(i=0; i<30; i++)
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	e077      	b.n	8002960 <HAL_ADC_ConvCpltCallback+0x110>
		{
			if((i == 0) && (value[k] < (linear_in_table[i+1])-15))
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d11f      	bne.n	80028b6 <HAL_ADC_ConvCpltCallback+0x66>
 8002876:	4a88      	ldr	r2, [pc, #544]	; (8002a98 <HAL_ADC_ConvCpltCallback+0x248>)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	3201      	adds	r2, #1
 8002882:	4986      	ldr	r1, [pc, #536]	; (8002a9c <HAL_ADC_ConvCpltCallback+0x24c>)
 8002884:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002888:	3a0f      	subs	r2, #15
 800288a:	4293      	cmp	r3, r2
 800288c:	d213      	bcs.n	80028b6 <HAL_ADC_ConvCpltCallback+0x66>
			{
				if(pote[k] != i)
 800288e:	4a84      	ldr	r2, [pc, #528]	; (8002aa0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002896:	461a      	mov	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	4293      	cmp	r3, r2
 800289c:	d05d      	beq.n	800295a <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	b299      	uxth	r1, r3
 80028a2:	4a7f      	ldr	r2, [pc, #508]	; (8002aa0 <HAL_ADC_ConvCpltCallback+0x250>)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 80028aa:	4a7e      	ldr	r2, [pc, #504]	; (8002aa4 <HAL_ADC_ConvCpltCallback+0x254>)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2101      	movs	r1, #1
 80028b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[k] != i)
 80028b4:	e051      	b.n	800295a <HAL_ADC_ConvCpltCallback+0x10a>
				}
			}
			else if((i > 0) && (i < 29) && (value[k] > (linear_in_table[i]+15)) && (value[k] < (linear_in_table[i+1])-15))
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d02d      	beq.n	8002918 <HAL_ADC_ConvCpltCallback+0xc8>
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2b1c      	cmp	r3, #28
 80028c0:	d82a      	bhi.n	8002918 <HAL_ADC_ConvCpltCallback+0xc8>
 80028c2:	4a75      	ldr	r2, [pc, #468]	; (8002a98 <HAL_ADC_ConvCpltCallback+0x248>)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ca:	4974      	ldr	r1, [pc, #464]	; (8002a9c <HAL_ADC_ConvCpltCallback+0x24c>)
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80028d2:	320f      	adds	r2, #15
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d91f      	bls.n	8002918 <HAL_ADC_ConvCpltCallback+0xc8>
 80028d8:	4a6f      	ldr	r2, [pc, #444]	; (8002a98 <HAL_ADC_ConvCpltCallback+0x248>)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	3201      	adds	r2, #1
 80028e4:	496d      	ldr	r1, [pc, #436]	; (8002a9c <HAL_ADC_ConvCpltCallback+0x24c>)
 80028e6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80028ea:	3a0f      	subs	r2, #15
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d213      	bcs.n	8002918 <HAL_ADC_ConvCpltCallback+0xc8>
			{
				if(pote[k] != i)
 80028f0:	4a6b      	ldr	r2, [pc, #428]	; (8002aa0 <HAL_ADC_ConvCpltCallback+0x250>)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028f8:	461a      	mov	r2, r3
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d02c      	beq.n	800295a <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	b299      	uxth	r1, r3
 8002904:	4a66      	ldr	r2, [pc, #408]	; (8002aa0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 800290c:	4a65      	ldr	r2, [pc, #404]	; (8002aa4 <HAL_ADC_ConvCpltCallback+0x254>)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2101      	movs	r1, #1
 8002912:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[k] != i)
 8002916:	e020      	b.n	800295a <HAL_ADC_ConvCpltCallback+0x10a>
				}
			}
			else if((i == 29) && (value[k] > (linear_in_table[i]+15)))
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2b1d      	cmp	r3, #29
 800291c:	d11d      	bne.n	800295a <HAL_ADC_ConvCpltCallback+0x10a>
 800291e:	4a5e      	ldr	r2, [pc, #376]	; (8002a98 <HAL_ADC_ConvCpltCallback+0x248>)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002926:	495d      	ldr	r1, [pc, #372]	; (8002a9c <HAL_ADC_ConvCpltCallback+0x24c>)
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800292e:	320f      	adds	r2, #15
 8002930:	4293      	cmp	r3, r2
 8002932:	d912      	bls.n	800295a <HAL_ADC_ConvCpltCallback+0x10a>
			{
				if(pote[k] != i)
 8002934:	4a5a      	ldr	r2, [pc, #360]	; (8002aa0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800293c:	461a      	mov	r2, r3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	4293      	cmp	r3, r2
 8002942:	d00a      	beq.n	800295a <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	b299      	uxth	r1, r3
 8002948:	4a55      	ldr	r2, [pc, #340]	; (8002aa0 <HAL_ADC_ConvCpltCallback+0x250>)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 8002950:	4a54      	ldr	r2, [pc, #336]	; (8002aa4 <HAL_ADC_ConvCpltCallback+0x254>)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2101      	movs	r1, #1
 8002956:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0; i<30; i++)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	3301      	adds	r3, #1
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2b1d      	cmp	r3, #29
 8002964:	d984      	bls.n	8002870 <HAL_ADC_ConvCpltCallback+0x20>
	for(k=VOL_SUB; k<ADC_POT; k++) // For volume, loud low, loud high, loud general
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	3301      	adds	r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b0e      	cmp	r3, #14
 8002970:	f67f af7b 	bls.w	800286a <HAL_ADC_ConvCpltCallback+0x1a>
			}
		}
	}


	for(j=0; j<10; j++) // For filter 32Hz - 16KHz
 8002974:	2300      	movs	r3, #0
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	e080      	b.n	8002a7c <HAL_ADC_ConvCpltCallback+0x22c>
	{
		for(i=0; i<30; i++)
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	e077      	b.n	8002a70 <HAL_ADC_ConvCpltCallback+0x220>
		{
			if((i == 0) && (value[j] < (log_in_table[i+1])-15))
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d11f      	bne.n	80029c6 <HAL_ADC_ConvCpltCallback+0x176>
 8002986:	4a44      	ldr	r2, [pc, #272]	; (8002a98 <HAL_ADC_ConvCpltCallback+0x248>)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	3201      	adds	r2, #1
 8002992:	4945      	ldr	r1, [pc, #276]	; (8002aa8 <HAL_ADC_ConvCpltCallback+0x258>)
 8002994:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002998:	3a0f      	subs	r2, #15
 800299a:	4293      	cmp	r3, r2
 800299c:	d213      	bcs.n	80029c6 <HAL_ADC_ConvCpltCallback+0x176>
			{
				if(pote[j] != i)
 800299e:	4a40      	ldr	r2, [pc, #256]	; (8002aa0 <HAL_ADC_ConvCpltCallback+0x250>)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029a6:	461a      	mov	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d05d      	beq.n	8002a6a <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	b299      	uxth	r1, r3
 80029b2:	4a3b      	ldr	r2, [pc, #236]	; (8002aa0 <HAL_ADC_ConvCpltCallback+0x250>)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 80029ba:	4a3a      	ldr	r2, [pc, #232]	; (8002aa4 <HAL_ADC_ConvCpltCallback+0x254>)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	2101      	movs	r1, #1
 80029c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[j] != i)
 80029c4:	e051      	b.n	8002a6a <HAL_ADC_ConvCpltCallback+0x21a>
				}
			}
			else if((i > 0) && (i < 29) && (value[j] > (log_in_table[i]+15)) && (value[j] < (log_in_table[i+1])-15))
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d02d      	beq.n	8002a28 <HAL_ADC_ConvCpltCallback+0x1d8>
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2b1c      	cmp	r3, #28
 80029d0:	d82a      	bhi.n	8002a28 <HAL_ADC_ConvCpltCallback+0x1d8>
 80029d2:	4a31      	ldr	r2, [pc, #196]	; (8002a98 <HAL_ADC_ConvCpltCallback+0x248>)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029da:	4933      	ldr	r1, [pc, #204]	; (8002aa8 <HAL_ADC_ConvCpltCallback+0x258>)
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80029e2:	320f      	adds	r2, #15
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d91f      	bls.n	8002a28 <HAL_ADC_ConvCpltCallback+0x1d8>
 80029e8:	4a2b      	ldr	r2, [pc, #172]	; (8002a98 <HAL_ADC_ConvCpltCallback+0x248>)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	3201      	adds	r2, #1
 80029f4:	492c      	ldr	r1, [pc, #176]	; (8002aa8 <HAL_ADC_ConvCpltCallback+0x258>)
 80029f6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80029fa:	3a0f      	subs	r2, #15
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d213      	bcs.n	8002a28 <HAL_ADC_ConvCpltCallback+0x1d8>
			{
				if(pote[j] != i)
 8002a00:	4a27      	ldr	r2, [pc, #156]	; (8002aa0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d02c      	beq.n	8002a6a <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	b299      	uxth	r1, r3
 8002a14:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 8002a1c:	4a21      	ldr	r2, [pc, #132]	; (8002aa4 <HAL_ADC_ConvCpltCallback+0x254>)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2101      	movs	r1, #1
 8002a22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[j] != i)
 8002a26:	e020      	b.n	8002a6a <HAL_ADC_ConvCpltCallback+0x21a>
				}
			}
			else if((i == 29) && (value[j] > (log_in_table[i]+15)))
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2b1d      	cmp	r3, #29
 8002a2c:	d11d      	bne.n	8002a6a <HAL_ADC_ConvCpltCallback+0x21a>
 8002a2e:	4a1a      	ldr	r2, [pc, #104]	; (8002a98 <HAL_ADC_ConvCpltCallback+0x248>)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a36:	491c      	ldr	r1, [pc, #112]	; (8002aa8 <HAL_ADC_ConvCpltCallback+0x258>)
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002a3e:	320f      	adds	r2, #15
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d912      	bls.n	8002a6a <HAL_ADC_ConvCpltCallback+0x21a>
			{
				if(pote[j] != i)
 8002a44:	4a16      	ldr	r2, [pc, #88]	; (8002aa0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00a      	beq.n	8002a6a <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	b299      	uxth	r1, r3
 8002a58:	4a11      	ldr	r2, [pc, #68]	; (8002aa0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 8002a60:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <HAL_ADC_ConvCpltCallback+0x254>)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2101      	movs	r1, #1
 8002a66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0; i<30; i++)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2b1d      	cmp	r3, #29
 8002a74:	d984      	bls.n	8002980 <HAL_ADC_ConvCpltCallback+0x130>
	for(j=0; j<10; j++) // For filter 32Hz - 16KHz
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	2b09      	cmp	r3, #9
 8002a80:	f67f af7b 	bls.w	800297a <HAL_ADC_ConvCpltCallback+0x12a>
			}
		}

	}

	update = 1;
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_ADC_ConvCpltCallback+0x25c>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
}
 8002a8a:	bf00      	nop
 8002a8c:	371c      	adds	r7, #28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20007374 	.word	0x20007374
 8002a9c:	2000740c 	.word	0x2000740c
 8002aa0:	200073b0 	.word	0x200073b0
 8002aa4:	20007448 	.word	0x20007448
 8002aa8:	200073d0 	.word	0x200073d0
 8002aac:	20007466 	.word	0x20007466

08002ab0 <delay_us>:
void delay_us(uint16_t us)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	80fb      	strh	r3, [r7, #6]
	htim4.Instance->CNT = 0;
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <delay_us+0x30>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24
	while((htim4.Instance->CNT) < us);
 8002ac2:	bf00      	nop
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <delay_us+0x30>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d3f9      	bcc.n	8002ac4 <delay_us+0x14>
}
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20007324 	.word	0x20007324

08002ae4 <Safeload_Write>:
void Safeload_Write(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
	SIGMA_WRITE_REGISTER_BLOCK(DSP0_ADDR, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 8002ae8:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <Safeload_Write+0xb0>)
 8002aea:	2204      	movs	r2, #4
 8002aec:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002af0:	2070      	movs	r0, #112	; 0x70
 8002af2:	f7ff fe79 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK(DSP0_ADDR, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 8002af6:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <Safeload_Write+0xb4>)
 8002af8:	2204      	movs	r2, #4
 8002afa:	f246 0105 	movw	r1, #24581	; 0x6005
 8002afe:	2070      	movs	r0, #112	; 0x70
 8002b00:	f7ff fe72 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK(DSP0_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_LOWER_ADDR, 4, num_SafeLoad_Lower);
 8002b04:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <Safeload_Write+0xb8>)
 8002b06:	2204      	movs	r2, #4
 8002b08:	f246 0106 	movw	r1, #24582	; 0x6006
 8002b0c:	2070      	movs	r0, #112	; 0x70
 8002b0e:	f7ff fe6b 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
    SIGMA_WRITE_REGISTER_BLOCK(DSP0_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_UPPER_ADDR, 4, num_SafeLoad_Upper);
 8002b12:	4b23      	ldr	r3, [pc, #140]	; (8002ba0 <Safeload_Write+0xbc>)
 8002b14:	2204      	movs	r2, #4
 8002b16:	f246 0107 	movw	r1, #24583	; 0x6007
 8002b1a:	2070      	movs	r0, #112	; 0x70
 8002b1c:	f7ff fe64 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>

	SIGMA_WRITE_REGISTER_BLOCK(DSP1_ADDR, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 8002b20:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <Safeload_Write+0xb0>)
 8002b22:	2204      	movs	r2, #4
 8002b24:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002b28:	2072      	movs	r0, #114	; 0x72
 8002b2a:	f7ff fe5d 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK(DSP1_ADDR, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 8002b2e:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <Safeload_Write+0xb4>)
 8002b30:	2204      	movs	r2, #4
 8002b32:	f246 0105 	movw	r1, #24581	; 0x6005
 8002b36:	2072      	movs	r0, #114	; 0x72
 8002b38:	f7ff fe56 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK(DSP1_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_LOWER_ADDR, 4, num_SafeLoad_Lower);
 8002b3c:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <Safeload_Write+0xb8>)
 8002b3e:	2204      	movs	r2, #4
 8002b40:	f246 0106 	movw	r1, #24582	; 0x6006
 8002b44:	2072      	movs	r0, #114	; 0x72
 8002b46:	f7ff fe4f 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
    SIGMA_WRITE_REGISTER_BLOCK(DSP1_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_UPPER_ADDR, 4, num_SafeLoad_Upper);
 8002b4a:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <Safeload_Write+0xbc>)
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	f246 0107 	movw	r1, #24583	; 0x6007
 8002b52:	2072      	movs	r0, #114	; 0x72
 8002b54:	f7ff fe48 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>

	SIGMA_WRITE_REGISTER_BLOCK(DSP2_ADDR, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 8002b58:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <Safeload_Write+0xb0>)
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002b60:	2074      	movs	r0, #116	; 0x74
 8002b62:	f7ff fe41 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK(DSP2_ADDR, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 8002b66:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <Safeload_Write+0xb4>)
 8002b68:	2204      	movs	r2, #4
 8002b6a:	f246 0105 	movw	r1, #24581	; 0x6005
 8002b6e:	2074      	movs	r0, #116	; 0x74
 8002b70:	f7ff fe3a 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK(DSP2_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_LOWER_ADDR, 4, num_SafeLoad_Lower);
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <Safeload_Write+0xb8>)
 8002b76:	2204      	movs	r2, #4
 8002b78:	f246 0106 	movw	r1, #24582	; 0x6006
 8002b7c:	2074      	movs	r0, #116	; 0x74
 8002b7e:	f7ff fe33 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
    SIGMA_WRITE_REGISTER_BLOCK(DSP2_ADDR, MOD_SAFELOADMODULE_NUM_SAFELOAD_UPPER_ADDR, 4, num_SafeLoad_Upper);
 8002b82:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <Safeload_Write+0xbc>)
 8002b84:	2204      	movs	r2, #4
 8002b86:	f246 0107 	movw	r1, #24583	; 0x6007
 8002b8a:	2074      	movs	r0, #116	; 0x74
 8002b8c:	f7ff fe2c 	bl	80027e8 <SIGMA_WRITE_REGISTER_BLOCK>
}
 8002b90:	bf00      	nop
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20007468 	.word	0x20007468
 8002b98:	2000746c 	.word	0x2000746c
 8002b9c:	20007470 	.word	0x20007470
 8002ba0:	20007474 	.word	0x20007474

08002ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba8:	b672      	cpsid	i
}
 8002baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bac:	e7fe      	b.n	8002bac <Error_Handler+0x8>
	...

08002bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	607b      	str	r3, [r7, #4]
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <HAL_MspInit+0x4c>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	4a0f      	ldr	r2, [pc, #60]	; (8002bfc <HAL_MspInit+0x4c>)
 8002bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <HAL_MspInit+0x4c>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_MspInit+0x4c>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	4a08      	ldr	r2, [pc, #32]	; (8002bfc <HAL_MspInit+0x4c>)
 8002bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be0:	6413      	str	r3, [r2, #64]	; 0x40
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_MspInit+0x4c>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800

08002c00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08c      	sub	sp, #48	; 0x30
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	f107 031c 	add.w	r3, r7, #28
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a49      	ldr	r2, [pc, #292]	; (8002d44 <HAL_ADC_MspInit+0x144>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	f040 808c 	bne.w	8002d3c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c24:	2300      	movs	r3, #0
 8002c26:	61bb      	str	r3, [r7, #24]
 8002c28:	4b47      	ldr	r3, [pc, #284]	; (8002d48 <HAL_ADC_MspInit+0x148>)
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2c:	4a46      	ldr	r2, [pc, #280]	; (8002d48 <HAL_ADC_MspInit+0x148>)
 8002c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c32:	6453      	str	r3, [r2, #68]	; 0x44
 8002c34:	4b44      	ldr	r3, [pc, #272]	; (8002d48 <HAL_ADC_MspInit+0x148>)
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	4b40      	ldr	r3, [pc, #256]	; (8002d48 <HAL_ADC_MspInit+0x148>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	4a3f      	ldr	r2, [pc, #252]	; (8002d48 <HAL_ADC_MspInit+0x148>)
 8002c4a:	f043 0304 	orr.w	r3, r3, #4
 8002c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c50:	4b3d      	ldr	r3, [pc, #244]	; (8002d48 <HAL_ADC_MspInit+0x148>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	4b39      	ldr	r3, [pc, #228]	; (8002d48 <HAL_ADC_MspInit+0x148>)
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	4a38      	ldr	r2, [pc, #224]	; (8002d48 <HAL_ADC_MspInit+0x148>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6c:	4b36      	ldr	r3, [pc, #216]	; (8002d48 <HAL_ADC_MspInit+0x148>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	4b32      	ldr	r3, [pc, #200]	; (8002d48 <HAL_ADC_MspInit+0x148>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	4a31      	ldr	r2, [pc, #196]	; (8002d48 <HAL_ADC_MspInit+0x148>)
 8002c82:	f043 0302 	orr.w	r3, r3, #2
 8002c86:	6313      	str	r3, [r2, #48]	; 0x30
 8002c88:	4b2f      	ldr	r3, [pc, #188]	; (8002d48 <HAL_ADC_MspInit+0x148>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002c94:	231f      	movs	r3, #31
 8002c96:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ca0:	f107 031c 	add.w	r3, r7, #28
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4829      	ldr	r0, [pc, #164]	; (8002d4c <HAL_ADC_MspInit+0x14c>)
 8002ca8:	f001 fae4 	bl	8004274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002cac:	23ff      	movs	r3, #255	; 0xff
 8002cae:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb8:	f107 031c 	add.w	r3, r7, #28
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4824      	ldr	r0, [pc, #144]	; (8002d50 <HAL_ADC_MspInit+0x150>)
 8002cc0:	f001 fad8 	bl	8004274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd0:	f107 031c 	add.w	r3, r7, #28
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	481f      	ldr	r0, [pc, #124]	; (8002d54 <HAL_ADC_MspInit+0x154>)
 8002cd8:	f001 facc 	bl	8004274 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002cdc:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <HAL_ADC_MspInit+0x158>)
 8002cde:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <HAL_ADC_MspInit+0x15c>)
 8002ce0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <HAL_ADC_MspInit+0x158>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <HAL_ADC_MspInit+0x158>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cee:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <HAL_ADC_MspInit+0x158>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002cf4:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <HAL_ADC_MspInit+0x158>)
 8002cf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cfa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cfc:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <HAL_ADC_MspInit+0x158>)
 8002cfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d02:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d04:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <HAL_ADC_MspInit+0x158>)
 8002d06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d0a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_ADC_MspInit+0x158>)
 8002d0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d12:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d14:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <HAL_ADC_MspInit+0x158>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d1a:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <HAL_ADC_MspInit+0x158>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d20:	480d      	ldr	r0, [pc, #52]	; (8002d58 <HAL_ADC_MspInit+0x158>)
 8002d22:	f000 ff37 	bl	8003b94 <HAL_DMA_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002d2c:	f7ff ff3a 	bl	8002ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a09      	ldr	r2, [pc, #36]	; (8002d58 <HAL_ADC_MspInit+0x158>)
 8002d34:	639a      	str	r2, [r3, #56]	; 0x38
 8002d36:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <HAL_ADC_MspInit+0x158>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d3c:	bf00      	nop
 8002d3e:	3730      	adds	r7, #48	; 0x30
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40012000 	.word	0x40012000
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40020800 	.word	0x40020800
 8002d50:	40020000 	.word	0x40020000
 8002d54:	40020400 	.word	0x40020400
 8002d58:	20007180 	.word	0x20007180
 8002d5c:	40026410 	.word	0x40026410

08002d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08e      	sub	sp, #56	; 0x38
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a63      	ldr	r2, [pc, #396]	; (8002f0c <HAL_I2C_MspInit+0x1ac>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d12c      	bne.n	8002ddc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	623b      	str	r3, [r7, #32]
 8002d86:	4b62      	ldr	r3, [pc, #392]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4a61      	ldr	r2, [pc, #388]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002d8c:	f043 0302 	orr.w	r3, r3, #2
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
 8002d92:	4b5f      	ldr	r3, [pc, #380]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	623b      	str	r3, [r7, #32]
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d9e:	23c0      	movs	r3, #192	; 0xc0
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002da2:	2312      	movs	r3, #18
 8002da4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002daa:	2303      	movs	r3, #3
 8002dac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002dae:	2304      	movs	r3, #4
 8002db0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db6:	4619      	mov	r1, r3
 8002db8:	4856      	ldr	r0, [pc, #344]	; (8002f14 <HAL_I2C_MspInit+0x1b4>)
 8002dba:	f001 fa5b 	bl	8004274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	4b53      	ldr	r3, [pc, #332]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	4a52      	ldr	r2, [pc, #328]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002dc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dce:	4b50      	ldr	r3, [pc, #320]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd6:	61fb      	str	r3, [r7, #28]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002dda:	e093      	b.n	8002f04 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a4d      	ldr	r2, [pc, #308]	; (8002f18 <HAL_I2C_MspInit+0x1b8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d13d      	bne.n	8002e62 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	4b49      	ldr	r3, [pc, #292]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	4a48      	ldr	r2, [pc, #288]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	6313      	str	r3, [r2, #48]	; 0x30
 8002df6:	4b46      	ldr	r3, [pc, #280]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	61bb      	str	r3, [r7, #24]
 8002e00:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e08:	2312      	movs	r3, #18
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e10:	2303      	movs	r3, #3
 8002e12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e14:	2304      	movs	r3, #4
 8002e16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	483d      	ldr	r0, [pc, #244]	; (8002f14 <HAL_I2C_MspInit+0x1b4>)
 8002e20:	f001 fa28 	bl	8004274 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e24:	2308      	movs	r3, #8
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e28:	2312      	movs	r3, #18
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e30:	2303      	movs	r3, #3
 8002e32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002e34:	2309      	movs	r3, #9
 8002e36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4835      	ldr	r0, [pc, #212]	; (8002f14 <HAL_I2C_MspInit+0x1b4>)
 8002e40:	f001 fa18 	bl	8004274 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	4b31      	ldr	r3, [pc, #196]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	4a30      	ldr	r2, [pc, #192]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002e4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e52:	6413      	str	r3, [r2, #64]	; 0x40
 8002e54:	4b2e      	ldr	r3, [pc, #184]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	697b      	ldr	r3, [r7, #20]
}
 8002e60:	e050      	b.n	8002f04 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a2d      	ldr	r2, [pc, #180]	; (8002f1c <HAL_I2C_MspInit+0x1bc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d14b      	bne.n	8002f04 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	4b27      	ldr	r3, [pc, #156]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	4a26      	ldr	r2, [pc, #152]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002e76:	f043 0304 	orr.w	r3, r3, #4
 8002e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7c:	4b24      	ldr	r3, [pc, #144]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6313      	str	r3, [r2, #48]	; 0x30
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eaa:	2312      	movs	r3, #18
 8002eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002eb6:	2304      	movs	r3, #4
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4817      	ldr	r0, [pc, #92]	; (8002f20 <HAL_I2C_MspInit+0x1c0>)
 8002ec2:	f001 f9d7 	bl	8004274 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ecc:	2312      	movs	r3, #18
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ed8:	2304      	movs	r3, #4
 8002eda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4810      	ldr	r0, [pc, #64]	; (8002f24 <HAL_I2C_MspInit+0x1c4>)
 8002ee4:	f001 f9c6 	bl	8004274 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	4a07      	ldr	r2, [pc, #28]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002ef2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_I2C_MspInit+0x1b0>)
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	68bb      	ldr	r3, [r7, #8]
}
 8002f04:	bf00      	nop
 8002f06:	3738      	adds	r7, #56	; 0x38
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40005400 	.word	0x40005400
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40020400 	.word	0x40020400
 8002f18:	40005800 	.word	0x40005800
 8002f1c:	40005c00 	.word	0x40005c00
 8002f20:	40020800 	.word	0x40020800
 8002f24:	40020000 	.word	0x40020000

08002f28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f38:	d10e      	bne.n	8002f58 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	4b13      	ldr	r3, [pc, #76]	; (8002f8c <HAL_TIM_Base_MspInit+0x64>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	4a12      	ldr	r2, [pc, #72]	; (8002f8c <HAL_TIM_Base_MspInit+0x64>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4a:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <HAL_TIM_Base_MspInit+0x64>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f56:	e012      	b.n	8002f7e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a0c      	ldr	r2, [pc, #48]	; (8002f90 <HAL_TIM_Base_MspInit+0x68>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d10d      	bne.n	8002f7e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <HAL_TIM_Base_MspInit+0x64>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	4a08      	ldr	r2, [pc, #32]	; (8002f8c <HAL_TIM_Base_MspInit+0x64>)
 8002f6c:	f043 0304 	orr.w	r3, r3, #4
 8002f70:	6413      	str	r3, [r2, #64]	; 0x40
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_TIM_Base_MspInit+0x64>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
}
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	40000800 	.word	0x40000800

08002f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f98:	e7fe      	b.n	8002f98 <NMI_Handler+0x4>

08002f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f9e:	e7fe      	b.n	8002f9e <HardFault_Handler+0x4>

08002fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fa4:	e7fe      	b.n	8002fa4 <MemManage_Handler+0x4>

08002fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002faa:	e7fe      	b.n	8002faa <BusFault_Handler+0x4>

08002fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fb0:	e7fe      	b.n	8002fb0 <UsageFault_Handler+0x4>

08002fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fe0:	f000 f89a 	bl	8003118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002fec:	4802      	ldr	r0, [pc, #8]	; (8002ff8 <DMA2_Stream0_IRQHandler+0x10>)
 8002fee:	f000 fed7 	bl	8003da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20007180 	.word	0x20007180

08002ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <SystemInit+0x20>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003006:	4a05      	ldr	r2, [pc, #20]	; (800301c <SystemInit+0x20>)
 8003008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800300c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003058 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003024:	480d      	ldr	r0, [pc, #52]	; (800305c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003026:	490e      	ldr	r1, [pc, #56]	; (8003060 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003028:	4a0e      	ldr	r2, [pc, #56]	; (8003064 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800302a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800302c:	e002      	b.n	8003034 <LoopCopyDataInit>

0800302e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800302e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003032:	3304      	adds	r3, #4

08003034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003038:	d3f9      	bcc.n	800302e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800303a:	4a0b      	ldr	r2, [pc, #44]	; (8003068 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800303c:	4c0b      	ldr	r4, [pc, #44]	; (800306c <LoopFillZerobss+0x26>)
  movs r3, #0
 800303e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003040:	e001      	b.n	8003046 <LoopFillZerobss>

08003042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003044:	3204      	adds	r2, #4

08003046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003048:	d3fb      	bcc.n	8003042 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800304a:	f7ff ffd7 	bl	8002ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800304e:	f002 fe57 	bl	8005d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003052:	f7fe f977 	bl	8001344 <main>
  bx  lr    
 8003056:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003058:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800305c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003060:	200070fc 	.word	0x200070fc
  ldr r2, =_sidata
 8003064:	080062b0 	.word	0x080062b0
  ldr r2, =_sbss
 8003068:	200070fc 	.word	0x200070fc
  ldr r4, =_ebss
 800306c:	200075b4 	.word	0x200075b4

08003070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003070:	e7fe      	b.n	8003070 <ADC_IRQHandler>
	...

08003074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003078:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <HAL_Init+0x40>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0d      	ldr	r2, [pc, #52]	; (80030b4 <HAL_Init+0x40>)
 800307e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_Init+0x40>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <HAL_Init+0x40>)
 800308a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800308e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003090:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <HAL_Init+0x40>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a07      	ldr	r2, [pc, #28]	; (80030b4 <HAL_Init+0x40>)
 8003096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800309c:	2003      	movs	r0, #3
 800309e:	f000 fd37 	bl	8003b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030a2:	200f      	movs	r0, #15
 80030a4:	f000 f808 	bl	80030b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030a8:	f7ff fd82 	bl	8002bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023c00 	.word	0x40023c00

080030b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030c0:	4b12      	ldr	r3, [pc, #72]	; (800310c <HAL_InitTick+0x54>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b12      	ldr	r3, [pc, #72]	; (8003110 <HAL_InitTick+0x58>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	4619      	mov	r1, r3
 80030ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80030d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 fd4f 	bl	8003b7a <HAL_SYSTICK_Config>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e00e      	b.n	8003104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b0f      	cmp	r3, #15
 80030ea:	d80a      	bhi.n	8003102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ec:	2200      	movs	r2, #0
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295
 80030f4:	f000 fd17 	bl	8003b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030f8:	4a06      	ldr	r2, [pc, #24]	; (8003114 <HAL_InitTick+0x5c>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	e000      	b.n	8003104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
}
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	200070a0 	.word	0x200070a0
 8003110:	200070a8 	.word	0x200070a8
 8003114:	200070a4 	.word	0x200070a4

08003118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_IncTick+0x20>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_IncTick+0x24>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4413      	add	r3, r2
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <HAL_IncTick+0x24>)
 800312a:	6013      	str	r3, [r2, #0]
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	200070a8 	.word	0x200070a8
 800313c:	20007478 	.word	0x20007478

08003140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return uwTick;
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <HAL_GetTick+0x14>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20007478 	.word	0x20007478

08003158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003160:	f7ff ffee 	bl	8003140 <HAL_GetTick>
 8003164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d005      	beq.n	800317e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003172:	4b0a      	ldr	r3, [pc, #40]	; (800319c <HAL_Delay+0x44>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800317e:	bf00      	nop
 8003180:	f7ff ffde 	bl	8003140 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	429a      	cmp	r2, r3
 800318e:	d8f7      	bhi.n	8003180 <HAL_Delay+0x28>
  {
  }
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	200070a8 	.word	0x200070a8

080031a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e033      	b.n	800321e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff fd1e 	bl	8002c00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d118      	bne.n	8003210 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031e6:	f023 0302 	bic.w	r3, r3, #2
 80031ea:	f043 0202 	orr.w	r2, r3, #2
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fa3e 	bl	8003674 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f023 0303 	bic.w	r3, r3, #3
 8003206:	f043 0201 	orr.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	641a      	str	r2, [r3, #64]	; 0x40
 800320e:	e001      	b.n	8003214 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800321c:	7bfb      	ldrb	r3, [r7, #15]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_ADC_Start_DMA+0x1e>
 8003242:	2302      	movs	r3, #2
 8003244:	e0ce      	b.n	80033e4 <HAL_ADC_Start_DMA+0x1bc>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b01      	cmp	r3, #1
 800325a:	d018      	beq.n	800328e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800326c:	4b5f      	ldr	r3, [pc, #380]	; (80033ec <HAL_ADC_Start_DMA+0x1c4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a5f      	ldr	r2, [pc, #380]	; (80033f0 <HAL_ADC_Start_DMA+0x1c8>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	0c9a      	lsrs	r2, r3, #18
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003280:	e002      	b.n	8003288 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	3b01      	subs	r3, #1
 8003286:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f9      	bne.n	8003282 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329c:	d107      	bne.n	80032ae <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	f040 8086 	bne.w	80033ca <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032c6:	f023 0301 	bic.w	r3, r3, #1
 80032ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d007      	beq.n	80032f0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fc:	d106      	bne.n	800330c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f023 0206 	bic.w	r2, r3, #6
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	645a      	str	r2, [r3, #68]	; 0x44
 800330a:	e002      	b.n	8003312 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800331a:	4b36      	ldr	r3, [pc, #216]	; (80033f4 <HAL_ADC_Start_DMA+0x1cc>)
 800331c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	4a35      	ldr	r2, [pc, #212]	; (80033f8 <HAL_ADC_Start_DMA+0x1d0>)
 8003324:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	4a34      	ldr	r2, [pc, #208]	; (80033fc <HAL_ADC_Start_DMA+0x1d4>)
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	4a33      	ldr	r2, [pc, #204]	; (8003400 <HAL_ADC_Start_DMA+0x1d8>)
 8003334:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800333e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800334e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800335e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	334c      	adds	r3, #76	; 0x4c
 800336a:	4619      	mov	r1, r3
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f000 fcbe 	bl	8003cf0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10f      	bne.n	80033a0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d129      	bne.n	80033e2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800339c:	609a      	str	r2, [r3, #8]
 800339e:	e020      	b.n	80033e2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a17      	ldr	r2, [pc, #92]	; (8003404 <HAL_ADC_Start_DMA+0x1dc>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d11b      	bne.n	80033e2 <HAL_ADC_Start_DMA+0x1ba>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d114      	bne.n	80033e2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	e00b      	b.n	80033e2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f043 0210 	orr.w	r2, r3, #16
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	f043 0201 	orr.w	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	200070a0 	.word	0x200070a0
 80033f0:	431bde83 	.word	0x431bde83
 80033f4:	40012300 	.word	0x40012300
 80033f8:	0800386d 	.word	0x0800386d
 80033fc:	08003927 	.word	0x08003927
 8003400:	08003943 	.word	0x08003943
 8003404:	40012000 	.word	0x40012000

08003408 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_ADC_ConfigChannel+0x1c>
 8003448:	2302      	movs	r3, #2
 800344a:	e105      	b.n	8003658 <HAL_ADC_ConfigChannel+0x228>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b09      	cmp	r3, #9
 800345a:	d925      	bls.n	80034a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68d9      	ldr	r1, [r3, #12]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	4613      	mov	r3, r2
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	4413      	add	r3, r2
 8003470:	3b1e      	subs	r3, #30
 8003472:	2207      	movs	r2, #7
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43da      	mvns	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	400a      	ands	r2, r1
 8003480:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68d9      	ldr	r1, [r3, #12]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	b29b      	uxth	r3, r3
 8003492:	4618      	mov	r0, r3
 8003494:	4603      	mov	r3, r0
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4403      	add	r3, r0
 800349a:	3b1e      	subs	r3, #30
 800349c:	409a      	lsls	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	e022      	b.n	80034ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6919      	ldr	r1, [r3, #16]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	4613      	mov	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	2207      	movs	r2, #7
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43da      	mvns	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	400a      	ands	r2, r1
 80034ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6919      	ldr	r1, [r3, #16]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	4618      	mov	r0, r3
 80034de:	4603      	mov	r3, r0
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4403      	add	r3, r0
 80034e4:	409a      	lsls	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b06      	cmp	r3, #6
 80034f4:	d824      	bhi.n	8003540 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	3b05      	subs	r3, #5
 8003508:	221f      	movs	r2, #31
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43da      	mvns	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	400a      	ands	r2, r1
 8003516:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	b29b      	uxth	r3, r3
 8003524:	4618      	mov	r0, r3
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	3b05      	subs	r3, #5
 8003532:	fa00 f203 	lsl.w	r2, r0, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	635a      	str	r2, [r3, #52]	; 0x34
 800353e:	e04c      	b.n	80035da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b0c      	cmp	r3, #12
 8003546:	d824      	bhi.n	8003592 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	3b23      	subs	r3, #35	; 0x23
 800355a:	221f      	movs	r2, #31
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43da      	mvns	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	400a      	ands	r2, r1
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	b29b      	uxth	r3, r3
 8003576:	4618      	mov	r0, r3
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	3b23      	subs	r3, #35	; 0x23
 8003584:	fa00 f203 	lsl.w	r2, r0, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
 8003590:	e023      	b.n	80035da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	3b41      	subs	r3, #65	; 0x41
 80035a4:	221f      	movs	r2, #31
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43da      	mvns	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	400a      	ands	r2, r1
 80035b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	4618      	mov	r0, r3
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	3b41      	subs	r3, #65	; 0x41
 80035ce:	fa00 f203 	lsl.w	r2, r0, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035da:	4b22      	ldr	r3, [pc, #136]	; (8003664 <HAL_ADC_ConfigChannel+0x234>)
 80035dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a21      	ldr	r2, [pc, #132]	; (8003668 <HAL_ADC_ConfigChannel+0x238>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d109      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x1cc>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b12      	cmp	r3, #18
 80035ee:	d105      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a19      	ldr	r2, [pc, #100]	; (8003668 <HAL_ADC_ConfigChannel+0x238>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d123      	bne.n	800364e <HAL_ADC_ConfigChannel+0x21e>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b10      	cmp	r3, #16
 800360c:	d003      	beq.n	8003616 <HAL_ADC_ConfigChannel+0x1e6>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b11      	cmp	r3, #17
 8003614:	d11b      	bne.n	800364e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b10      	cmp	r3, #16
 8003628:	d111      	bne.n	800364e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800362a:	4b10      	ldr	r3, [pc, #64]	; (800366c <HAL_ADC_ConfigChannel+0x23c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a10      	ldr	r2, [pc, #64]	; (8003670 <HAL_ADC_ConfigChannel+0x240>)
 8003630:	fba2 2303 	umull	r2, r3, r2, r3
 8003634:	0c9a      	lsrs	r2, r3, #18
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003640:	e002      	b.n	8003648 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	3b01      	subs	r3, #1
 8003646:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f9      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40012300 	.word	0x40012300
 8003668:	40012000 	.word	0x40012000
 800366c:	200070a0 	.word	0x200070a0
 8003670:	431bde83 	.word	0x431bde83

08003674 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800367c:	4b79      	ldr	r3, [pc, #484]	; (8003864 <ADC_Init+0x1f0>)
 800367e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	431a      	orrs	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	021a      	lsls	r2, r3, #8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80036cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6899      	ldr	r1, [r3, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	4a58      	ldr	r2, [pc, #352]	; (8003868 <ADC_Init+0x1f4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d022      	beq.n	8003752 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800371a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6899      	ldr	r1, [r3, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800373c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6899      	ldr	r1, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	e00f      	b.n	8003772 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003760:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003770:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0202 	bic.w	r2, r2, #2
 8003780:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6899      	ldr	r1, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	7e1b      	ldrb	r3, [r3, #24]
 800378c:	005a      	lsls	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01b      	beq.n	80037d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80037be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6859      	ldr	r1, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	3b01      	subs	r3, #1
 80037cc:	035a      	lsls	r2, r3, #13
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	e007      	b.n	80037e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	3b01      	subs	r3, #1
 8003804:	051a      	lsls	r2, r3, #20
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800381c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6899      	ldr	r1, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800382a:	025a      	lsls	r2, r3, #9
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003842:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6899      	ldr	r1, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	029a      	lsls	r2, r3, #10
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	609a      	str	r2, [r3, #8]
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	40012300 	.word	0x40012300
 8003868:	0f000001 	.word	0x0f000001

0800386c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003878:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003882:	2b00      	cmp	r3, #0
 8003884:	d13c      	bne.n	8003900 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d12b      	bne.n	80038f8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d127      	bne.n	80038f8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d006      	beq.n	80038c4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d119      	bne.n	80038f8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0220 	bic.w	r2, r2, #32
 80038d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d105      	bne.n	80038f8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	f043 0201 	orr.w	r2, r3, #1
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f7fe ffa9 	bl	8002850 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038fe:	e00e      	b.n	800391e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f7ff fd85 	bl	800341c <HAL_ADC_ErrorCallback>
}
 8003912:	e004      	b.n	800391e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
}
 800391e:	bf00      	nop
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f7ff fd67 	bl	8003408 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800393a:	bf00      	nop
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2240      	movs	r2, #64	; 0x40
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	f043 0204 	orr.w	r2, r3, #4
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f7ff fd5a 	bl	800341c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800398c:	4013      	ands	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800399c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039a2:	4a04      	ldr	r2, [pc, #16]	; (80039b4 <__NVIC_SetPriorityGrouping+0x44>)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	60d3      	str	r3, [r2, #12]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000ed00 	.word	0xe000ed00

080039b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039bc:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <__NVIC_GetPriorityGrouping+0x18>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	f003 0307 	and.w	r3, r3, #7
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	db0b      	blt.n	80039fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	f003 021f 	and.w	r2, r3, #31
 80039ec:	4907      	ldr	r1, [pc, #28]	; (8003a0c <__NVIC_EnableIRQ+0x38>)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	2001      	movs	r0, #1
 80039f6:	fa00 f202 	lsl.w	r2, r0, r2
 80039fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	e000e100 	.word	0xe000e100

08003a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	6039      	str	r1, [r7, #0]
 8003a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	db0a      	blt.n	8003a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	490c      	ldr	r1, [pc, #48]	; (8003a5c <__NVIC_SetPriority+0x4c>)
 8003a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2e:	0112      	lsls	r2, r2, #4
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	440b      	add	r3, r1
 8003a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a38:	e00a      	b.n	8003a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	4908      	ldr	r1, [pc, #32]	; (8003a60 <__NVIC_SetPriority+0x50>)
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	3b04      	subs	r3, #4
 8003a48:	0112      	lsls	r2, r2, #4
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	761a      	strb	r2, [r3, #24]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	e000e100 	.word	0xe000e100
 8003a60:	e000ed00 	.word	0xe000ed00

08003a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b089      	sub	sp, #36	; 0x24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f1c3 0307 	rsb	r3, r3, #7
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	bf28      	it	cs
 8003a82:	2304      	movcs	r3, #4
 8003a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	2b06      	cmp	r3, #6
 8003a8c:	d902      	bls.n	8003a94 <NVIC_EncodePriority+0x30>
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3b03      	subs	r3, #3
 8003a92:	e000      	b.n	8003a96 <NVIC_EncodePriority+0x32>
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a98:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aac:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	43d9      	mvns	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003abc:	4313      	orrs	r3, r2
         );
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3724      	adds	r7, #36	; 0x24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003adc:	d301      	bcc.n	8003ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e00f      	b.n	8003b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <SysTick_Config+0x40>)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aea:	210f      	movs	r1, #15
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	f7ff ff8e 	bl	8003a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <SysTick_Config+0x40>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003afa:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <SysTick_Config+0x40>)
 8003afc:	2207      	movs	r2, #7
 8003afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	e000e010 	.word	0xe000e010

08003b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ff29 	bl	8003970 <__NVIC_SetPriorityGrouping>
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b086      	sub	sp, #24
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b38:	f7ff ff3e 	bl	80039b8 <__NVIC_GetPriorityGrouping>
 8003b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	6978      	ldr	r0, [r7, #20]
 8003b44:	f7ff ff8e 	bl	8003a64 <NVIC_EncodePriority>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4e:	4611      	mov	r1, r2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff ff5d 	bl	8003a10 <__NVIC_SetPriority>
}
 8003b56:	bf00      	nop
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	4603      	mov	r3, r0
 8003b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff ff31 	bl	80039d4 <__NVIC_EnableIRQ>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff ffa2 	bl	8003acc <SysTick_Config>
 8003b88:	4603      	mov	r3, r0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ba0:	f7ff face 	bl	8003140 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e099      	b.n	8003ce4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bd0:	e00f      	b.n	8003bf2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bd2:	f7ff fab5 	bl	8003140 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b05      	cmp	r3, #5
 8003bde:	d908      	bls.n	8003bf2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2203      	movs	r2, #3
 8003bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e078      	b.n	8003ce4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e8      	bne.n	8003bd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4b38      	ldr	r3, [pc, #224]	; (8003cec <HAL_DMA_Init+0x158>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d107      	bne.n	8003c5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	4313      	orrs	r3, r2
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f023 0307 	bic.w	r3, r3, #7
 8003c72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d117      	bne.n	8003cb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00e      	beq.n	8003cb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fa6f 	bl	800417c <DMA_CheckFifoParam>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2240      	movs	r2, #64	; 0x40
 8003ca8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e016      	b.n	8003ce4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fa26 	bl	8004110 <DMA_CalcBaseAndBitshift>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ccc:	223f      	movs	r2, #63	; 0x3f
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	f010803f 	.word	0xf010803f

08003cf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_DMA_Start_IT+0x26>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e040      	b.n	8003d98 <HAL_DMA_Start_IT+0xa8>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d12f      	bne.n	8003d8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f9b8 	bl	80040b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d48:	223f      	movs	r2, #63	; 0x3f
 8003d4a:	409a      	lsls	r2, r3
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0216 	orr.w	r2, r2, #22
 8003d5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d007      	beq.n	8003d78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0208 	orr.w	r2, r2, #8
 8003d76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0201 	orr.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	e005      	b.n	8003d96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d92:	2302      	movs	r3, #2
 8003d94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003dac:	4b8e      	ldr	r3, [pc, #568]	; (8003fe8 <HAL_DMA_IRQHandler+0x248>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a8e      	ldr	r2, [pc, #568]	; (8003fec <HAL_DMA_IRQHandler+0x24c>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	0a9b      	lsrs	r3, r3, #10
 8003db8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dca:	2208      	movs	r2, #8
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01a      	beq.n	8003e0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d013      	beq.n	8003e0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0204 	bic.w	r2, r2, #4
 8003df2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df8:	2208      	movs	r2, #8
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e04:	f043 0201 	orr.w	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e10:	2201      	movs	r2, #1
 8003e12:	409a      	lsls	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d012      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2e:	2201      	movs	r2, #1
 8003e30:	409a      	lsls	r2, r3
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3a:	f043 0202 	orr.w	r2, r3, #2
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e46:	2204      	movs	r2, #4
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d012      	beq.n	8003e78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00b      	beq.n	8003e78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e64:	2204      	movs	r2, #4
 8003e66:	409a      	lsls	r2, r3
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e70:	f043 0204 	orr.w	r2, r3, #4
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7c:	2210      	movs	r2, #16
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d043      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d03c      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9a:	2210      	movs	r2, #16
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d018      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d108      	bne.n	8003ed0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d024      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	4798      	blx	r3
 8003ece:	e01f      	b.n	8003f10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01b      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	4798      	blx	r3
 8003ee0:	e016      	b.n	8003f10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d107      	bne.n	8003f00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0208 	bic.w	r2, r2, #8
 8003efe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f14:	2220      	movs	r2, #32
 8003f16:	409a      	lsls	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 808f 	beq.w	8004040 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 8087 	beq.w	8004040 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f36:	2220      	movs	r2, #32
 8003f38:	409a      	lsls	r2, r3
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d136      	bne.n	8003fb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0216 	bic.w	r2, r2, #22
 8003f58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d103      	bne.n	8003f7a <HAL_DMA_IRQHandler+0x1da>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0208 	bic.w	r2, r2, #8
 8003f88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8e:	223f      	movs	r2, #63	; 0x3f
 8003f90:	409a      	lsls	r2, r3
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d07e      	beq.n	80040ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	4798      	blx	r3
        }
        return;
 8003fb6:	e079      	b.n	80040ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d01d      	beq.n	8004002 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10d      	bne.n	8003ff0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d031      	beq.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	4798      	blx	r3
 8003fe4:	e02c      	b.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
 8003fe6:	bf00      	nop
 8003fe8:	200070a0 	.word	0x200070a0
 8003fec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d023      	beq.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	4798      	blx	r3
 8004000:	e01e      	b.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10f      	bne.n	8004030 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0210 	bic.w	r2, r2, #16
 800401e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004044:	2b00      	cmp	r3, #0
 8004046:	d032      	beq.n	80040ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d022      	beq.n	800409a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2205      	movs	r2, #5
 8004058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	3301      	adds	r3, #1
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	429a      	cmp	r2, r3
 8004076:	d307      	bcc.n	8004088 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f2      	bne.n	800406c <HAL_DMA_IRQHandler+0x2cc>
 8004086:	e000      	b.n	800408a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004088:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
 80040aa:	e000      	b.n	80040ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80040ac:	bf00      	nop
    }
  }
}
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b40      	cmp	r3, #64	; 0x40
 80040e0:	d108      	bne.n	80040f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040f2:	e007      	b.n	8004104 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	60da      	str	r2, [r3, #12]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	3b10      	subs	r3, #16
 8004120:	4a14      	ldr	r2, [pc, #80]	; (8004174 <DMA_CalcBaseAndBitshift+0x64>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	091b      	lsrs	r3, r3, #4
 8004128:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800412a:	4a13      	ldr	r2, [pc, #76]	; (8004178 <DMA_CalcBaseAndBitshift+0x68>)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b03      	cmp	r3, #3
 800413c:	d909      	bls.n	8004152 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004146:	f023 0303 	bic.w	r3, r3, #3
 800414a:	1d1a      	adds	r2, r3, #4
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	659a      	str	r2, [r3, #88]	; 0x58
 8004150:	e007      	b.n	8004162 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800415a:	f023 0303 	bic.w	r3, r3, #3
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	aaaaaaab 	.word	0xaaaaaaab
 8004178:	08006294 	.word	0x08006294

0800417c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d11f      	bne.n	80041d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b03      	cmp	r3, #3
 800419a:	d856      	bhi.n	800424a <DMA_CheckFifoParam+0xce>
 800419c:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <DMA_CheckFifoParam+0x28>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	080041b5 	.word	0x080041b5
 80041a8:	080041c7 	.word	0x080041c7
 80041ac:	080041b5 	.word	0x080041b5
 80041b0:	0800424b 	.word	0x0800424b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d046      	beq.n	800424e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c4:	e043      	b.n	800424e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041ce:	d140      	bne.n	8004252 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041d4:	e03d      	b.n	8004252 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041de:	d121      	bne.n	8004224 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d837      	bhi.n	8004256 <DMA_CheckFifoParam+0xda>
 80041e6:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <DMA_CheckFifoParam+0x70>)
 80041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ec:	080041fd 	.word	0x080041fd
 80041f0:	08004203 	.word	0x08004203
 80041f4:	080041fd 	.word	0x080041fd
 80041f8:	08004215 	.word	0x08004215
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004200:	e030      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d025      	beq.n	800425a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004212:	e022      	b.n	800425a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800421c:	d11f      	bne.n	800425e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004222:	e01c      	b.n	800425e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d903      	bls.n	8004232 <DMA_CheckFifoParam+0xb6>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b03      	cmp	r3, #3
 800422e:	d003      	beq.n	8004238 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004230:	e018      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
      break;
 8004236:	e015      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00e      	beq.n	8004262 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
      break;
 8004248:	e00b      	b.n	8004262 <DMA_CheckFifoParam+0xe6>
      break;
 800424a:	bf00      	nop
 800424c:	e00a      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 800424e:	bf00      	nop
 8004250:	e008      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 8004252:	bf00      	nop
 8004254:	e006      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 8004256:	bf00      	nop
 8004258:	e004      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 800425a:	bf00      	nop
 800425c:	e002      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;   
 800425e:	bf00      	nop
 8004260:	e000      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 8004262:	bf00      	nop
    }
  } 
  
  return status; 
 8004264:	7bfb      	ldrb	r3, [r7, #15]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop

08004274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004274:	b480      	push	{r7}
 8004276:	b089      	sub	sp, #36	; 0x24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004286:	2300      	movs	r3, #0
 8004288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800428a:	2300      	movs	r3, #0
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	e159      	b.n	8004544 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004290:	2201      	movs	r2, #1
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4013      	ands	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	f040 8148 	bne.w	800453e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d005      	beq.n	80042c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d130      	bne.n	8004328 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	2203      	movs	r2, #3
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4013      	ands	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042fc:	2201      	movs	r2, #1
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4013      	ands	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	091b      	lsrs	r3, r3, #4
 8004312:	f003 0201 	and.w	r2, r3, #1
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4313      	orrs	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	2b03      	cmp	r3, #3
 8004332:	d017      	beq.n	8004364 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	2203      	movs	r2, #3
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	43db      	mvns	r3, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4313      	orrs	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d123      	bne.n	80043b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	08da      	lsrs	r2, r3, #3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3208      	adds	r2, #8
 8004378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800437c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	220f      	movs	r2, #15
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4013      	ands	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	08da      	lsrs	r2, r3, #3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3208      	adds	r2, #8
 80043b2:	69b9      	ldr	r1, [r7, #24]
 80043b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	2203      	movs	r2, #3
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 0203 	and.w	r2, r3, #3
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80a2 	beq.w	800453e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	4b57      	ldr	r3, [pc, #348]	; (800455c <HAL_GPIO_Init+0x2e8>)
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	4a56      	ldr	r2, [pc, #344]	; (800455c <HAL_GPIO_Init+0x2e8>)
 8004404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004408:	6453      	str	r3, [r2, #68]	; 0x44
 800440a:	4b54      	ldr	r3, [pc, #336]	; (800455c <HAL_GPIO_Init+0x2e8>)
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004416:	4a52      	ldr	r2, [pc, #328]	; (8004560 <HAL_GPIO_Init+0x2ec>)
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	089b      	lsrs	r3, r3, #2
 800441c:	3302      	adds	r3, #2
 800441e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	220f      	movs	r2, #15
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43db      	mvns	r3, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4013      	ands	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a49      	ldr	r2, [pc, #292]	; (8004564 <HAL_GPIO_Init+0x2f0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d019      	beq.n	8004476 <HAL_GPIO_Init+0x202>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a48      	ldr	r2, [pc, #288]	; (8004568 <HAL_GPIO_Init+0x2f4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d013      	beq.n	8004472 <HAL_GPIO_Init+0x1fe>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a47      	ldr	r2, [pc, #284]	; (800456c <HAL_GPIO_Init+0x2f8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00d      	beq.n	800446e <HAL_GPIO_Init+0x1fa>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a46      	ldr	r2, [pc, #280]	; (8004570 <HAL_GPIO_Init+0x2fc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d007      	beq.n	800446a <HAL_GPIO_Init+0x1f6>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a45      	ldr	r2, [pc, #276]	; (8004574 <HAL_GPIO_Init+0x300>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d101      	bne.n	8004466 <HAL_GPIO_Init+0x1f2>
 8004462:	2304      	movs	r3, #4
 8004464:	e008      	b.n	8004478 <HAL_GPIO_Init+0x204>
 8004466:	2307      	movs	r3, #7
 8004468:	e006      	b.n	8004478 <HAL_GPIO_Init+0x204>
 800446a:	2303      	movs	r3, #3
 800446c:	e004      	b.n	8004478 <HAL_GPIO_Init+0x204>
 800446e:	2302      	movs	r3, #2
 8004470:	e002      	b.n	8004478 <HAL_GPIO_Init+0x204>
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <HAL_GPIO_Init+0x204>
 8004476:	2300      	movs	r3, #0
 8004478:	69fa      	ldr	r2, [r7, #28]
 800447a:	f002 0203 	and.w	r2, r2, #3
 800447e:	0092      	lsls	r2, r2, #2
 8004480:	4093      	lsls	r3, r2
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4313      	orrs	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004488:	4935      	ldr	r1, [pc, #212]	; (8004560 <HAL_GPIO_Init+0x2ec>)
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	089b      	lsrs	r3, r3, #2
 800448e:	3302      	adds	r3, #2
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004496:	4b38      	ldr	r3, [pc, #224]	; (8004578 <HAL_GPIO_Init+0x304>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	43db      	mvns	r3, r3
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4013      	ands	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044ba:	4a2f      	ldr	r2, [pc, #188]	; (8004578 <HAL_GPIO_Init+0x304>)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044c0:	4b2d      	ldr	r3, [pc, #180]	; (8004578 <HAL_GPIO_Init+0x304>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	43db      	mvns	r3, r3
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4013      	ands	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044e4:	4a24      	ldr	r2, [pc, #144]	; (8004578 <HAL_GPIO_Init+0x304>)
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044ea:	4b23      	ldr	r3, [pc, #140]	; (8004578 <HAL_GPIO_Init+0x304>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	43db      	mvns	r3, r3
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	4013      	ands	r3, r2
 80044f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800450e:	4a1a      	ldr	r2, [pc, #104]	; (8004578 <HAL_GPIO_Init+0x304>)
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004514:	4b18      	ldr	r3, [pc, #96]	; (8004578 <HAL_GPIO_Init+0x304>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	43db      	mvns	r3, r3
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4013      	ands	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004538:	4a0f      	ldr	r2, [pc, #60]	; (8004578 <HAL_GPIO_Init+0x304>)
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	3301      	adds	r3, #1
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	2b0f      	cmp	r3, #15
 8004548:	f67f aea2 	bls.w	8004290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800454c:	bf00      	nop
 800454e:	bf00      	nop
 8004550:	3724      	adds	r7, #36	; 0x24
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40023800 	.word	0x40023800
 8004560:	40013800 	.word	0x40013800
 8004564:	40020000 	.word	0x40020000
 8004568:	40020400 	.word	0x40020400
 800456c:	40020800 	.word	0x40020800
 8004570:	40020c00 	.word	0x40020c00
 8004574:	40021000 	.word	0x40021000
 8004578:	40013c00 	.word	0x40013c00

0800457c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	807b      	strh	r3, [r7, #2]
 8004588:	4613      	mov	r3, r2
 800458a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800458c:	787b      	ldrb	r3, [r7, #1]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004592:	887a      	ldrh	r2, [r7, #2]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004598:	e003      	b.n	80045a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800459a:	887b      	ldrh	r3, [r7, #2]
 800459c:	041a      	lsls	r2, r3, #16
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	619a      	str	r2, [r3, #24]
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e12b      	b.n	800481a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fe fbc2 	bl	8002d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2224      	movs	r2, #36	; 0x24
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0201 	bic.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004602:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004612:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004614:	f001 f858 	bl	80056c8 <HAL_RCC_GetPCLK1Freq>
 8004618:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4a81      	ldr	r2, [pc, #516]	; (8004824 <HAL_I2C_Init+0x274>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d807      	bhi.n	8004634 <HAL_I2C_Init+0x84>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4a80      	ldr	r2, [pc, #512]	; (8004828 <HAL_I2C_Init+0x278>)
 8004628:	4293      	cmp	r3, r2
 800462a:	bf94      	ite	ls
 800462c:	2301      	movls	r3, #1
 800462e:	2300      	movhi	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	e006      	b.n	8004642 <HAL_I2C_Init+0x92>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4a7d      	ldr	r2, [pc, #500]	; (800482c <HAL_I2C_Init+0x27c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	bf94      	ite	ls
 800463c:	2301      	movls	r3, #1
 800463e:	2300      	movhi	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e0e7      	b.n	800481a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4a78      	ldr	r2, [pc, #480]	; (8004830 <HAL_I2C_Init+0x280>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	0c9b      	lsrs	r3, r3, #18
 8004654:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	4a6a      	ldr	r2, [pc, #424]	; (8004824 <HAL_I2C_Init+0x274>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d802      	bhi.n	8004684 <HAL_I2C_Init+0xd4>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	3301      	adds	r3, #1
 8004682:	e009      	b.n	8004698 <HAL_I2C_Init+0xe8>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800468a:	fb02 f303 	mul.w	r3, r2, r3
 800468e:	4a69      	ldr	r2, [pc, #420]	; (8004834 <HAL_I2C_Init+0x284>)
 8004690:	fba2 2303 	umull	r2, r3, r2, r3
 8004694:	099b      	lsrs	r3, r3, #6
 8004696:	3301      	adds	r3, #1
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	430b      	orrs	r3, r1
 800469e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	495c      	ldr	r1, [pc, #368]	; (8004824 <HAL_I2C_Init+0x274>)
 80046b4:	428b      	cmp	r3, r1
 80046b6:	d819      	bhi.n	80046ec <HAL_I2C_Init+0x13c>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1e59      	subs	r1, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80046c6:	1c59      	adds	r1, r3, #1
 80046c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80046cc:	400b      	ands	r3, r1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_I2C_Init+0x138>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1e59      	subs	r1, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80046e0:	3301      	adds	r3, #1
 80046e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e6:	e051      	b.n	800478c <HAL_I2C_Init+0x1dc>
 80046e8:	2304      	movs	r3, #4
 80046ea:	e04f      	b.n	800478c <HAL_I2C_Init+0x1dc>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d111      	bne.n	8004718 <HAL_I2C_Init+0x168>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	1e58      	subs	r0, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6859      	ldr	r1, [r3, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	440b      	add	r3, r1
 8004702:	fbb0 f3f3 	udiv	r3, r0, r3
 8004706:	3301      	adds	r3, #1
 8004708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470c:	2b00      	cmp	r3, #0
 800470e:	bf0c      	ite	eq
 8004710:	2301      	moveq	r3, #1
 8004712:	2300      	movne	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	e012      	b.n	800473e <HAL_I2C_Init+0x18e>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	1e58      	subs	r0, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6859      	ldr	r1, [r3, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	0099      	lsls	r1, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	fbb0 f3f3 	udiv	r3, r0, r3
 800472e:	3301      	adds	r3, #1
 8004730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf0c      	ite	eq
 8004738:	2301      	moveq	r3, #1
 800473a:	2300      	movne	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_I2C_Init+0x196>
 8004742:	2301      	movs	r3, #1
 8004744:	e022      	b.n	800478c <HAL_I2C_Init+0x1dc>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10e      	bne.n	800476c <HAL_I2C_Init+0x1bc>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1e58      	subs	r0, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6859      	ldr	r1, [r3, #4]
 8004756:	460b      	mov	r3, r1
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	440b      	add	r3, r1
 800475c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004760:	3301      	adds	r3, #1
 8004762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800476a:	e00f      	b.n	800478c <HAL_I2C_Init+0x1dc>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	1e58      	subs	r0, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6859      	ldr	r1, [r3, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	0099      	lsls	r1, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004782:	3301      	adds	r3, #1
 8004784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004788:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	6809      	ldr	r1, [r1, #0]
 8004790:	4313      	orrs	r3, r2
 8004792:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69da      	ldr	r2, [r3, #28]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6911      	ldr	r1, [r2, #16]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	68d2      	ldr	r2, [r2, #12]
 80047c6:	4311      	orrs	r1, r2
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	430b      	orrs	r3, r1
 80047ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695a      	ldr	r2, [r3, #20]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	000186a0 	.word	0x000186a0
 8004828:	001e847f 	.word	0x001e847f
 800482c:	003d08ff 	.word	0x003d08ff
 8004830:	431bde83 	.word	0x431bde83
 8004834:	10624dd3 	.word	0x10624dd3

08004838 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af02      	add	r7, sp, #8
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	4608      	mov	r0, r1
 8004842:	4611      	mov	r1, r2
 8004844:	461a      	mov	r2, r3
 8004846:	4603      	mov	r3, r0
 8004848:	817b      	strh	r3, [r7, #10]
 800484a:	460b      	mov	r3, r1
 800484c:	813b      	strh	r3, [r7, #8]
 800484e:	4613      	mov	r3, r2
 8004850:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004852:	f7fe fc75 	bl	8003140 <HAL_GetTick>
 8004856:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b20      	cmp	r3, #32
 8004862:	f040 80d9 	bne.w	8004a18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	2319      	movs	r3, #25
 800486c:	2201      	movs	r2, #1
 800486e:	496d      	ldr	r1, [pc, #436]	; (8004a24 <HAL_I2C_Mem_Write+0x1ec>)
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f971 	bl	8004b58 <I2C_WaitOnFlagUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800487c:	2302      	movs	r3, #2
 800487e:	e0cc      	b.n	8004a1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_I2C_Mem_Write+0x56>
 800488a:	2302      	movs	r3, #2
 800488c:	e0c5      	b.n	8004a1a <HAL_I2C_Mem_Write+0x1e2>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d007      	beq.n	80048b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2221      	movs	r2, #33	; 0x21
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2240      	movs	r2, #64	; 0x40
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a3a      	ldr	r2, [r7, #32]
 80048de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4a4d      	ldr	r2, [pc, #308]	; (8004a28 <HAL_I2C_Mem_Write+0x1f0>)
 80048f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048f6:	88f8      	ldrh	r0, [r7, #6]
 80048f8:	893a      	ldrh	r2, [r7, #8]
 80048fa:	8979      	ldrh	r1, [r7, #10]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	9301      	str	r3, [sp, #4]
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	4603      	mov	r3, r0
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f890 	bl	8004a2c <I2C_RequestMemoryWrite>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d052      	beq.n	80049b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e081      	b.n	8004a1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 f9f2 	bl	8004d04 <I2C_WaitOnTXEFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00d      	beq.n	8004942 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	2b04      	cmp	r3, #4
 800492c:	d107      	bne.n	800493e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800493c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e06b      	b.n	8004a1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	781a      	ldrb	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b04      	cmp	r3, #4
 800497e:	d11b      	bne.n	80049b8 <HAL_I2C_Mem_Write+0x180>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004984:	2b00      	cmp	r3, #0
 8004986:	d017      	beq.n	80049b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	781a      	ldrb	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1aa      	bne.n	8004916 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f9de 	bl	8004d86 <I2C_WaitOnBTFFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00d      	beq.n	80049ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d107      	bne.n	80049e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e016      	b.n	8004a1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	e000      	b.n	8004a1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a18:	2302      	movs	r3, #2
  }
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	00100002 	.word	0x00100002
 8004a28:	ffff0000 	.word	0xffff0000

08004a2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	4608      	mov	r0, r1
 8004a36:	4611      	mov	r1, r2
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	817b      	strh	r3, [r7, #10]
 8004a3e:	460b      	mov	r3, r1
 8004a40:	813b      	strh	r3, [r7, #8]
 8004a42:	4613      	mov	r3, r2
 8004a44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 f878 	bl	8004b58 <I2C_WaitOnFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00d      	beq.n	8004a8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a7c:	d103      	bne.n	8004a86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e05f      	b.n	8004b4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a8a:	897b      	ldrh	r3, [r7, #10]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	461a      	mov	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	6a3a      	ldr	r2, [r7, #32]
 8004a9e:	492d      	ldr	r1, [pc, #180]	; (8004b54 <I2C_RequestMemoryWrite+0x128>)
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 f8b0 	bl	8004c06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e04c      	b.n	8004b4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac8:	6a39      	ldr	r1, [r7, #32]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f91a 	bl	8004d04 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00d      	beq.n	8004af2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d107      	bne.n	8004aee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e02b      	b.n	8004b4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d105      	bne.n	8004b04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004af8:	893b      	ldrh	r3, [r7, #8]
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	611a      	str	r2, [r3, #16]
 8004b02:	e021      	b.n	8004b48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b04:	893b      	ldrh	r3, [r7, #8]
 8004b06:	0a1b      	lsrs	r3, r3, #8
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b14:	6a39      	ldr	r1, [r7, #32]
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 f8f4 	bl	8004d04 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00d      	beq.n	8004b3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d107      	bne.n	8004b3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e005      	b.n	8004b4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b3e:	893b      	ldrh	r3, [r7, #8]
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	00010002 	.word	0x00010002

08004b58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	4613      	mov	r3, r2
 8004b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b68:	e025      	b.n	8004bb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b70:	d021      	beq.n	8004bb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b72:	f7fe fae5 	bl	8003140 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d302      	bcc.n	8004b88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d116      	bne.n	8004bb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f043 0220 	orr.w	r2, r3, #32
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e023      	b.n	8004bfe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	0c1b      	lsrs	r3, r3, #16
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d10d      	bne.n	8004bdc <I2C_WaitOnFlagUntilTimeout+0x84>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	43da      	mvns	r2, r3
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bf0c      	ite	eq
 8004bd2:	2301      	moveq	r3, #1
 8004bd4:	2300      	movne	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	e00c      	b.n	8004bf6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	43da      	mvns	r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4013      	ands	r3, r2
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	bf0c      	ite	eq
 8004bee:	2301      	moveq	r3, #1
 8004bf0:	2300      	movne	r3, #0
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d0b6      	beq.n	8004b6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c14:	e051      	b.n	8004cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c24:	d123      	bne.n	8004c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f043 0204 	orr.w	r2, r3, #4
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e046      	b.n	8004cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d021      	beq.n	8004cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c76:	f7fe fa63 	bl	8003140 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d302      	bcc.n	8004c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d116      	bne.n	8004cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f043 0220 	orr.w	r2, r3, #32
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e020      	b.n	8004cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	0c1b      	lsrs	r3, r3, #16
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d10c      	bne.n	8004cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	43da      	mvns	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	bf14      	ite	ne
 8004cd6:	2301      	movne	r3, #1
 8004cd8:	2300      	moveq	r3, #0
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	e00b      	b.n	8004cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	43da      	mvns	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	bf14      	ite	ne
 8004cf0:	2301      	movne	r3, #1
 8004cf2:	2300      	moveq	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d18d      	bne.n	8004c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d10:	e02d      	b.n	8004d6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f878 	bl	8004e08 <I2C_IsAcknowledgeFailed>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e02d      	b.n	8004d7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d28:	d021      	beq.n	8004d6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2a:	f7fe fa09 	bl	8003140 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d302      	bcc.n	8004d40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d116      	bne.n	8004d6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	f043 0220 	orr.w	r2, r3, #32
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e007      	b.n	8004d7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d78:	2b80      	cmp	r3, #128	; 0x80
 8004d7a:	d1ca      	bne.n	8004d12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d92:	e02d      	b.n	8004df0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 f837 	bl	8004e08 <I2C_IsAcknowledgeFailed>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e02d      	b.n	8004e00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004daa:	d021      	beq.n	8004df0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dac:	f7fe f9c8 	bl	8003140 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d302      	bcc.n	8004dc2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d116      	bne.n	8004df0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	f043 0220 	orr.w	r2, r3, #32
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e007      	b.n	8004e00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d1ca      	bne.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1e:	d11b      	bne.n	8004e58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	f043 0204 	orr.w	r2, r3, #4
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e000      	b.n	8004e5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e267      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d075      	beq.n	8004f72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e86:	4b88      	ldr	r3, [pc, #544]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d00c      	beq.n	8004eac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e92:	4b85      	ldr	r3, [pc, #532]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d112      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e9e:	4b82      	ldr	r3, [pc, #520]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eaa:	d10b      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eac:	4b7e      	ldr	r3, [pc, #504]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d05b      	beq.n	8004f70 <HAL_RCC_OscConfig+0x108>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d157      	bne.n	8004f70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e242      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ecc:	d106      	bne.n	8004edc <HAL_RCC_OscConfig+0x74>
 8004ece:	4b76      	ldr	r3, [pc, #472]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a75      	ldr	r2, [pc, #468]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	e01d      	b.n	8004f18 <HAL_RCC_OscConfig+0xb0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ee4:	d10c      	bne.n	8004f00 <HAL_RCC_OscConfig+0x98>
 8004ee6:	4b70      	ldr	r3, [pc, #448]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a6f      	ldr	r2, [pc, #444]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	4b6d      	ldr	r3, [pc, #436]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a6c      	ldr	r2, [pc, #432]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	e00b      	b.n	8004f18 <HAL_RCC_OscConfig+0xb0>
 8004f00:	4b69      	ldr	r3, [pc, #420]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a68      	ldr	r2, [pc, #416]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	4b66      	ldr	r3, [pc, #408]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a65      	ldr	r2, [pc, #404]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d013      	beq.n	8004f48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f20:	f7fe f90e 	bl	8003140 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f28:	f7fe f90a 	bl	8003140 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b64      	cmp	r3, #100	; 0x64
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e207      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3a:	4b5b      	ldr	r3, [pc, #364]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f0      	beq.n	8004f28 <HAL_RCC_OscConfig+0xc0>
 8004f46:	e014      	b.n	8004f72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fe f8fa 	bl	8003140 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f50:	f7fe f8f6 	bl	8003140 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	; 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e1f3      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f62:	4b51      	ldr	r3, [pc, #324]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f0      	bne.n	8004f50 <HAL_RCC_OscConfig+0xe8>
 8004f6e:	e000      	b.n	8004f72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d063      	beq.n	8005046 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f7e:	4b4a      	ldr	r3, [pc, #296]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00b      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f8a:	4b47      	ldr	r3, [pc, #284]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d11c      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f96:	4b44      	ldr	r3, [pc, #272]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d116      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fa2:	4b41      	ldr	r3, [pc, #260]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d005      	beq.n	8004fba <HAL_RCC_OscConfig+0x152>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d001      	beq.n	8004fba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e1c7      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fba:	4b3b      	ldr	r3, [pc, #236]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	4937      	ldr	r1, [pc, #220]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fce:	e03a      	b.n	8005046 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d020      	beq.n	800501a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fd8:	4b34      	ldr	r3, [pc, #208]	; (80050ac <HAL_RCC_OscConfig+0x244>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fde:	f7fe f8af 	bl	8003140 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fe6:	f7fe f8ab 	bl	8003140 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e1a8      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff8:	4b2b      	ldr	r3, [pc, #172]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0f0      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005004:	4b28      	ldr	r3, [pc, #160]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	4925      	ldr	r1, [pc, #148]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8005014:	4313      	orrs	r3, r2
 8005016:	600b      	str	r3, [r1, #0]
 8005018:	e015      	b.n	8005046 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800501a:	4b24      	ldr	r3, [pc, #144]	; (80050ac <HAL_RCC_OscConfig+0x244>)
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005020:	f7fe f88e 	bl	8003140 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005028:	f7fe f88a 	bl	8003140 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e187      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800503a:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f0      	bne.n	8005028 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0308 	and.w	r3, r3, #8
 800504e:	2b00      	cmp	r3, #0
 8005050:	d036      	beq.n	80050c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d016      	beq.n	8005088 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800505a:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <HAL_RCC_OscConfig+0x248>)
 800505c:	2201      	movs	r2, #1
 800505e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005060:	f7fe f86e 	bl	8003140 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005068:	f7fe f86a 	bl	8003140 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e167      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800507a:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 800507c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0f0      	beq.n	8005068 <HAL_RCC_OscConfig+0x200>
 8005086:	e01b      	b.n	80050c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005088:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <HAL_RCC_OscConfig+0x248>)
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800508e:	f7fe f857 	bl	8003140 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005094:	e00e      	b.n	80050b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005096:	f7fe f853 	bl	8003140 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d907      	bls.n	80050b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e150      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
 80050a8:	40023800 	.word	0x40023800
 80050ac:	42470000 	.word	0x42470000
 80050b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b4:	4b88      	ldr	r3, [pc, #544]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80050b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1ea      	bne.n	8005096 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 8097 	beq.w	80051fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ce:	2300      	movs	r3, #0
 80050d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050d2:	4b81      	ldr	r3, [pc, #516]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10f      	bne.n	80050fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050de:	2300      	movs	r3, #0
 80050e0:	60bb      	str	r3, [r7, #8]
 80050e2:	4b7d      	ldr	r3, [pc, #500]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	4a7c      	ldr	r2, [pc, #496]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80050e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ec:	6413      	str	r3, [r2, #64]	; 0x40
 80050ee:	4b7a      	ldr	r3, [pc, #488]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f6:	60bb      	str	r3, [r7, #8]
 80050f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050fa:	2301      	movs	r3, #1
 80050fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fe:	4b77      	ldr	r3, [pc, #476]	; (80052dc <HAL_RCC_OscConfig+0x474>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005106:	2b00      	cmp	r3, #0
 8005108:	d118      	bne.n	800513c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800510a:	4b74      	ldr	r3, [pc, #464]	; (80052dc <HAL_RCC_OscConfig+0x474>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a73      	ldr	r2, [pc, #460]	; (80052dc <HAL_RCC_OscConfig+0x474>)
 8005110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005116:	f7fe f813 	bl	8003140 <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800511c:	e008      	b.n	8005130 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800511e:	f7fe f80f 	bl	8003140 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e10c      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005130:	4b6a      	ldr	r3, [pc, #424]	; (80052dc <HAL_RCC_OscConfig+0x474>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0f0      	beq.n	800511e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d106      	bne.n	8005152 <HAL_RCC_OscConfig+0x2ea>
 8005144:	4b64      	ldr	r3, [pc, #400]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 8005146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005148:	4a63      	ldr	r2, [pc, #396]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 800514a:	f043 0301 	orr.w	r3, r3, #1
 800514e:	6713      	str	r3, [r2, #112]	; 0x70
 8005150:	e01c      	b.n	800518c <HAL_RCC_OscConfig+0x324>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	2b05      	cmp	r3, #5
 8005158:	d10c      	bne.n	8005174 <HAL_RCC_OscConfig+0x30c>
 800515a:	4b5f      	ldr	r3, [pc, #380]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 800515c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515e:	4a5e      	ldr	r2, [pc, #376]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 8005160:	f043 0304 	orr.w	r3, r3, #4
 8005164:	6713      	str	r3, [r2, #112]	; 0x70
 8005166:	4b5c      	ldr	r3, [pc, #368]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 8005168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516a:	4a5b      	ldr	r2, [pc, #364]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 800516c:	f043 0301 	orr.w	r3, r3, #1
 8005170:	6713      	str	r3, [r2, #112]	; 0x70
 8005172:	e00b      	b.n	800518c <HAL_RCC_OscConfig+0x324>
 8005174:	4b58      	ldr	r3, [pc, #352]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 8005176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005178:	4a57      	ldr	r2, [pc, #348]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 800517a:	f023 0301 	bic.w	r3, r3, #1
 800517e:	6713      	str	r3, [r2, #112]	; 0x70
 8005180:	4b55      	ldr	r3, [pc, #340]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 8005182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005184:	4a54      	ldr	r2, [pc, #336]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 8005186:	f023 0304 	bic.w	r3, r3, #4
 800518a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d015      	beq.n	80051c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005194:	f7fd ffd4 	bl	8003140 <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800519a:	e00a      	b.n	80051b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800519c:	f7fd ffd0 	bl	8003140 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e0cb      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b2:	4b49      	ldr	r3, [pc, #292]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80051b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0ee      	beq.n	800519c <HAL_RCC_OscConfig+0x334>
 80051be:	e014      	b.n	80051ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051c0:	f7fd ffbe 	bl	8003140 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c6:	e00a      	b.n	80051de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c8:	f7fd ffba 	bl	8003140 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e0b5      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051de:	4b3e      	ldr	r3, [pc, #248]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80051e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1ee      	bne.n	80051c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051ea:	7dfb      	ldrb	r3, [r7, #23]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d105      	bne.n	80051fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f0:	4b39      	ldr	r3, [pc, #228]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80051f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f4:	4a38      	ldr	r2, [pc, #224]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80051f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 80a1 	beq.w	8005348 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005206:	4b34      	ldr	r3, [pc, #208]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 030c 	and.w	r3, r3, #12
 800520e:	2b08      	cmp	r3, #8
 8005210:	d05c      	beq.n	80052cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	2b02      	cmp	r3, #2
 8005218:	d141      	bne.n	800529e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521a:	4b31      	ldr	r3, [pc, #196]	; (80052e0 <HAL_RCC_OscConfig+0x478>)
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005220:	f7fd ff8e 	bl	8003140 <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005228:	f7fd ff8a 	bl	8003140 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e087      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523a:	4b27      	ldr	r3, [pc, #156]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f0      	bne.n	8005228 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69da      	ldr	r2, [r3, #28]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	019b      	lsls	r3, r3, #6
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525c:	085b      	lsrs	r3, r3, #1
 800525e:	3b01      	subs	r3, #1
 8005260:	041b      	lsls	r3, r3, #16
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	061b      	lsls	r3, r3, #24
 800526a:	491b      	ldr	r1, [pc, #108]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 800526c:	4313      	orrs	r3, r2
 800526e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005270:	4b1b      	ldr	r3, [pc, #108]	; (80052e0 <HAL_RCC_OscConfig+0x478>)
 8005272:	2201      	movs	r2, #1
 8005274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005276:	f7fd ff63 	bl	8003140 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800527c:	e008      	b.n	8005290 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800527e:	f7fd ff5f 	bl	8003140 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e05c      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005290:	4b11      	ldr	r3, [pc, #68]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0f0      	beq.n	800527e <HAL_RCC_OscConfig+0x416>
 800529c:	e054      	b.n	8005348 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529e:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <HAL_RCC_OscConfig+0x478>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a4:	f7fd ff4c 	bl	8003140 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ac:	f7fd ff48 	bl	8003140 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e045      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f0      	bne.n	80052ac <HAL_RCC_OscConfig+0x444>
 80052ca:	e03d      	b.n	8005348 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d107      	bne.n	80052e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e038      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
 80052d8:	40023800 	.word	0x40023800
 80052dc:	40007000 	.word	0x40007000
 80052e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052e4:	4b1b      	ldr	r3, [pc, #108]	; (8005354 <HAL_RCC_OscConfig+0x4ec>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d028      	beq.n	8005344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d121      	bne.n	8005344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530a:	429a      	cmp	r2, r3
 800530c:	d11a      	bne.n	8005344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005314:	4013      	ands	r3, r2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800531a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800531c:	4293      	cmp	r3, r2
 800531e:	d111      	bne.n	8005344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532a:	085b      	lsrs	r3, r3, #1
 800532c:	3b01      	subs	r3, #1
 800532e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005330:	429a      	cmp	r2, r3
 8005332:	d107      	bne.n	8005344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005340:	429a      	cmp	r2, r3
 8005342:	d001      	beq.n	8005348 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40023800 	.word	0x40023800

08005358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e0cc      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800536c:	4b68      	ldr	r3, [pc, #416]	; (8005510 <HAL_RCC_ClockConfig+0x1b8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d90c      	bls.n	8005394 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537a:	4b65      	ldr	r3, [pc, #404]	; (8005510 <HAL_RCC_ClockConfig+0x1b8>)
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005382:	4b63      	ldr	r3, [pc, #396]	; (8005510 <HAL_RCC_ClockConfig+0x1b8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d001      	beq.n	8005394 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0b8      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d020      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d005      	beq.n	80053b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053ac:	4b59      	ldr	r3, [pc, #356]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	4a58      	ldr	r2, [pc, #352]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053c4:	4b53      	ldr	r3, [pc, #332]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	4a52      	ldr	r2, [pc, #328]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d0:	4b50      	ldr	r3, [pc, #320]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	494d      	ldr	r1, [pc, #308]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d044      	beq.n	8005478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d107      	bne.n	8005406 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f6:	4b47      	ldr	r3, [pc, #284]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d119      	bne.n	8005436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e07f      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d003      	beq.n	8005416 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005412:	2b03      	cmp	r3, #3
 8005414:	d107      	bne.n	8005426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005416:	4b3f      	ldr	r3, [pc, #252]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d109      	bne.n	8005436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e06f      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005426:	4b3b      	ldr	r3, [pc, #236]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e067      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005436:	4b37      	ldr	r3, [pc, #220]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f023 0203 	bic.w	r2, r3, #3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	4934      	ldr	r1, [pc, #208]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 8005444:	4313      	orrs	r3, r2
 8005446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005448:	f7fd fe7a 	bl	8003140 <HAL_GetTick>
 800544c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544e:	e00a      	b.n	8005466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005450:	f7fd fe76 	bl	8003140 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	f241 3288 	movw	r2, #5000	; 0x1388
 800545e:	4293      	cmp	r3, r2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e04f      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005466:	4b2b      	ldr	r3, [pc, #172]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 020c 	and.w	r2, r3, #12
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	429a      	cmp	r2, r3
 8005476:	d1eb      	bne.n	8005450 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005478:	4b25      	ldr	r3, [pc, #148]	; (8005510 <HAL_RCC_ClockConfig+0x1b8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d20c      	bcs.n	80054a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005486:	4b22      	ldr	r3, [pc, #136]	; (8005510 <HAL_RCC_ClockConfig+0x1b8>)
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800548e:	4b20      	ldr	r3, [pc, #128]	; (8005510 <HAL_RCC_ClockConfig+0x1b8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d001      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e032      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d008      	beq.n	80054be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054ac:	4b19      	ldr	r3, [pc, #100]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4916      	ldr	r1, [pc, #88]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d009      	beq.n	80054de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ca:	4b12      	ldr	r3, [pc, #72]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	490e      	ldr	r1, [pc, #56]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054de:	f000 f821 	bl	8005524 <HAL_RCC_GetSysClockFreq>
 80054e2:	4602      	mov	r2, r0
 80054e4:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	490a      	ldr	r1, [pc, #40]	; (8005518 <HAL_RCC_ClockConfig+0x1c0>)
 80054f0:	5ccb      	ldrb	r3, [r1, r3]
 80054f2:	fa22 f303 	lsr.w	r3, r2, r3
 80054f6:	4a09      	ldr	r2, [pc, #36]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 80054f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054fa:	4b09      	ldr	r3, [pc, #36]	; (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fd fdda 	bl	80030b8 <HAL_InitTick>

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40023c00 	.word	0x40023c00
 8005514:	40023800 	.word	0x40023800
 8005518:	0800627c 	.word	0x0800627c
 800551c:	200070a0 	.word	0x200070a0
 8005520:	200070a4 	.word	0x200070a4

08005524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005528:	b090      	sub	sp, #64	; 0x40
 800552a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800552c:	2300      	movs	r3, #0
 800552e:	637b      	str	r3, [r7, #52]	; 0x34
 8005530:	2300      	movs	r3, #0
 8005532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005534:	2300      	movs	r3, #0
 8005536:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800553c:	4b59      	ldr	r3, [pc, #356]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f003 030c 	and.w	r3, r3, #12
 8005544:	2b08      	cmp	r3, #8
 8005546:	d00d      	beq.n	8005564 <HAL_RCC_GetSysClockFreq+0x40>
 8005548:	2b08      	cmp	r3, #8
 800554a:	f200 80a1 	bhi.w	8005690 <HAL_RCC_GetSysClockFreq+0x16c>
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <HAL_RCC_GetSysClockFreq+0x34>
 8005552:	2b04      	cmp	r3, #4
 8005554:	d003      	beq.n	800555e <HAL_RCC_GetSysClockFreq+0x3a>
 8005556:	e09b      	b.n	8005690 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005558:	4b53      	ldr	r3, [pc, #332]	; (80056a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800555a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800555c:	e09b      	b.n	8005696 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800555e:	4b53      	ldr	r3, [pc, #332]	; (80056ac <HAL_RCC_GetSysClockFreq+0x188>)
 8005560:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005562:	e098      	b.n	8005696 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005564:	4b4f      	ldr	r3, [pc, #316]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800556c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800556e:	4b4d      	ldr	r3, [pc, #308]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d028      	beq.n	80055cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800557a:	4b4a      	ldr	r3, [pc, #296]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	099b      	lsrs	r3, r3, #6
 8005580:	2200      	movs	r2, #0
 8005582:	623b      	str	r3, [r7, #32]
 8005584:	627a      	str	r2, [r7, #36]	; 0x24
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800558c:	2100      	movs	r1, #0
 800558e:	4b47      	ldr	r3, [pc, #284]	; (80056ac <HAL_RCC_GetSysClockFreq+0x188>)
 8005590:	fb03 f201 	mul.w	r2, r3, r1
 8005594:	2300      	movs	r3, #0
 8005596:	fb00 f303 	mul.w	r3, r0, r3
 800559a:	4413      	add	r3, r2
 800559c:	4a43      	ldr	r2, [pc, #268]	; (80056ac <HAL_RCC_GetSysClockFreq+0x188>)
 800559e:	fba0 1202 	umull	r1, r2, r0, r2
 80055a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055a4:	460a      	mov	r2, r1
 80055a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80055a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055aa:	4413      	add	r3, r2
 80055ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b0:	2200      	movs	r2, #0
 80055b2:	61bb      	str	r3, [r7, #24]
 80055b4:	61fa      	str	r2, [r7, #28]
 80055b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80055be:	f7fb fa97 	bl	8000af0 <__aeabi_uldivmod>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4613      	mov	r3, r2
 80055c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ca:	e053      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055cc:	4b35      	ldr	r3, [pc, #212]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	099b      	lsrs	r3, r3, #6
 80055d2:	2200      	movs	r2, #0
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	617a      	str	r2, [r7, #20]
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80055de:	f04f 0b00 	mov.w	fp, #0
 80055e2:	4652      	mov	r2, sl
 80055e4:	465b      	mov	r3, fp
 80055e6:	f04f 0000 	mov.w	r0, #0
 80055ea:	f04f 0100 	mov.w	r1, #0
 80055ee:	0159      	lsls	r1, r3, #5
 80055f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055f4:	0150      	lsls	r0, r2, #5
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	ebb2 080a 	subs.w	r8, r2, sl
 80055fe:	eb63 090b 	sbc.w	r9, r3, fp
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	f04f 0300 	mov.w	r3, #0
 800560a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800560e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005612:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005616:	ebb2 0408 	subs.w	r4, r2, r8
 800561a:	eb63 0509 	sbc.w	r5, r3, r9
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	00eb      	lsls	r3, r5, #3
 8005628:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800562c:	00e2      	lsls	r2, r4, #3
 800562e:	4614      	mov	r4, r2
 8005630:	461d      	mov	r5, r3
 8005632:	eb14 030a 	adds.w	r3, r4, sl
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	eb45 030b 	adc.w	r3, r5, fp
 800563c:	607b      	str	r3, [r7, #4]
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	f04f 0300 	mov.w	r3, #0
 8005646:	e9d7 4500 	ldrd	r4, r5, [r7]
 800564a:	4629      	mov	r1, r5
 800564c:	028b      	lsls	r3, r1, #10
 800564e:	4621      	mov	r1, r4
 8005650:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005654:	4621      	mov	r1, r4
 8005656:	028a      	lsls	r2, r1, #10
 8005658:	4610      	mov	r0, r2
 800565a:	4619      	mov	r1, r3
 800565c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565e:	2200      	movs	r2, #0
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	60fa      	str	r2, [r7, #12]
 8005664:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005668:	f7fb fa42 	bl	8000af0 <__aeabi_uldivmod>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4613      	mov	r3, r2
 8005672:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005674:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	0c1b      	lsrs	r3, r3, #16
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	3301      	adds	r3, #1
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005684:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	fbb2 f3f3 	udiv	r3, r2, r3
 800568c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800568e:	e002      	b.n	8005696 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005692:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005698:	4618      	mov	r0, r3
 800569a:	3740      	adds	r7, #64	; 0x40
 800569c:	46bd      	mov	sp, r7
 800569e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056a2:	bf00      	nop
 80056a4:	40023800 	.word	0x40023800
 80056a8:	00f42400 	.word	0x00f42400
 80056ac:	017d7840 	.word	0x017d7840

080056b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056b4:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80056b6:	681b      	ldr	r3, [r3, #0]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	200070a0 	.word	0x200070a0

080056c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056cc:	f7ff fff0 	bl	80056b0 <HAL_RCC_GetHCLKFreq>
 80056d0:	4602      	mov	r2, r0
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	0a9b      	lsrs	r3, r3, #10
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	4903      	ldr	r1, [pc, #12]	; (80056ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80056de:	5ccb      	ldrb	r3, [r1, r3]
 80056e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	40023800 	.word	0x40023800
 80056ec:	0800628c 	.word	0x0800628c

080056f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e041      	b.n	8005786 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7fd fc06 	bl	8002f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3304      	adds	r3, #4
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f000 f950 	bl	80059d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d001      	beq.n	80057a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e03c      	b.n	8005822 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1e      	ldr	r2, [pc, #120]	; (8005830 <HAL_TIM_Base_Start+0xa0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d018      	beq.n	80057ec <HAL_TIM_Base_Start+0x5c>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c2:	d013      	beq.n	80057ec <HAL_TIM_Base_Start+0x5c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a1a      	ldr	r2, [pc, #104]	; (8005834 <HAL_TIM_Base_Start+0xa4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00e      	beq.n	80057ec <HAL_TIM_Base_Start+0x5c>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a19      	ldr	r2, [pc, #100]	; (8005838 <HAL_TIM_Base_Start+0xa8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d009      	beq.n	80057ec <HAL_TIM_Base_Start+0x5c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a17      	ldr	r2, [pc, #92]	; (800583c <HAL_TIM_Base_Start+0xac>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d004      	beq.n	80057ec <HAL_TIM_Base_Start+0x5c>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a16      	ldr	r2, [pc, #88]	; (8005840 <HAL_TIM_Base_Start+0xb0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d111      	bne.n	8005810 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b06      	cmp	r3, #6
 80057fc:	d010      	beq.n	8005820 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f042 0201 	orr.w	r2, r2, #1
 800580c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800580e:	e007      	b.n	8005820 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0201 	orr.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40010000 	.word	0x40010000
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40000c00 	.word	0x40000c00
 8005840:	40014000 	.word	0x40014000

08005844 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_TIM_ConfigClockSource+0x1c>
 800585c:	2302      	movs	r3, #2
 800585e:	e0b4      	b.n	80059ca <HAL_TIM_ConfigClockSource+0x186>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800587e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005886:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005898:	d03e      	beq.n	8005918 <HAL_TIM_ConfigClockSource+0xd4>
 800589a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800589e:	f200 8087 	bhi.w	80059b0 <HAL_TIM_ConfigClockSource+0x16c>
 80058a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a6:	f000 8086 	beq.w	80059b6 <HAL_TIM_ConfigClockSource+0x172>
 80058aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ae:	d87f      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x16c>
 80058b0:	2b70      	cmp	r3, #112	; 0x70
 80058b2:	d01a      	beq.n	80058ea <HAL_TIM_ConfigClockSource+0xa6>
 80058b4:	2b70      	cmp	r3, #112	; 0x70
 80058b6:	d87b      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x16c>
 80058b8:	2b60      	cmp	r3, #96	; 0x60
 80058ba:	d050      	beq.n	800595e <HAL_TIM_ConfigClockSource+0x11a>
 80058bc:	2b60      	cmp	r3, #96	; 0x60
 80058be:	d877      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x16c>
 80058c0:	2b50      	cmp	r3, #80	; 0x50
 80058c2:	d03c      	beq.n	800593e <HAL_TIM_ConfigClockSource+0xfa>
 80058c4:	2b50      	cmp	r3, #80	; 0x50
 80058c6:	d873      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x16c>
 80058c8:	2b40      	cmp	r3, #64	; 0x40
 80058ca:	d058      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x13a>
 80058cc:	2b40      	cmp	r3, #64	; 0x40
 80058ce:	d86f      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x16c>
 80058d0:	2b30      	cmp	r3, #48	; 0x30
 80058d2:	d064      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x15a>
 80058d4:	2b30      	cmp	r3, #48	; 0x30
 80058d6:	d86b      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x16c>
 80058d8:	2b20      	cmp	r3, #32
 80058da:	d060      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x15a>
 80058dc:	2b20      	cmp	r3, #32
 80058de:	d867      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0x16c>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d05c      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x15a>
 80058e4:	2b10      	cmp	r3, #16
 80058e6:	d05a      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x15a>
 80058e8:	e062      	b.n	80059b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6818      	ldr	r0, [r3, #0]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	6899      	ldr	r1, [r3, #8]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f000 f965 	bl	8005bc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800590c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	609a      	str	r2, [r3, #8]
      break;
 8005916:	e04f      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	6899      	ldr	r1, [r3, #8]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f000 f94e 	bl	8005bc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800593a:	609a      	str	r2, [r3, #8]
      break;
 800593c:	e03c      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6859      	ldr	r1, [r3, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	461a      	mov	r2, r3
 800594c:	f000 f8c2 	bl	8005ad4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2150      	movs	r1, #80	; 0x50
 8005956:	4618      	mov	r0, r3
 8005958:	f000 f91b 	bl	8005b92 <TIM_ITRx_SetConfig>
      break;
 800595c:	e02c      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	461a      	mov	r2, r3
 800596c:	f000 f8e1 	bl	8005b32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2160      	movs	r1, #96	; 0x60
 8005976:	4618      	mov	r0, r3
 8005978:	f000 f90b 	bl	8005b92 <TIM_ITRx_SetConfig>
      break;
 800597c:	e01c      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	6859      	ldr	r1, [r3, #4]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	461a      	mov	r2, r3
 800598c:	f000 f8a2 	bl	8005ad4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2140      	movs	r1, #64	; 0x40
 8005996:	4618      	mov	r0, r3
 8005998:	f000 f8fb 	bl	8005b92 <TIM_ITRx_SetConfig>
      break;
 800599c:	e00c      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4619      	mov	r1, r3
 80059a8:	4610      	mov	r0, r2
 80059aa:	f000 f8f2 	bl	8005b92 <TIM_ITRx_SetConfig>
      break;
 80059ae:	e003      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	73fb      	strb	r3, [r7, #15]
      break;
 80059b4:	e000      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a34      	ldr	r2, [pc, #208]	; (8005ab8 <TIM_Base_SetConfig+0xe4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00f      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f2:	d00b      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a31      	ldr	r2, [pc, #196]	; (8005abc <TIM_Base_SetConfig+0xe8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d007      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a30      	ldr	r2, [pc, #192]	; (8005ac0 <TIM_Base_SetConfig+0xec>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a2f      	ldr	r2, [pc, #188]	; (8005ac4 <TIM_Base_SetConfig+0xf0>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d108      	bne.n	8005a1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a25      	ldr	r2, [pc, #148]	; (8005ab8 <TIM_Base_SetConfig+0xe4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d01b      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a2c:	d017      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a22      	ldr	r2, [pc, #136]	; (8005abc <TIM_Base_SetConfig+0xe8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d013      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a21      	ldr	r2, [pc, #132]	; (8005ac0 <TIM_Base_SetConfig+0xec>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00f      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a20      	ldr	r2, [pc, #128]	; (8005ac4 <TIM_Base_SetConfig+0xf0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00b      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a1f      	ldr	r2, [pc, #124]	; (8005ac8 <TIM_Base_SetConfig+0xf4>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d007      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a1e      	ldr	r2, [pc, #120]	; (8005acc <TIM_Base_SetConfig+0xf8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a1d      	ldr	r2, [pc, #116]	; (8005ad0 <TIM_Base_SetConfig+0xfc>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d108      	bne.n	8005a70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a08      	ldr	r2, [pc, #32]	; (8005ab8 <TIM_Base_SetConfig+0xe4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d103      	bne.n	8005aa4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	615a      	str	r2, [r3, #20]
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	40014000 	.word	0x40014000
 8005acc:	40014400 	.word	0x40014400
 8005ad0:	40014800 	.word	0x40014800

08005ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	f023 0201 	bic.w	r2, r3, #1
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f023 030a 	bic.w	r3, r3, #10
 8005b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	621a      	str	r2, [r3, #32]
}
 8005b26:	bf00      	nop
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b087      	sub	sp, #28
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	f023 0210 	bic.w	r2, r3, #16
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	031b      	lsls	r3, r3, #12
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	621a      	str	r2, [r3, #32]
}
 8005b86:	bf00      	nop
 8005b88:	371c      	adds	r7, #28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f043 0307 	orr.w	r3, r3, #7
 8005bb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	609a      	str	r2, [r3, #8]
}
 8005bbc:	bf00      	nop
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
 8005bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005be2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	021a      	lsls	r2, r3, #8
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	431a      	orrs	r2, r3
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	609a      	str	r2, [r3, #8]
}
 8005bfc:	bf00      	nop
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e050      	b.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a1c      	ldr	r2, [pc, #112]	; (8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d018      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6c:	d013      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a18      	ldr	r2, [pc, #96]	; (8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00e      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a16      	ldr	r2, [pc, #88]	; (8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d009      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a15      	ldr	r2, [pc, #84]	; (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a13      	ldr	r2, [pc, #76]	; (8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d10c      	bne.n	8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40010000 	.word	0x40010000
 8005cd4:	40000400 	.word	0x40000400
 8005cd8:	40000800 	.word	0x40000800
 8005cdc:	40000c00 	.word	0x40000c00
 8005ce0:	40014000 	.word	0x40014000

08005ce4 <memset>:
 8005ce4:	4402      	add	r2, r0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d100      	bne.n	8005cee <memset+0xa>
 8005cec:	4770      	bx	lr
 8005cee:	f803 1b01 	strb.w	r1, [r3], #1
 8005cf2:	e7f9      	b.n	8005ce8 <memset+0x4>

08005cf4 <__errno>:
 8005cf4:	4b01      	ldr	r3, [pc, #4]	; (8005cfc <__errno+0x8>)
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	200070f8 	.word	0x200070f8

08005d00 <__libc_init_array>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	4d0d      	ldr	r5, [pc, #52]	; (8005d38 <__libc_init_array+0x38>)
 8005d04:	4c0d      	ldr	r4, [pc, #52]	; (8005d3c <__libc_init_array+0x3c>)
 8005d06:	1b64      	subs	r4, r4, r5
 8005d08:	10a4      	asrs	r4, r4, #2
 8005d0a:	2600      	movs	r6, #0
 8005d0c:	42a6      	cmp	r6, r4
 8005d0e:	d109      	bne.n	8005d24 <__libc_init_array+0x24>
 8005d10:	4d0b      	ldr	r5, [pc, #44]	; (8005d40 <__libc_init_array+0x40>)
 8005d12:	4c0c      	ldr	r4, [pc, #48]	; (8005d44 <__libc_init_array+0x44>)
 8005d14:	f000 faa6 	bl	8006264 <_init>
 8005d18:	1b64      	subs	r4, r4, r5
 8005d1a:	10a4      	asrs	r4, r4, #2
 8005d1c:	2600      	movs	r6, #0
 8005d1e:	42a6      	cmp	r6, r4
 8005d20:	d105      	bne.n	8005d2e <__libc_init_array+0x2e>
 8005d22:	bd70      	pop	{r4, r5, r6, pc}
 8005d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d28:	4798      	blx	r3
 8005d2a:	3601      	adds	r6, #1
 8005d2c:	e7ee      	b.n	8005d0c <__libc_init_array+0xc>
 8005d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d32:	4798      	blx	r3
 8005d34:	3601      	adds	r6, #1
 8005d36:	e7f2      	b.n	8005d1e <__libc_init_array+0x1e>
 8005d38:	080062a8 	.word	0x080062a8
 8005d3c:	080062a8 	.word	0x080062a8
 8005d40:	080062a8 	.word	0x080062a8
 8005d44:	080062ac 	.word	0x080062ac

08005d48 <log10>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	ed2d 8b02 	vpush	{d8}
 8005d4e:	ec55 4b10 	vmov	r4, r5, d0
 8005d52:	f000 f841 	bl	8005dd8 <__ieee754_log10>
 8005d56:	4622      	mov	r2, r4
 8005d58:	462b      	mov	r3, r5
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	eeb0 8a40 	vmov.f32	s16, s0
 8005d62:	eef0 8a60 	vmov.f32	s17, s1
 8005d66:	f7fa fe8d 	bl	8000a84 <__aeabi_dcmpun>
 8005d6a:	b998      	cbnz	r0, 8005d94 <log10+0x4c>
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2300      	movs	r3, #0
 8005d70:	4620      	mov	r0, r4
 8005d72:	4629      	mov	r1, r5
 8005d74:	f7fa fe68 	bl	8000a48 <__aeabi_dcmple>
 8005d78:	b160      	cbz	r0, 8005d94 <log10+0x4c>
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	4620      	mov	r0, r4
 8005d80:	4629      	mov	r1, r5
 8005d82:	f7fa fe4d 	bl	8000a20 <__aeabi_dcmpeq>
 8005d86:	b160      	cbz	r0, 8005da2 <log10+0x5a>
 8005d88:	f7ff ffb4 	bl	8005cf4 <__errno>
 8005d8c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8005db8 <log10+0x70>
 8005d90:	2322      	movs	r3, #34	; 0x22
 8005d92:	6003      	str	r3, [r0, #0]
 8005d94:	eeb0 0a48 	vmov.f32	s0, s16
 8005d98:	eef0 0a68 	vmov.f32	s1, s17
 8005d9c:	ecbd 8b02 	vpop	{d8}
 8005da0:	bd38      	pop	{r3, r4, r5, pc}
 8005da2:	f7ff ffa7 	bl	8005cf4 <__errno>
 8005da6:	ecbd 8b02 	vpop	{d8}
 8005daa:	2321      	movs	r3, #33	; 0x21
 8005dac:	6003      	str	r3, [r0, #0]
 8005dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005db2:	4803      	ldr	r0, [pc, #12]	; (8005dc0 <log10+0x78>)
 8005db4:	f000 b808 	b.w	8005dc8 <nan>
 8005db8:	00000000 	.word	0x00000000
 8005dbc:	fff00000 	.word	0xfff00000
 8005dc0:	0800629c 	.word	0x0800629c
 8005dc4:	00000000 	.word	0x00000000

08005dc8 <nan>:
 8005dc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005dd0 <nan+0x8>
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	00000000 	.word	0x00000000
 8005dd4:	7ff80000 	.word	0x7ff80000

08005dd8 <__ieee754_log10>:
 8005dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ddc:	ec55 4b10 	vmov	r4, r5, d0
 8005de0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8005de4:	462b      	mov	r3, r5
 8005de6:	da2f      	bge.n	8005e48 <__ieee754_log10+0x70>
 8005de8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8005dec:	4322      	orrs	r2, r4
 8005dee:	d109      	bne.n	8005e04 <__ieee754_log10+0x2c>
 8005df0:	493b      	ldr	r1, [pc, #236]	; (8005ee0 <__ieee754_log10+0x108>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	2300      	movs	r3, #0
 8005df6:	2000      	movs	r0, #0
 8005df8:	f7fa fcd4 	bl	80007a4 <__aeabi_ddiv>
 8005dfc:	ec41 0b10 	vmov	d0, r0, r1
 8005e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e04:	2d00      	cmp	r5, #0
 8005e06:	da09      	bge.n	8005e1c <__ieee754_log10+0x44>
 8005e08:	ee10 2a10 	vmov	r2, s0
 8005e0c:	ee10 0a10 	vmov	r0, s0
 8005e10:	4629      	mov	r1, r5
 8005e12:	f7fa f9e5 	bl	80001e0 <__aeabi_dsub>
 8005e16:	2200      	movs	r2, #0
 8005e18:	2300      	movs	r3, #0
 8005e1a:	e7ed      	b.n	8005df8 <__ieee754_log10+0x20>
 8005e1c:	4b31      	ldr	r3, [pc, #196]	; (8005ee4 <__ieee754_log10+0x10c>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	4629      	mov	r1, r5
 8005e22:	ee10 0a10 	vmov	r0, s0
 8005e26:	f7fa fb93 	bl	8000550 <__aeabi_dmul>
 8005e2a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8005e2e:	4604      	mov	r4, r0
 8005e30:	460d      	mov	r5, r1
 8005e32:	460b      	mov	r3, r1
 8005e34:	492c      	ldr	r1, [pc, #176]	; (8005ee8 <__ieee754_log10+0x110>)
 8005e36:	428b      	cmp	r3, r1
 8005e38:	dd08      	ble.n	8005e4c <__ieee754_log10+0x74>
 8005e3a:	4622      	mov	r2, r4
 8005e3c:	462b      	mov	r3, r5
 8005e3e:	4620      	mov	r0, r4
 8005e40:	4629      	mov	r1, r5
 8005e42:	f7fa f9cf 	bl	80001e4 <__adddf3>
 8005e46:	e7d9      	b.n	8005dfc <__ieee754_log10+0x24>
 8005e48:	2200      	movs	r2, #0
 8005e4a:	e7f3      	b.n	8005e34 <__ieee754_log10+0x5c>
 8005e4c:	1518      	asrs	r0, r3, #20
 8005e4e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8005e52:	4410      	add	r0, r2
 8005e54:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8005e58:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005e5c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8005e60:	f7fa fb0c 	bl	800047c <__aeabi_i2d>
 8005e64:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8005e68:	3303      	adds	r3, #3
 8005e6a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8005e6e:	ec45 4b10 	vmov	d0, r4, r5
 8005e72:	4606      	mov	r6, r0
 8005e74:	460f      	mov	r7, r1
 8005e76:	f000 f83b 	bl	8005ef0 <__ieee754_log>
 8005e7a:	a313      	add	r3, pc, #76	; (adr r3, 8005ec8 <__ieee754_log10+0xf0>)
 8005e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e80:	4630      	mov	r0, r6
 8005e82:	4639      	mov	r1, r7
 8005e84:	ec59 8b10 	vmov	r8, r9, d0
 8005e88:	f7fa fb62 	bl	8000550 <__aeabi_dmul>
 8005e8c:	a310      	add	r3, pc, #64	; (adr r3, 8005ed0 <__ieee754_log10+0xf8>)
 8005e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e92:	4604      	mov	r4, r0
 8005e94:	460d      	mov	r5, r1
 8005e96:	4640      	mov	r0, r8
 8005e98:	4649      	mov	r1, r9
 8005e9a:	f7fa fb59 	bl	8000550 <__aeabi_dmul>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	f7fa f99d 	bl	80001e4 <__adddf3>
 8005eaa:	a30b      	add	r3, pc, #44	; (adr r3, 8005ed8 <__ieee754_log10+0x100>)
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	460d      	mov	r5, r1
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	4639      	mov	r1, r7
 8005eb8:	f7fa fb4a 	bl	8000550 <__aeabi_dmul>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	e7bd      	b.n	8005e42 <__ieee754_log10+0x6a>
 8005ec6:	bf00      	nop
 8005ec8:	11f12b36 	.word	0x11f12b36
 8005ecc:	3d59fef3 	.word	0x3d59fef3
 8005ed0:	1526e50e 	.word	0x1526e50e
 8005ed4:	3fdbcb7b 	.word	0x3fdbcb7b
 8005ed8:	509f6000 	.word	0x509f6000
 8005edc:	3fd34413 	.word	0x3fd34413
 8005ee0:	c3500000 	.word	0xc3500000
 8005ee4:	43500000 	.word	0x43500000
 8005ee8:	7fefffff 	.word	0x7fefffff
 8005eec:	00000000 	.word	0x00000000

08005ef0 <__ieee754_log>:
 8005ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef4:	ec51 0b10 	vmov	r0, r1, d0
 8005ef8:	ed2d 8b04 	vpush	{d8-d9}
 8005efc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005f00:	b083      	sub	sp, #12
 8005f02:	460d      	mov	r5, r1
 8005f04:	da29      	bge.n	8005f5a <__ieee754_log+0x6a>
 8005f06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f0a:	4303      	orrs	r3, r0
 8005f0c:	ee10 2a10 	vmov	r2, s0
 8005f10:	d10c      	bne.n	8005f2c <__ieee754_log+0x3c>
 8005f12:	49cf      	ldr	r1, [pc, #828]	; (8006250 <__ieee754_log+0x360>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	2300      	movs	r3, #0
 8005f18:	2000      	movs	r0, #0
 8005f1a:	f7fa fc43 	bl	80007a4 <__aeabi_ddiv>
 8005f1e:	ec41 0b10 	vmov	d0, r0, r1
 8005f22:	b003      	add	sp, #12
 8005f24:	ecbd 8b04 	vpop	{d8-d9}
 8005f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f2c:	2900      	cmp	r1, #0
 8005f2e:	da05      	bge.n	8005f3c <__ieee754_log+0x4c>
 8005f30:	460b      	mov	r3, r1
 8005f32:	f7fa f955 	bl	80001e0 <__aeabi_dsub>
 8005f36:	2200      	movs	r2, #0
 8005f38:	2300      	movs	r3, #0
 8005f3a:	e7ee      	b.n	8005f1a <__ieee754_log+0x2a>
 8005f3c:	4bc5      	ldr	r3, [pc, #788]	; (8006254 <__ieee754_log+0x364>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f7fa fb06 	bl	8000550 <__aeabi_dmul>
 8005f44:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8005f48:	460d      	mov	r5, r1
 8005f4a:	4ac3      	ldr	r2, [pc, #780]	; (8006258 <__ieee754_log+0x368>)
 8005f4c:	4295      	cmp	r5, r2
 8005f4e:	dd06      	ble.n	8005f5e <__ieee754_log+0x6e>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	f7fa f946 	bl	80001e4 <__adddf3>
 8005f58:	e7e1      	b.n	8005f1e <__ieee754_log+0x2e>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e7f5      	b.n	8005f4a <__ieee754_log+0x5a>
 8005f5e:	152c      	asrs	r4, r5, #20
 8005f60:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005f64:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005f68:	441c      	add	r4, r3
 8005f6a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8005f6e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8005f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f76:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8005f7a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8005f7e:	ea42 0105 	orr.w	r1, r2, r5
 8005f82:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8005f86:	2200      	movs	r2, #0
 8005f88:	4bb4      	ldr	r3, [pc, #720]	; (800625c <__ieee754_log+0x36c>)
 8005f8a:	f7fa f929 	bl	80001e0 <__aeabi_dsub>
 8005f8e:	1cab      	adds	r3, r5, #2
 8005f90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	4682      	mov	sl, r0
 8005f98:	468b      	mov	fp, r1
 8005f9a:	f04f 0200 	mov.w	r2, #0
 8005f9e:	dc53      	bgt.n	8006048 <__ieee754_log+0x158>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f7fa fd3d 	bl	8000a20 <__aeabi_dcmpeq>
 8005fa6:	b1d0      	cbz	r0, 8005fde <__ieee754_log+0xee>
 8005fa8:	2c00      	cmp	r4, #0
 8005faa:	f000 8122 	beq.w	80061f2 <__ieee754_log+0x302>
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f7fa fa64 	bl	800047c <__aeabi_i2d>
 8005fb4:	a390      	add	r3, pc, #576	; (adr r3, 80061f8 <__ieee754_log+0x308>)
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	4606      	mov	r6, r0
 8005fbc:	460f      	mov	r7, r1
 8005fbe:	f7fa fac7 	bl	8000550 <__aeabi_dmul>
 8005fc2:	a38f      	add	r3, pc, #572	; (adr r3, 8006200 <__ieee754_log+0x310>)
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	4604      	mov	r4, r0
 8005fca:	460d      	mov	r5, r1
 8005fcc:	4630      	mov	r0, r6
 8005fce:	4639      	mov	r1, r7
 8005fd0:	f7fa fabe 	bl	8000550 <__aeabi_dmul>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4620      	mov	r0, r4
 8005fda:	4629      	mov	r1, r5
 8005fdc:	e7ba      	b.n	8005f54 <__ieee754_log+0x64>
 8005fde:	a38a      	add	r3, pc, #552	; (adr r3, 8006208 <__ieee754_log+0x318>)
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	4650      	mov	r0, sl
 8005fe6:	4659      	mov	r1, fp
 8005fe8:	f7fa fab2 	bl	8000550 <__aeabi_dmul>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	499b      	ldr	r1, [pc, #620]	; (8006260 <__ieee754_log+0x370>)
 8005ff4:	f7fa f8f4 	bl	80001e0 <__aeabi_dsub>
 8005ff8:	4652      	mov	r2, sl
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	460f      	mov	r7, r1
 8005ffe:	465b      	mov	r3, fp
 8006000:	4650      	mov	r0, sl
 8006002:	4659      	mov	r1, fp
 8006004:	f7fa faa4 	bl	8000550 <__aeabi_dmul>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4630      	mov	r0, r6
 800600e:	4639      	mov	r1, r7
 8006010:	f7fa fa9e 	bl	8000550 <__aeabi_dmul>
 8006014:	4606      	mov	r6, r0
 8006016:	460f      	mov	r7, r1
 8006018:	b914      	cbnz	r4, 8006020 <__ieee754_log+0x130>
 800601a:	4632      	mov	r2, r6
 800601c:	463b      	mov	r3, r7
 800601e:	e0a2      	b.n	8006166 <__ieee754_log+0x276>
 8006020:	4620      	mov	r0, r4
 8006022:	f7fa fa2b 	bl	800047c <__aeabi_i2d>
 8006026:	a374      	add	r3, pc, #464	; (adr r3, 80061f8 <__ieee754_log+0x308>)
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	4680      	mov	r8, r0
 800602e:	4689      	mov	r9, r1
 8006030:	f7fa fa8e 	bl	8000550 <__aeabi_dmul>
 8006034:	a372      	add	r3, pc, #456	; (adr r3, 8006200 <__ieee754_log+0x310>)
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	4604      	mov	r4, r0
 800603c:	460d      	mov	r5, r1
 800603e:	4640      	mov	r0, r8
 8006040:	4649      	mov	r1, r9
 8006042:	f7fa fa85 	bl	8000550 <__aeabi_dmul>
 8006046:	e0a7      	b.n	8006198 <__ieee754_log+0x2a8>
 8006048:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800604c:	f7fa f8ca 	bl	80001e4 <__adddf3>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4650      	mov	r0, sl
 8006056:	4659      	mov	r1, fp
 8006058:	f7fa fba4 	bl	80007a4 <__aeabi_ddiv>
 800605c:	ec41 0b18 	vmov	d8, r0, r1
 8006060:	4620      	mov	r0, r4
 8006062:	f7fa fa0b 	bl	800047c <__aeabi_i2d>
 8006066:	ec53 2b18 	vmov	r2, r3, d8
 800606a:	ec41 0b19 	vmov	d9, r0, r1
 800606e:	ec51 0b18 	vmov	r0, r1, d8
 8006072:	f7fa fa6d 	bl	8000550 <__aeabi_dmul>
 8006076:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800607a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800607e:	9301      	str	r3, [sp, #4]
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	4680      	mov	r8, r0
 8006086:	4689      	mov	r9, r1
 8006088:	f7fa fa62 	bl	8000550 <__aeabi_dmul>
 800608c:	a360      	add	r3, pc, #384	; (adr r3, 8006210 <__ieee754_log+0x320>)
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	4606      	mov	r6, r0
 8006094:	460f      	mov	r7, r1
 8006096:	f7fa fa5b 	bl	8000550 <__aeabi_dmul>
 800609a:	a35f      	add	r3, pc, #380	; (adr r3, 8006218 <__ieee754_log+0x328>)
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f7fa f8a0 	bl	80001e4 <__adddf3>
 80060a4:	4632      	mov	r2, r6
 80060a6:	463b      	mov	r3, r7
 80060a8:	f7fa fa52 	bl	8000550 <__aeabi_dmul>
 80060ac:	a35c      	add	r3, pc, #368	; (adr r3, 8006220 <__ieee754_log+0x330>)
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f7fa f897 	bl	80001e4 <__adddf3>
 80060b6:	4632      	mov	r2, r6
 80060b8:	463b      	mov	r3, r7
 80060ba:	f7fa fa49 	bl	8000550 <__aeabi_dmul>
 80060be:	a35a      	add	r3, pc, #360	; (adr r3, 8006228 <__ieee754_log+0x338>)
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	f7fa f88e 	bl	80001e4 <__adddf3>
 80060c8:	4642      	mov	r2, r8
 80060ca:	464b      	mov	r3, r9
 80060cc:	f7fa fa40 	bl	8000550 <__aeabi_dmul>
 80060d0:	a357      	add	r3, pc, #348	; (adr r3, 8006230 <__ieee754_log+0x340>)
 80060d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d6:	4680      	mov	r8, r0
 80060d8:	4689      	mov	r9, r1
 80060da:	4630      	mov	r0, r6
 80060dc:	4639      	mov	r1, r7
 80060de:	f7fa fa37 	bl	8000550 <__aeabi_dmul>
 80060e2:	a355      	add	r3, pc, #340	; (adr r3, 8006238 <__ieee754_log+0x348>)
 80060e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e8:	f7fa f87c 	bl	80001e4 <__adddf3>
 80060ec:	4632      	mov	r2, r6
 80060ee:	463b      	mov	r3, r7
 80060f0:	f7fa fa2e 	bl	8000550 <__aeabi_dmul>
 80060f4:	a352      	add	r3, pc, #328	; (adr r3, 8006240 <__ieee754_log+0x350>)
 80060f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fa:	f7fa f873 	bl	80001e4 <__adddf3>
 80060fe:	4632      	mov	r2, r6
 8006100:	463b      	mov	r3, r7
 8006102:	f7fa fa25 	bl	8000550 <__aeabi_dmul>
 8006106:	460b      	mov	r3, r1
 8006108:	4602      	mov	r2, r0
 800610a:	4649      	mov	r1, r9
 800610c:	4640      	mov	r0, r8
 800610e:	f7fa f869 	bl	80001e4 <__adddf3>
 8006112:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8006116:	9b01      	ldr	r3, [sp, #4]
 8006118:	3551      	adds	r5, #81	; 0x51
 800611a:	431d      	orrs	r5, r3
 800611c:	2d00      	cmp	r5, #0
 800611e:	4680      	mov	r8, r0
 8006120:	4689      	mov	r9, r1
 8006122:	dd48      	ble.n	80061b6 <__ieee754_log+0x2c6>
 8006124:	4b4e      	ldr	r3, [pc, #312]	; (8006260 <__ieee754_log+0x370>)
 8006126:	2200      	movs	r2, #0
 8006128:	4650      	mov	r0, sl
 800612a:	4659      	mov	r1, fp
 800612c:	f7fa fa10 	bl	8000550 <__aeabi_dmul>
 8006130:	4652      	mov	r2, sl
 8006132:	465b      	mov	r3, fp
 8006134:	f7fa fa0c 	bl	8000550 <__aeabi_dmul>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4606      	mov	r6, r0
 800613e:	460f      	mov	r7, r1
 8006140:	4640      	mov	r0, r8
 8006142:	4649      	mov	r1, r9
 8006144:	f7fa f84e 	bl	80001e4 <__adddf3>
 8006148:	ec53 2b18 	vmov	r2, r3, d8
 800614c:	f7fa fa00 	bl	8000550 <__aeabi_dmul>
 8006150:	4680      	mov	r8, r0
 8006152:	4689      	mov	r9, r1
 8006154:	b964      	cbnz	r4, 8006170 <__ieee754_log+0x280>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	4630      	mov	r0, r6
 800615c:	4639      	mov	r1, r7
 800615e:	f7fa f83f 	bl	80001e0 <__aeabi_dsub>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4650      	mov	r0, sl
 8006168:	4659      	mov	r1, fp
 800616a:	f7fa f839 	bl	80001e0 <__aeabi_dsub>
 800616e:	e6d6      	b.n	8005f1e <__ieee754_log+0x2e>
 8006170:	a321      	add	r3, pc, #132	; (adr r3, 80061f8 <__ieee754_log+0x308>)
 8006172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006176:	ec51 0b19 	vmov	r0, r1, d9
 800617a:	f7fa f9e9 	bl	8000550 <__aeabi_dmul>
 800617e:	a320      	add	r3, pc, #128	; (adr r3, 8006200 <__ieee754_log+0x310>)
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	4604      	mov	r4, r0
 8006186:	460d      	mov	r5, r1
 8006188:	ec51 0b19 	vmov	r0, r1, d9
 800618c:	f7fa f9e0 	bl	8000550 <__aeabi_dmul>
 8006190:	4642      	mov	r2, r8
 8006192:	464b      	mov	r3, r9
 8006194:	f7fa f826 	bl	80001e4 <__adddf3>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4630      	mov	r0, r6
 800619e:	4639      	mov	r1, r7
 80061a0:	f7fa f81e 	bl	80001e0 <__aeabi_dsub>
 80061a4:	4652      	mov	r2, sl
 80061a6:	465b      	mov	r3, fp
 80061a8:	f7fa f81a 	bl	80001e0 <__aeabi_dsub>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4620      	mov	r0, r4
 80061b2:	4629      	mov	r1, r5
 80061b4:	e7d9      	b.n	800616a <__ieee754_log+0x27a>
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
 80061ba:	4650      	mov	r0, sl
 80061bc:	4659      	mov	r1, fp
 80061be:	f7fa f80f 	bl	80001e0 <__aeabi_dsub>
 80061c2:	ec53 2b18 	vmov	r2, r3, d8
 80061c6:	f7fa f9c3 	bl	8000550 <__aeabi_dmul>
 80061ca:	4606      	mov	r6, r0
 80061cc:	460f      	mov	r7, r1
 80061ce:	2c00      	cmp	r4, #0
 80061d0:	f43f af23 	beq.w	800601a <__ieee754_log+0x12a>
 80061d4:	a308      	add	r3, pc, #32	; (adr r3, 80061f8 <__ieee754_log+0x308>)
 80061d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061da:	ec51 0b19 	vmov	r0, r1, d9
 80061de:	f7fa f9b7 	bl	8000550 <__aeabi_dmul>
 80061e2:	a307      	add	r3, pc, #28	; (adr r3, 8006200 <__ieee754_log+0x310>)
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	4604      	mov	r4, r0
 80061ea:	460d      	mov	r5, r1
 80061ec:	ec51 0b19 	vmov	r0, r1, d9
 80061f0:	e727      	b.n	8006042 <__ieee754_log+0x152>
 80061f2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8006248 <__ieee754_log+0x358>
 80061f6:	e694      	b.n	8005f22 <__ieee754_log+0x32>
 80061f8:	fee00000 	.word	0xfee00000
 80061fc:	3fe62e42 	.word	0x3fe62e42
 8006200:	35793c76 	.word	0x35793c76
 8006204:	3dea39ef 	.word	0x3dea39ef
 8006208:	55555555 	.word	0x55555555
 800620c:	3fd55555 	.word	0x3fd55555
 8006210:	df3e5244 	.word	0xdf3e5244
 8006214:	3fc2f112 	.word	0x3fc2f112
 8006218:	96cb03de 	.word	0x96cb03de
 800621c:	3fc74664 	.word	0x3fc74664
 8006220:	94229359 	.word	0x94229359
 8006224:	3fd24924 	.word	0x3fd24924
 8006228:	55555593 	.word	0x55555593
 800622c:	3fe55555 	.word	0x3fe55555
 8006230:	d078c69f 	.word	0xd078c69f
 8006234:	3fc39a09 	.word	0x3fc39a09
 8006238:	1d8e78af 	.word	0x1d8e78af
 800623c:	3fcc71c5 	.word	0x3fcc71c5
 8006240:	9997fa04 	.word	0x9997fa04
 8006244:	3fd99999 	.word	0x3fd99999
	...
 8006250:	c3500000 	.word	0xc3500000
 8006254:	43500000 	.word	0x43500000
 8006258:	7fefffff 	.word	0x7fefffff
 800625c:	3ff00000 	.word	0x3ff00000
 8006260:	3fe00000 	.word	0x3fe00000

08006264 <_init>:
 8006264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006266:	bf00      	nop
 8006268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626a:	bc08      	pop	{r3}
 800626c:	469e      	mov	lr, r3
 800626e:	4770      	bx	lr

08006270 <_fini>:
 8006270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006272:	bf00      	nop
 8006274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006276:	bc08      	pop	{r3}
 8006278:	469e      	mov	lr, r3
 800627a:	4770      	bx	lr
